
Процедура ГазНЭЗакупка_В_ПТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбраннаяСтрока) Экспорт
	
	БазаИсточник_СсылкиНаДокументыИсточники = БазаИсточник.NewObject("Массив");
	БазаИсточник_ГУИД_ДокументаИсточника 	= БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	БазаИсточник_ДокументСсылка				= БазаИсточник.Документы["ГазНЭЗакупка"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);	
	БазаИсточник_СсылкиНаДокументыИсточники.Добавить(БазаИсточник_ДокументСсылка);
		
	БИ_Запрос = БазаИсточник.NewObject("Запрос");
	БИ_Запрос.Text =
	"ВЫБРАТЬ
	|	ТЧ.Ссылка КАК Ссылка,
	|	ТЧ.Ссылка.Номер КАК Номер,
	|	ТЧ.Ссылка.Дата КАК Дата,
	|	ТЧ.Ссылка.СчфДата КАК СчФДата,
	|	ТЧ.Ссылка.СчфНомер КАК СчФНомер,
	|	ТЧ.Ссылка.Поставщик КАК Контрагент,
	|	ТЧ.Ссылка.Поставщик.Наименование КАК КонтрагентНаименование,
	|	ТЧ.Ссылка.Поставщик.Страна.Наименование КАК КонтрангентНаименованиеСтраны,
	|	ВЫБОР
	|		КОГДА ТЧ.Ссылка.Поставщик ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ТЧ.Ссылка.Поставщик.Страна В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.Страны.Россия))
	|						ТОГДА 4
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТЧ.Ссылка.Поставщик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Фл)
	|								ТОГДА 1
	|							КОГДА ТЧ.Ссылка.Поставщик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Ип)
	|								ТОГДА 2
	|							КОГДА ТЧ.Ссылка.Поставщик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Юл)
	|								ТОГДА 3
	|						КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК ТипКонтрагента,
	|	ТЧ.Ссылка.Договор.Номер КАК ДоговорНомер,
	|	ТЧ.Ссылка.МестоХранения.Код КАК СкладКод,
	|	ТЧ.Ссылка.ТочкаОформления.Код КАК ТочкаОформленияКод,
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.ВсегоСНДС КАК Цена,
	|	ТЧ.НомернойЭлемент КАК НомернойЭлемент,
	|	ТЧ.НомернойЭлемент.Код КАК НЭКод,
	|	ТЧ.НомернойЭлемент.Наименование КАК НЭНаименование,
	|	ТЧ.НомернойЭлемент.НомерВин КАК НЭНомерВин,
	|	ТЧ.НомернойЭлемент.НомерКузова КАК НЭНомерКузова,
	|	ТЧ.НомернойЭлемент.НомерДвигателя КАК НЭНомерДвигателя,
	|	ТЧ.НомернойЭлемент.НомерШасси КАК НЭНомерШасси,
	|	ТЧ.НомернойЭлемент.НомерАгрегата КАК НЭНомерАгрегата,
	|	ТЧ.НомернойЭлемент.ТипЭлемента.Наименование КАК ТипЭлемента
	|ИЗ
	|	Документ.ГАЗНЭЗакупка.НомерныеЭлементы КАК ТЧ
	|ГДЕ
	|	ТЧ.Ссылка В(&Ссылка)";
		
	БИ_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_СсылкиНаДокументыИсточники);
	БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
	Если БИ_РезультатЗапроса.Пустой() Тогда
		Сообщить("Не выбраны документы для загрузки");
		Возврат;
	КонецЕсли;
	БИ_Выборка = БИ_РезультатЗапроса.Выбрать();

	ТЗДанные = Новый ТаблицаЗначений;
	ТЗДанные.Колонки.Добавить("ДатаДок");
	ТЗДанные.Колонки.Добавить("НомерДок");
	ТЗДанные.Колонки.Добавить("ВхДата");
	ТЗДанные.Колонки.Добавить("Контрагент"); 	//ссылка
	ТЗДанные.Колонки.Добавить("Договор"); 		// ссылка
	ТЗДанные.Колонки.Добавить("Автомобиль"); 	//ссылка
	ТЗДанные.Колонки.Добавить("Цена");
	ТЗДанные.Колонки.Добавить("ВИН");
	ТЗДанные.Колонки.Добавить("ДатаСФ");
	ТЗДанные.Колонки.Добавить("НомерСФ");
	
	ТЗДанные.Колонки.Добавить("ДокументИсточник_ГУИД_Строкой");
	ТЗДанные.Колонки.Добавить("Склад");
	ТЗДанные.Колонки.Добавить("ТочкаОформления");
	ТЗДанные.Колонки.Добавить("ТипКонтрагента"); // используется для определения обложения НДС
	
    Пока БИ_Выборка.Следующий() Цикл
		НоваяСтрока = ТЗДанные.Добавить();
		НоваяСтрока.ДатаДок			= БИ_Выборка.Дата;
		НоваяСтрока.НомерДок		= БИ_Выборка.Номер;	
		НоваяСтрока.ВхДата			= '00010101';
		НоваяСтрока.ДокументИсточник_ГУИД_Строкой	= БазаИсточник.XMLСтрока(БИ_Выборка.Ссылка);
		
		//Определение поставщика
		//----------------------
		БИ_ГУИД_Контрагента = БазаИсточник.NewObject("УникальныйИдентификатор", БазаИсточник.XMLСтрока(БИ_Выборка.Контрагент));	
		Контрагент = БазаИсточник.Справочники.Контрагенты.ПолучитьСсылку(БИ_ГУИД_Контрагента); 
		
		АтрибутыКонтрагента = Новый Соответствие();
		АтрибутыКонтрагента.Вставить("Наименование", БИ_Выборка.КонтрагентНаименование);	
		Если БИ_Выборка.ТипКонтрагента = 1 Тогда
			АтрибутыКонтрагента.Вставить("ФизЛицо","1");
			АтрибутыКонтрагента.Вставить("СерияДокумента",		ВРег(СокрЛП(Контрагент.СерияДокумента)));
			АтрибутыКонтрагента.Вставить("НомерДокумента",		ВРег(СокрЛП(Контрагент.НомерДокумента)));
			АтрибутыКонтрагента.Вставить("ДатаДокумента",		СокрЛП(Строка(Контрагент.ДатаДокумента)));
			АтрибутыКонтрагента.Вставить("ЭмитентДокумента",	СокрЛП(Контрагент.ЭмитентДокумента));
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",	СокрЛП(БИ_Выборка.КонтрангентНаименованиеСтраны));
		ИначеЕсли БИ_Выборка.ТипКонтрагента = 2 Тогда
			АтрибутыКонтрагента.Вставить("ФизЛицо",	"0");
			АтрибутыКонтрагента.Вставить("ИНН",		ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",		"");
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",СокрЛП(БИ_Выборка.КонтрангентНаименованиеСтраны));
		ИначеЕсли БИ_Выборка.ТипКонтрагента = 3 Тогда
			АтрибутыКонтрагента.Вставить("ФизЛицо",	"0");
			АтрибутыКонтрагента.Вставить("ИНН",		ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",		ВРег(СокрЛП(Контрагент.КПП)));
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",СокрЛП(БИ_Выборка.КонтрангентНаименованиеСтраны));
		ИначеЕсли БИ_Выборка.ТипКонтрагента = 4 Тогда
			АтрибутыКонтрагента.Вставить("ФизЛицо",	"0");
			АтрибутыКонтрагента.Вставить("ИНН",		ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",		"");
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",СокрЛП(БИ_Выборка.КонтрангентНаименованиеСтраны));
		КонецЕсли;
		НоваяСтрока.Контрагент = ПолучитьКонтрагента(АтрибутыКонтрагента);

		//Договор. Определим на этом этапе подразделение только для корректного подбора договора по обособленному подразделению
		//-------------------------------------------------------------------------------------------------------------------------
		Подр 				= ПолучитьПодразделениеПоТочкеОформления(БИ_Выборка.ТочкаОформленияКод);
		НоваяСтрока.Договор = ПолучитьДоговор(НоваяСтрока.Контрагент, БИ_Выборка.ДоговорНомер, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Подр, БИ_Выборка.ТипКонтрагента); // Для НЭЗакупка договор создаем, в отличие от ГАЗНЭЗакупка	

		//Склад
		//------
		НоваяСтрока.Склад = БИ_Выборка.СкладКод;
		
		//ТочкаОформления
		//----------------
		НоваяСтрока.ТочкаОформления =  БИ_Выборка.ТочкаОформленияКод;
		
		НоваяСтрока.ТипКонтрагента 	= БИ_Выборка.ТипКонтрагента;
		
		//<Автомобиль>
		//-------------
		НомернойЭлемент = Новый Структура();
		НомернойЭлемент.Вставить("НомерВИН", 			БИ_Выборка.НЭНомерВин);
		НомернойЭлемент.Вставить("НомерКузова", 		БИ_Выборка.НЭНомерКузова);
		НомернойЭлемент.Вставить("НомерДвигателя", 		БИ_Выборка.НЭНомерДвигателя);
		НомернойЭлемент.Вставить("НомерШасси", 			БИ_Выборка.НЭНомерШасси);
		НомернойЭлемент.Вставить("НомерАгрегата", 		БИ_Выборка.НЭНомерАгрегата);
		НомернойЭлемент.Вставить("Код",			 		БИ_Выборка.НЭКод);
		
		Артикул					= ВыгрузитьНомернойЭлемент(НомернойЭлемент);
		НоваяСтрока.ВИН			= Артикул;
		БИ_ГУИД_НЭ_строкой 		= БазаИсточник.XMLСтрока(БИ_Выборка.НомернойЭлемент);
		НоваяСтрока.Автомобиль 	= ПолучитьАвтомобиль(Артикул, БИ_Выборка.НЭНаименование, БИ_ГУИД_НЭ_строкой, БИ_Выборка.ТипЭлемента); 	
		
		
		НоваяСтрока.Цена			= БИ_Выборка.Цена;
		НоваяСтрока.ДатаСФ			= БИ_Выборка.СчФДата;
		НоваяСтрока.НомерСФ			= БИ_Выборка.СчФНомер;
	КонецЦикла;
		
	врТЗ = ТЗДанные.Скопировать();
	ДобавитьДокументПТУ(врТЗ,  ТЗДанные[0].НомерДок, ТЗДанные[0].ДатаДок, ТЗДанные[0].Контрагент, ТЗДанные[0].Договор, ТЗДанные[0].НомерСФ,  ТЗДанные[0].ДатаСФ, БазаИсточник, врТЗ[0].Склад, врТЗ[0].ТочкаОформления, врТЗ[0].ДокументИсточник_ГУИД_Строкой, "ГАЗНЭЗакупка");  

	Если СписокОшибок.Количество()>0 Тогда
		ВывестиСписокРезультатов(СписокОшибок, "Ошибки при загрузке");
		Сообщить("При загрузке поступлений были ошибки, см. протокол");
		Возврат;
	КонецЕсли;
	
	Если СписокВыполнено.Количество()>0 Тогда
		ВывестиСписокРезультатов(СписокВыполнено, "Результат загрузки");
	КонецЕсли;
	
КонецПроцедуры

Процедура НЭЗакупка_В_ПТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбраннаяСтрока) Экспорт
	
	БазаИсточник_СсылкиНаДокументыИсточники = БазаИсточник.NewObject("Массив");
	БазаИсточник_ГУИД_ДокументаИсточника 	= БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	БазаИсточник_ДокументСсылка				= БазаИсточник.Документы["НЭЗакупка"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);	
	БазаИсточник_СсылкиНаДокументыИсточники.Добавить(БазаИсточник_ДокументСсылка);
		
	БИ_Запрос 		= БазаИсточник.NewObject("Запрос");
	БИ_Запрос.Text 	=
	"ВЫБРАТЬ
	|	ТЧ.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТЧ.Ссылка.ВхНомер <> """"
	|			ТОГДА ТЧ.Ссылка.ВхНомер
	|		ИНАЧЕ ТЧ.Ссылка.Номер
	|	КОНЕЦ КАК Номер,
	|	ТЧ.Ссылка.Дата КАК Дата,
	|	ТЧ.Ссылка.ВхДата КАК ВхДата,
	|	ТЧ.Ссылка.СчфДата КАК СчФДата,
	|	ТЧ.Ссылка.СчфНомер КАК СчФНомер,
	|	ТЧ.Ссылка.Поставщик КАК Контрагент,
	|	ТЧ.Ссылка.Поставщик.Наименование КАК КонтрагентНаименование,
	|	ТЧ.Ссылка.Поставщик.Страна.Наименование КАК КонтрангентНаименованиеСтраны,
	|	ВЫБОР
	|		КОГДА НЕ ТЧ.Ссылка.Поставщик.Страна В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.Страны.Россия))
	|			ТОГДА 4
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТЧ.Ссылка.Поставщик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Фл)
	|					ТОГДА 1
	|				КОГДА ТЧ.Ссылка.Поставщик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Ип)
	|					ТОГДА 2
	|				КОГДА ТЧ.Ссылка.Поставщик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Юл)
	|					ТОГДА 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипКонтрагента,
	|	ТЧ.Ссылка.Договор.Номер КАК ДоговорНомер,
	|	ТЧ.Ссылка.Договор.Дата КАК ДоговорДата,
	|	ТЧ.Ссылка.МестоХранения.Код КАК СкладКод,
	|	ТЧ.Ссылка.ТочкаОформления.Код КАК ТочкаОформленияКод,
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.ВсегоСНДС КАК Цена,
	|	ТЧ.НомернойЭлемент КАК НомернойЭлемент,
	|	ТЧ.НомернойЭлемент.Код КАК НЭКод,
	|	ТЧ.НомернойЭлемент.Наименование КАК НЭНаименование,
	|	ТЧ.НомернойЭлемент.НомерВин КАК НЭНомерВин,
	|	ТЧ.НомернойЭлемент.НомерКузова КАК НЭНомерКузова,
	|	ТЧ.НомернойЭлемент.НомерДвигателя КАК НЭНомерДвигателя,
	|	ТЧ.НомернойЭлемент.НомерШасси КАК НЭНомерШасси,
	|	ТЧ.НомернойЭлемент.НомерАгрегата КАК НЭНомерАгрегата,
	|	ТЧ.НомернойЭлемент.ТипЭлемента.Наименование КАК ТипЭлемента,
	|	ВЫБОР
	|		КОГДА ТЧ.Ссылка.Программа В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ПрограммыЗакупки.АвтПробег))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗакупкаНовогоАвтомобиля
	|ИЗ
	|	Документ.НЭЗакупка.НомерныеЭлементы КАК ТЧ
	|ГДЕ
	|	ТЧ.Ссылка В(&Ссылка)";
	
	БИ_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_СсылкиНаДокументыИсточники);
	БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
	Если БИ_РезультатЗапроса.Пустой() Тогда
		Сообщить("Не выбраны документы для загрузки");
		Возврат;
	КонецЕсли;
	БИ_Выборка = БИ_РезультатЗапроса.Выбрать();

	ТЗДанные = Новый ТаблицаЗначений;
	ТЗДанные.Колонки.Добавить("ДатаДок");
	ТЗДанные.Колонки.Добавить("НомерДок");
	ТЗДанные.Колонки.Добавить("ВхДата");
	ТЗДанные.Колонки.Добавить("Контрагент"); 	//ссылка
	ТЗДанные.Колонки.Добавить("Договор"); 		// ссылка
	ТЗДанные.Колонки.Добавить("Автомобиль"); 	//ссылка
	ТЗДанные.Колонки.Добавить("Цена");
	ТЗДанные.Колонки.Добавить("ВИН");
	ТЗДанные.Колонки.Добавить("ДатаСФ");
	ТЗДанные.Колонки.Добавить("НомерСФ");
	
	ТЗДанные.Колонки.Добавить("ДокументИсточник_ГУИД_Строкой");
	ТЗДанные.Колонки.Добавить("Склад");
	ТЗДанные.Колонки.Добавить("ТочкаОформления");
	ТЗДанные.Колонки.Добавить("ТипКонтрагента"); // используется для определения обложения НДС
	
    Пока БИ_Выборка.Следующий() Цикл
		НоваяСтрока = ТЗДанные.Добавить();
		НоваяСтрока.ДатаДок			= БИ_Выборка.Дата;
		НоваяСтрока.НомерДок		= БИ_Выборка.Номер;	
		НоваяСтрока.ВхДата			= БИ_Выборка.ВхДата;
		НоваяСтрока.ДокументИсточник_ГУИД_Строкой	= БазаИсточник.XMLСтрока(БИ_Выборка.Ссылка);
		
		//<Покупатель>
		АтрибутыКонтрагента = Новый Соответствие();
		
		БИ_ГУИД_Контрагента = БазаИсточник.NewObject("УникальныйИдентификатор", БазаИсточник.XMLСтрока(БИ_Выборка.Контрагент));	
		
		Контрагент = БазаИсточник.Справочники.Контрагенты.ПолучитьСсылку(БИ_ГУИД_Контрагента);
		
		АтрибутыКонтрагента.Вставить("Наименование", БИ_Выборка.КонтрагентНаименование);	
		Если БИ_Выборка.ТипКонтрагента = 1 Тогда
			
			АтрибутыКонтрагента.Вставить("ФизЛицо","1");
			АтрибутыКонтрагента.Вставить("СерияДокумента",		ВРег(СокрЛП(Контрагент.СерияДокумента)));
			АтрибутыКонтрагента.Вставить("НомерДокумента",		ВРег(СокрЛП(Контрагент.НомерДокумента)));
			АтрибутыКонтрагента.Вставить("ДатаДокумента",		СокрЛП(Строка(Контрагент.ДатаДокумента)));
			АтрибутыКонтрагента.Вставить("ЭмитентДокумента",	СокрЛП(Контрагент.ЭмитентДокумента));
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",	СокрЛП(БИ_Выборка.КонтрангентНаименованиеСтраны));
			
		ИначеЕсли БИ_Выборка.ТипКонтрагента = 2 Тогда
			
			АтрибутыКонтрагента.Вставить("ФизЛицо",	"0");
			АтрибутыКонтрагента.Вставить("ИНН",		ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",		"");
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",СокрЛП(БИ_Выборка.КонтрангентНаименованиеСтраны));
			
		ИначеЕсли БИ_Выборка.ТипКонтрагента = 3 Тогда
			
			АтрибутыКонтрагента.Вставить("ФизЛицо",	"0");
			АтрибутыКонтрагента.Вставить("ИНН",		ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",		ВРег(СокрЛП(Контрагент.КПП)));
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",СокрЛП(БИ_Выборка.КонтрангентНаименованиеСтраны));
			
		ИначеЕсли БИ_Выборка.ТипКонтрагента = 4 Тогда
			
			АтрибутыКонтрагента.Вставить("ФизЛицо",	"0");
			АтрибутыКонтрагента.Вставить("ИНН",		ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",		"");
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",СокрЛП(БИ_Выборка.КонтрангентНаименованиеСтраны));
			
		КонецЕсли;
		НоваяСтрока.Контрагент = ПолучитьКонтрагента(АтрибутыКонтрагента);
		//</Покупатель>

		//<Договор>                          
		// Определим на этом этапе подразделение только для корректного подбора договора по обособленному подразделению
		Подр 				= ПолучитьПодразделениеПоТочкеОформления(БИ_Выборка.ТочкаОформленияКод);
		НоваяСтрока.Договор = ПолучитьДоговор(НоваяСтрока.Контрагент, БИ_Выборка.ДоговорНомер, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Подр, БИ_Выборка.ТипКонтрагента); // Для НЭЗакупка договор создаем, в отличие от ГАЗНЭЗакупка
		//</Договор>
		
		//Склад
		НоваяСтрока.Склад = БИ_Выборка.СкладКод;
		
		//ТочкаОформления
		НоваяСтрока.ТочкаОформления =  БИ_Выборка.ТочкаОформленияКод;
		
		НоваяСтрока.ТипКонтрагента 	= БИ_Выборка.ТипКонтрагента;
		
		//<Автомобиль>
		НомернойЭлемент = Новый Структура();
		НомернойЭлемент.Вставить("НомерВИН", 			БИ_Выборка.НЭНомерВин);
		НомернойЭлемент.Вставить("НомерКузова", 		БИ_Выборка.НЭНомерКузова);
		НомернойЭлемент.Вставить("НомерДвигателя", 		БИ_Выборка.НЭНомерДвигателя);
		НомернойЭлемент.Вставить("НомерШасси", 			БИ_Выборка.НЭНомерШасси);
		НомернойЭлемент.Вставить("НомерАгрегата", 		БИ_Выборка.НЭНомерАгрегата);
		НомернойЭлемент.Вставить("Код",			 		БИ_Выборка.НЭКод);

		Артикул					= ВыгрузитьНомернойЭлемент(НомернойЭлемент);
		НоваяСтрока.ВИН			= Артикул;
		БИ_ГУИД_НЭ_строкой 		= БазаИсточник.XMLСтрока(БИ_Выборка.НомернойЭлемент);
		
		БИ_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", БазаИсточник.XMLСтрока(БИ_Выборка.Ссылка));
		ИстДокумент=БазаИсточник.Документы["НЭЗакупка"].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);

		НоваяСтрока.Автомобиль 	= ПолучитьАвтомобиль(Артикул, БИ_Выборка.НЭНаименование, БИ_ГУИД_НЭ_строкой, БИ_Выборка.ТипЭлемента, БИ_Выборка.ЗакупкаНовогоАвтомобиля); 	
		//</Автомобиль>
		
		НоваяСтрока.Цена			= БИ_Выборка.Цена;
		НоваяСтрока.ДатаСФ			= БИ_Выборка.СчФДата;
		НоваяСтрока.НомерСФ			= БИ_Выборка.СчФНомер;
	КонецЦикла;
					
	врТЗ = ТЗДанные.Скопировать();
	ДобавитьДокументПТУ(врТЗ, ТЗДанные[0].НомерДок, ТЗДанные[0].ДатаДок, ТЗДанные[0].Контрагент, ТЗДанные[0].Договор, ТЗДанные[0].НомерСФ, ТЗДанные[0].ДатаСФ, БазаИсточник, врТЗ[0].Склад, врТЗ[0].ТочкаОформления, врТЗ[0].ДокументИсточник_ГУИД_Строкой, "НЭЗакупка", 0, ТЗДанные[0].ВхДата);  
	
	Если СписокОшибок.Количество()>0 Тогда
		ВывестиСписокРезультатов(СписокОшибок, "Ошибки при загрузке");
		Сообщить("При загрузке поступлений были ошибки, см. протокол");
		Возврат;
	КонецЕсли;
	
	Если СписокВыполнено.Количество()>0 Тогда
		ВывестиСписокРезультатов(СписокВыполнено, "Результат загрузки");
	КонецЕсли;
	
КонецПроцедуры

Процедура ГазНЭЗакупка_в_ПТУ_Новая(БазаИсточник, НомерСтроки) Экспорт
	ВыбраннаяСтрока = ЭтотОбъект.ТЧ[НомерСтроки-1];
	ГазНЭЗакупка_В_ПТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбраннаяСтрока)
КонецПроцедуры

Процедура НЭЗакупка_в_ПТУ_Новая(БазаИсточник, НомерСтроки) Экспорт
	ВыбраннаяСтрока = ЭтотОбъект.ТЧ[НомерСтроки-1];
	НЭЗакупка_В_ПТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбраннаяСтрока)
КонецПроцедуры

Процедура НЭРеализация_в_РТУ_Новая(БазаИсточник, НомерСтроки) Экспорт
	ВыбраннаяСтрока = ЭтотОбъект.ТЧ[НомерСтроки-1];
	НЭРеализация_В_РТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбраннаяСтрока)
КонецПроцедуры

Процедура НЭРеализация_В_РТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбраннаяСтрока)

	//В параметр запроса нужно передать Ссылки выбранных в форме документов, и это должны быть ссылки типа документ-ссылка в базе источнике
	БазаИсточник_СсылкиНаДокументыИсточники = БазаИсточник.NewObject("Массив");

	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	БазаИсточник_ДокументСсылка=БазаИсточник.Документы["НЭРеализация"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);	
	БазаИсточник_СсылкиНаДокументыИсточники.Добавить(БазаИсточник_ДокументСсылка);
	
	БИ_Запрос = БазаИсточник.NewObject("Запрос");
	БИ_Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧ.Ссылка,
	|	ТЧ.Ссылка.Номер,
	|	ТЧ.Ссылка.Дата,
	|	ТЧ.Ссылка.СчфНомер КАК СчФНомер,
	|	ТЧ.Ссылка.Покупатель КАК Контрагент,
	|	ТЧ.Ссылка.Покупатель.Наименование КАК КонтрагентНаименование,
	|	ТЧ.Ссылка.Покупатель.Страна.Наименование КАК КонтрагентНаименованиеСтраны,
	|	ТЧ.Ссылка.Покупатель.Наименование,
	|	ВЫБОР
	|		КОГДА ТЧ.Ссылка.Покупатель ССЫЛКА Справочник.Контрагенты
	|			ТОГДА
	|				ВЫБОР КОГДА НЕ ТЧ.Ссылка.Покупатель.Страна В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.Страны.Россия)) ТОГДА 4 ИНАЧЕ
	|					ВЫБОР
	|						КОГДА ТЧ.Ссылка.Покупатель.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Фл)
	|							ТОГДА 1
	|						КОГДА ТЧ.Ссылка.Покупатель.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Ип)
	|							ТОГДА 2
	|						КОГДА ТЧ.Ссылка.Покупатель.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Юл)
	|							ТОГДА 3
	|					КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК ТипКонтрагента,
	|	ТЧ.Ссылка.Договор.Номер КАК ДоговорНомер,
	|	ТЧ.Ссылка.Договор.Дата КАК ДоговорДата,
	|	ТЧ.Ссылка.ТочкаОформления.Код КАК ТочкаОформленияКод,
	|	ТЧ.ВсегоСНДС КАК Цена,
	|	ТЧ.НомернойЭлемент,
	|	ТЧ.НомернойЭлемент.Код КАК НЭКод,
	|	ТЧ.НомернойЭлемент.Наименование КАК НЭНаименование,
	|	ТЧ.НомернойЭлемент.НомерВин КАК НЭНомерВин,
	|	ТЧ.НомернойЭлемент.НомерКузова КАК НЭНомерКузова,
	|	ТЧ.НомернойЭлемент.НомерДвигателя КАК НЭНомерДвигателя,
	|	ТЧ.НомернойЭлемент.НомерШасси КАК НЭНомерШасси,
	|	ТЧ.НомернойЭлемент.ТипЭлемента.Наименование КАК ТипЭлемента,
	|	ТЧ.НомернойЭлемент.НомерАгрегата КАК НЭНомерАгрегата,
	|	ДвижениеНЭОбороты.МестоХранения.Код КАК СкладКод
	|ИЗ
	|	Документ.НЭРеализация.НомерныеЭлементы КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеНЭ.Обороты(, , Регистратор, ) КАК ДвижениеНЭОбороты
	|		ПО ТЧ.НомернойЭлемент = ДвижениеНЭОбороты.НомернойЭлемент
	|			И ТЧ.Ссылка = ДвижениеНЭОбороты.Регистратор
	|ГДЕ
	|	ТЧ.Ссылка В(&Ссылка)";

	БИ_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_СсылкиНаДокументыИсточники);
	БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
	Если БИ_РезультатЗапроса.Пустой() Тогда
		Сообщить("Не выбраны документы для загрузки или у документов нет движений в оперативном учете");
		Возврат;
	КонецЕсли;
	БИ_Выборка = БИ_РезультатЗапроса.Выбрать();

	ТЗДанные = Новый ТаблицаЗначений;
	
	ТЗДанные.Колонки.Добавить("ДатаДок");
	ТЗДанные.Колонки.Добавить("НомерДок");
	ТЗДанные.Колонки.Добавить("Контрагент"); 	//ссылка
	ТЗДанные.Колонки.Добавить("Договор"); 		// ссылка
	ТЗДанные.Колонки.Добавить("ДоговорНомер");
	ТЗДанные.Колонки.Добавить("Автомобиль"); 	//ссылка
	ТЗДанные.Колонки.Добавить("Цена");
	ТЗДанные.Колонки.Добавить("ВИН");
	ТЗДанные.Колонки.Добавить("ДатаСФ");
	ТЗДанные.Колонки.Добавить("НомерСФ");
	
	ТЗДанные.Колонки.Добавить("ТипДокументаИсточникаСтрокой");
	ТЗДанные.Колонки.Добавить("ДокументИсточник_ГУИД_Строкой");
	ТЗДанные.Колонки.Добавить("Склад");
	ТЗДанные.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТЗДанные.Колонки.Добавить("ТипКонтрагента");
	ТЗДанные.Колонки.Добавить("ТочкаОформленияКод", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(9)));
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
    Пока БИ_Выборка.Следующий() Цикл
		НоваяСтрока = ТЗДанные.Добавить();
		НоваяСтрока.ДатаДок			= БИ_Выборка.Дата;
		НоваяСтрока.НомерДок		= БИ_Выборка.Номер;
		
		НоваяСтрока.ДокументИсточник_ГУИД_Строкой			= БазаИсточник.XMLСтрока(БИ_Выборка.Ссылка);
		НоваяСтрока.ТипДокументаИсточникаСтрокой="НЭРеализация";
		
		#Область Поставщик
		АтрибутыКонтрагента = Новый Соответствие();
		АтрибутыКонтрагента.Вставить("Наименование", БИ_Выборка.КонтрагентНаименование);
		
		БИ_ГУИД_Контрагента = БазаИсточник.NewObject("УникальныйИдентификатор", БазаИсточник.XMLСтрока(БИ_Выборка.Контрагент));
		
		Контрагент = БазаИсточник.Справочники.Контрагенты.ПолучитьСсылку(БИ_ГУИД_Контрагента);
		Если БИ_Выборка.ТипКонтрагента = 1 Тогда
			АтрибутыКонтрагента.Вставить("ФизЛицо","1");
			
			АтрибутыКонтрагента.Вставить("СерияДокумента",		ВРег(СокрЛП(Контрагент.СерияДокумента)));
			АтрибутыКонтрагента.Вставить("НомерДокумента",		ВРег(СокрЛП(Контрагент.НомерДокумента)));
			АтрибутыКонтрагента.Вставить("ДатаДокумента",		СокрЛП(Строка(Контрагент.ДатаДокумента)));
			АтрибутыКонтрагента.Вставить("ЭмитентДокумента",	СокрЛП(Контрагент.ЭмитентДокумента));
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",	СокрЛП(БИ_Выборка.КонтрагентНаименованиеСтраны));
			
		ИначеЕсли БИ_Выборка.ТипКонтрагента = 2 Тогда
			
			АтрибутыКонтрагента.Вставить("ФизЛицо",				"2");
			АтрибутыКонтрагента.Вставить("ИНН",					ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",					"");
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",	СокрЛП(БИ_Выборка.КонтрагентНаименованиеСтраны));
			
		ИначеЕсли БИ_Выборка.ТипКонтрагента = 3 Тогда
			
			АтрибутыКонтрагента.Вставить("ФизЛицо",				"0");
			АтрибутыКонтрагента.Вставить("ИНН",					ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",					ВРег(СокрЛП(Контрагент.КПП)));
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",	СокрЛП(БИ_Выборка.КонтрагентНаименованиеСтраны));
			
		ИначеЕсли БИ_Выборка.ТипКонтрагента = 4 Тогда
			
			АтрибутыКонтрагента.Вставить("ФизЛицо",				"0");
			АтрибутыКонтрагента.Вставить("ИНН",					ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",					"");
			АтрибутыКонтрагента.Вставить("НаименованиеСтраны",	СокрЛП(БИ_Выборка.КонтрагентНаименованиеСтраны));
			
		КонецЕсли;
		НоваяСтрока.Контрагент = ПолучитьКонтрагента(АтрибутыКонтрагента);
		НоваяСтрока.ТипКонтрагента = БИ_Выборка.ТипКонтрагента;
		#КонецОбласти
		
		НоваяСтрока.ДоговорНомер = БИ_Выборка.ДоговорНомер;
		
		НоваяСтрока.Склад = ПолучитьСклад(БИ_Выборка.СкладКод);
		НоваяСтрока.ТочкаОформленияКод = БИ_Выборка.ТочкаОформленияКод;
					
		////<Автомобиль>
		НомернойЭлемент = Новый Структура();
		НомернойЭлемент.Вставить("НомерВИН", 		БИ_Выборка.НЭНомерВин);
		НомернойЭлемент.Вставить("НомерКузова", 	БИ_Выборка.НЭНомерКузова);
		НомернойЭлемент.Вставить("НомерДвигателя", 	БИ_Выборка.НЭНомерДвигателя);
		НомернойЭлемент.Вставить("НомерШасси", 		БИ_Выборка.НЭНомерШасси);
		НомернойЭлемент.Вставить("НомерАгрегата", 	БИ_Выборка.НЭНомерАгрегата);
		НомернойЭлемент.Вставить("Код",			 	БИ_Выборка.НЭКод);

		Артикул=ВыгрузитьНомернойЭлемент(НомернойЭлемент);
		НоваяСтрока.ВИН=Артикул;
		БИ_ГУИД_НЭ_строкой = БазаИсточник.XMLСтрока(БИ_Выборка.НомернойЭлемент);
		НоваяСтрока.Автомобиль = ПолучитьАвтомобиль(Артикул, БИ_Выборка.НЭНаименование, БИ_ГУИД_НЭ_строкой, БИ_Выборка.ТипЭлемента); 	
		//</Автомобиль>
		
		НоваяСтрока.Цена			= БИ_Выборка.Цена;
		НоваяСтрока.ДатаСФ			= БИ_Выборка.Дата;
		НоваяСтрока.НомерСФ			= БИ_Выборка.СчФНомер;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТЗДанные Цикл  // с 04.02.2019 в ней одна строка
		ДобавитьДокументРТУ(ТЗДанные,  БазаИсточник);  
	КонецЦикла;
	
	Если СписокОшибок.Количество()>0 Тогда
		ВывестиСписокРезультатов(СписокОшибок, "Ошибки при загрузке");
		Сообщить("При загрузке реализаций были ошибки, см. протокол! Код ошибки = 4");
		Возврат;
	КонецЕсли;
	
	Если СписокВыполнено.Количество()>0 Тогда
		ВывестиСписокРезультатов(СписокВыполнено, "Результат загрузки");
	КонецЕсли;

КонецПроцедуры

Процедура НЭПередачаНаПереработку_В_ПередачаТоваров(БазаИсточник, НомерСтроки) Экспорт
	
	ИмяДок= "ПередачаТоваров";
	ВыбраннаяСтрока = ЭтотОбъект.ТЧ[НомерСтроки-1];
	ПредставлениеДокумента = ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
		
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент=БазаИсточник.Документы["НЭПередачаНаПереработку"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);

	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	//Поиск документа
	//---------------
	ИстНомерДокумента = ПолучитьНомерДокумента(ВыбраннаяСтрока.Номер, Метаданные.Документы[ИмяДок].ДлинаНомера); //если номер в приемнике, короче чем в источнике
	ДокСсылка = НайтиИсходящийДокумент(БазаИсточник, ИмяДок, ИстНомерДокумента, ВыбраннаяСтрока.Дата, ПредставлениеДокумента);
	
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Если Не ПерезаписыватьДокументы Тогда 
			СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
			Возврат;
		КонецЕсли;
		Док = ДокСсылка.ПолучитьОбъект(); 
		Док.Товары.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Док = Документы[имяДок].СоздатьДокумент();
		
		Док.Номер = ВыбраннаяСтрока.Номер; //<Номер и дата - ключ поиска №1>
		
		//11.11.2016
		//Док.Дата = ВыбраннаяСтрока.Дата; //=>
		Док.Дата = ВыбраннаяСтрока.Дата+1;
				
		Док.Комментарий = "#Загружено из ОУ " + ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой; //<Ключ для поиска № 2>

		Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Док.Организация = ЭтотОбъект.Организация;
		Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));		
	КонецЕсли;
		
	БазаИсточник_Запрос = БазаИсточник.NewObject("Запрос");
	БазаИсточник_Запрос.Текст =
	
	//Берем одну расходную запись т.к. склад в получателе в шапке
	//Получим точку оформления не из самого документа, а из заявки на переработку,
	//т.к. в самом документе могут указать "Отдел Логистики", а в заявке на переработку - та точка ,на которой планируется продажа
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЧ.Ссылка КАК Ссылка,
	|	ТЧ.Ссылка.Номер КАК Номер,
	|	ТЧ.Ссылка.Дата КАК Дата,
	|	ТЧ.Ссылка.Подрядчик КАК Контрагент,
	|	ТЧ.Ссылка.Подрядчик.Наименование КАК КонтрагентНаименование,
	|	ВЫБОР
	|		КОГДА НЕ ТЧ.Ссылка.Подрядчик.Страна В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.Страны.Россия))
	|			ТОГДА 4
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТЧ.Ссылка.Подрядчик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Фл)
	|					ТОГДА 1
	|				КОГДА ТЧ.Ссылка.Подрядчик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Ип)
	|					ТОГДА 2
	|				КОГДА ТЧ.Ссылка.Подрядчик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Юл)
	|					ТОГДА 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипКонтрагента,
	|	ТЧ.Ссылка.Основание.ТочкаОформления.Код КАК ОснованиеТочкаОформленияКод,
	|	ТЧ.НомернойЭлемент КАК НомернойЭлемент,
	|	ДвижениеНЭ.МестоХранения КАК МестоХранения,
	|	ДвижениеНЭ.МестоХранения.Код КАК СкладКод
	|ИЗ
	|	Документ.НЭПередачаНаПереработку.НомерныеЭлементы КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
	|		ПО ТЧ.НомернойЭлемент = ДвижениеНЭ.НомернойЭлемент
	|			И ТЧ.Ссылка = ДвижениеНЭ.Регистратор
	|			И (ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|ГДЕ
	|	ТЧ.Ссылка = &Ссылка";
	
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	БазаИсточник_ДокументСсылка=БазаИсточник.Документы[ВыбраннаяСтрока.ИдВидаДокумента].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	БазаИсточник_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_ДокументСсылка);
	БазаИсточник_РезультатЗапроса = БазаИсточник_Запрос.Выполнить();
	Если БазаИсточник_РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет движений в регистре по документу "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	БИ_Выборка = БазаИсточник_РезультатЗапроса.Выбрать();
	БИ_Выборка.Следующий();

	//Контрагент
	//-----------
	ИстКонтрагент = ИстДокумент.Подрядчик;
	АтрибутыКонтрагента = ПолучитьАтрибутыКонтрагента(БазаИсточник, ИстКонтрагент);
	нКонтрагент = ПолучитьКонтрагента(АтрибутыКонтрагента);
	Если нКонтрагент = Неопределено тогда
		Возврат;
	КонецЕсли; 
	Док.Контрагент = нКонтрагент;
		
	//Склад
	//-----
	Док.Склад = ПолучитьСклад(БИ_Выборка.СкладКод);
	
	//Подразделение
	//-------------
	Если ЭтотОбъект.УчетВРазрезеПодразделений Тогда
		АвтомобильКакНоменклатура =  ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, БИ_Выборка.НомернойЭлемент);
		
		//<Кошелев_06.02.2020_15:52, =>, Для Уфы берем подразделение из соответствия между точкой оформления и подразделением>
		//Док.ПодразделениеОрганизации = ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(АвтомобильКакНоменклатура, ПланыСчетов.Хозрасчетный.Товары, ВыбраннаяСтрока.Дата+1);
 		//=>
		Если ЭтотОбъект.ЭтоУфа Или ЭтоЛуидорГарантияУфа Тогда
			Док.ПодразделениеОрганизации = ПолучитьПодразделениеПоТочкеОформления(БИ_Выборка.ОснованиеТочкаОформленияКод);
		Иначе
			Док.ПодразделениеОрганизации = ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(АвтомобильКакНоменклатура, ПланыСчетов.Хозрасчетный.Товары, ВыбраннаяСтрока.Дата+1);
		КонецЕсли;
		//</Кошелев_06.02.2020_15:52>

	КонецЕсли;

	//Договор
	//-------
	нДоговор = ПолучитьДоговор(нКонтрагент, "", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Док.ПодразделениеОрганизации, Ложь);
	Если нДоговор = Неопределено тогда
		Возврат;
	КонецЕсли;
	Док.ДоговорКонтрагента = нДоговор;
	
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док,мСписокВидовДоговоров);
	ЗаполнениеДокументов.Заполнить(Док);
		
	Если Не Док.ЭтоНовый() Тогда
		Док.Товары.Очистить();
	КонецЕсли;
	
	//Заполнение табл. части Товары
	//-----------------------------
	Для Каждого ИстСтрокаТч Из ИстДокумент.НомерныеЭлементы Цикл
		нСтрока = Док.Товары.Добавить();
		нСтрока.Номенклатура = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, ИстСтрокаТЧ.НомернойЭлемент);
	 	нСтрока.Количество = 1;					
	КонецЦикла; 
	
	//Заполнение счетов учета в табличной части
	//------------------------------------------
	Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Товары");
	Для Каждого СтрокаТЧ Из Док.Товары Цикл
		Если Не ЗначениеЗаполнено(нСтрока.СчетУчета) Тогда
			нСтрока.счетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(нСтрока.СчетПередачи) Тогда
			нСтрока.СчетПередачи = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		КонецЕсли;	
	КонецЦикла;
			
	флНовыйДок = Док.ЭтоНовый();
	Попытка
		Док.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док)+" "+ОписаниеОшибки());
		Возврат
	КонецПопытки;
	
	ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БазаИсточник, ИстДокумент);
	
КонецПроцедуры

Процедура НЭПриемИзПереработки_В_ПоступлениеИзПереработки(БазаИсточник, НомерСтроки) Экспорт
	
	ИмяДок					= "ПоступлениеИзПереработки";
	ВыбраннаяСтрока 		= ЭтотОбъект.ТЧ[НомерСтроки-1];	
	ПредставлениеДокумента 	= ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
		
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент = БазаИсточник.Документы["НЭПриемИзПереработки"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
		
	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	//10.11.2016
	Если ИстДокумент.НомерныеЭлементы.Количество()=0 Тогда
		Сообщить(""+ПредставлениеДокумента+" не заполнена табличная часть, не загружаем!", СтатусСообщения.Важное );
		Возврат;
	КонецЕсли;
	
	//<Поиск документа>
	ИстНомерДокумента = ПолучитьНомерДокумента(ВыбраннаяСтрока.Номер, Метаданные.Документы[ИмяДок].ДлинаНомера); //если номер в приемнике, короче чем в источнике
	
	флНовыйДок = Истина;
	//<09.03.2017, =>, в 1С Бух 3.0 у этого вида документа нет реквизитов входящий номер документа и входящая дата документа. Возникают ситуации, когда 
	// в один день приходят входящие документы с одним и тем же номером, но от разных поставщиков. Поэтому сначала определимся с контрагентом, а потом будем
	// искать по контрагенту, номеру и дате>
	
	//ДокСсылка = НайтиИсходящийДокумент(БазаИсточник, ИмяДок, ИстНомерДокумента, ВыбраннаяСтрока.Дата, ПредставлениеДокумента);
	//=>
	ИстКонтрагент		= ИстДокумент.Подрядчик;
	АтрибутыКонтрагента	= ПолучитьАтрибутыКонтрагента(БазаИсточник, ИстКонтрагент);
	Запрос = Новый Запрос();
	Запрос.Текст = 
	
	//<10.04.2017, =>, поиск по входящему номеру и дате в доп.свойствах>
	
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ПоступлениеИзПереработки.Ссылка
	//|ИЗ
	//|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	//|ГДЕ
	//|	ПоступлениеИзПереработки.Номер = &Номер
	//|	И ПоступлениеИзПереработки.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	//|	И ПоступлениеИзПереработки.Контрагент.ИНН = &ИНН
	//|	И ПоступлениеИзПереработки.Контрагент.КПП = &КПП";	
	
	//=>
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеИзПереработки.Ссылка
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведения1
	|		ПО (ПоступлениеИзПереработки.Ссылка = (ВЫРАЗИТЬ(ДопСведения1.Объект КАК Документ.ПоступлениеИзПереработки)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведения2
	|		ПО (ПоступлениеИзПереработки.Ссылка = (ВЫРАЗИТЬ(ДопСведения2.Объект КАК Документ.ПоступлениеИзПереработки)))
	|ГДЕ
	|	ПоступлениеИзПереработки.Контрагент.ИНН = &ИНН
	|	И ПоступлениеИзПереработки.Контрагент.КПП = &КПП
	|	И ДопСведения1.Свойство = &CвойствоНомерВхДокумента
	|	И ДопСведения1.Значение = &ЗначениеНомерВхДокумента
	|	И ДопСведения2.Свойство = &СвойствоДатаВхДокумента
	|	И ДопСведения2.Значение МЕЖДУ НАЧАЛОПЕРИОДА(&ЗначениеДатаВхДокумента, ДЕНЬ) И КОНЕЦПЕРИОДА(&ЗначениеДатаВхДокумента, ДЕНЬ)";	
	//</10.04.2017>
	
	//Запрос.УстановитьПараметр("Номер", ИстНомерДокумента);
	//Запрос.УстановитьПараметр("Дата", ВыбраннаяСтрока.Дата);
	Запрос.УстановитьПараметр("ИНН", 						АтрибутыКонтрагента.Получить("ИНН"));
	Запрос.УстановитьПараметр("КПП", 						АтрибутыКонтрагента.Получить("КПП"));
	Запрос.УстановитьПараметр("CвойствоНомерВхДокумента", 	ЭтотОбъект.ДопСввоНомерВхДокПоступлениеИзПереработки);
	Запрос.УстановитьПараметр("СвойствоДатаВхДокумента", 	ЭтотОбъект.ДопСввоДатаВхДокПоступлениеИзПереработки);
	Запрос.УстановитьПараметр("ЗначениеНомерВхДокумента", 	ИстНомерДокумента);
	Запрос.УстановитьПараметр("ЗначениеДатаВхДокумента",	ВыбраннаяСтрока.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ДокСсылка = Документы.ПоступлениеИзПереработки.ПустаяСсылка();
	Иначе
		ДокСсылка = РезультатЗапроса.Выгрузить()[0][0];
	КонецЕсли;
	//</Поиск документа>
	
	//Поиск № 2 по ГУИДу
	//------------------
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеИзПереработки.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеИзПереработки КАК ПоступлениеИзПереработки
		|ГДЕ
		|	ПоступлениеИзПереработки.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Комментарий", 	"%@"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой+"%");
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДокСсылка = Документы.ПоступлениеИзПереработки.ПустаяСсылка();
		Иначе
			ДокСсылка = РезультатЗапроса.Выгрузить()[0][0];
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Если Не ПерезаписыватьДокументы Тогда 
			СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
			Возврат;
		КонецЕсли;
		Док = ДокСсылка.ПолучитьОбъект(); 		
		Док.Продукция.Очистить();
		Док.ИспользованныеМатериалы.Очистить();
		Док.Услуги.Очистить();
		
		флНовыйДок = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
			
		Док = Документы[имяДок].СоздатьДокумент();
		
		//Док.Номер = ВыбраннаяСтрока.Номер; //<Номер и дата - ключ для поиска № 1>
		
		Доступно = Истина;
		Доступно = Доступно И ЭтоУфа;
		Доступно = Доступно И ИстДокумент.Подрядчик.ИНН = "5256171639"; //ООО "НОВЫЙ ЗАВОД"
		Доступно = Доступно И ЗначениеЗаполнено(ИстДокумент.СчфНомер);
		Доступно = Доступно И СокрЛП(ИстДокумент)<> СокрЛП(ИстДокумент.СчфНомер);	
		Если Доступно Тогда
			Док.Номер = СокрЛП(ИстДокумент.СчфНомер);
		КонецЕсли;
		
		//<09.01.2018_14-25,=>, если заполнена дата входящего документа, тогда используй  ее>
		//Док.Дата = ВыбраннаяСтрока.Дата;
		//=>
		Если ЗначениеЗаполнено(ИстДокумент.ВхДата) Тогда
			Док.Дата = ИстДокумент.ВхДата;
		Иначе
			Док.Дата = ВыбраннаяСтрока.Дата;
		КонецЕсли;
		//</09.01.2018_14-25>
		
		Док.Комментарий 	= "#Загружено из ОУ " + ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой;  //<Ключ для поиска № 2>
		Док.Ответственный	= ПараметрыСеанса.ТекущийПользователь;
		Док.Организация 	= ЭтотОбъект.Организация;
		
		Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));
		
		флНовыйДок = Истина;
	КонецЕсли;
	
	//<28.04.2017, +, Измени время документа на 00:00:01>
	Док.Дата = НачалоДня(Док.Дата)+1;

	//<Взаиморасчеты с контрагентом>
	//<Контрагент>
	
	//<09.03.2017, //, перенесено выше - выполняется до поиска документа>
	//ИстКонтрагент = ИстДокумент.Подрядчик;
	//АтрибутыКонтрагента = ПолучитьАтрибутыКонтрагента(БазаИсточник, ИстКонтрагент);
	//</09.03.2017>
	
	нКонтрагент = ПолучитьКонтрагента(АтрибутыКонтрагента);
	Если нКонтрагент = Неопределено тогда
		Возврат;
	КонецЕсли; 
	Док.Контрагент = нКонтрагент;
	//</Контрагент>
		
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док,мСписокВидовДоговоров);
	ЗаполнениеДокументов.Заполнить(Док);
	
	Документы[ИмяДок].ЗаполнитьСчетаУчетаРасчетов(Док);	
	Если Не ЗначениеЗаполнено(Док.СчетУчетаРасчетовСКонтрагентом) Тогда
		Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Док.СчетУчетаРасчетовПоАвансам) Тогда
		Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;	
	КонецЕсли;
	//</Взаиморасчеты с контрагентом>

	 //<Подразделение>
	 //23.11.2016
	//УстановитьПодразделение(Док, ИстДокумент.ТочкаОформления.Наименование);
	//=>
	Если ЭтотОбъект.УчетВРазрезеПодразделений Тогда
		
		//Даже если в табличной части несколько автомобилей для определения подразделения используем только первую
		//т.к.в бухгалтерии подразделение в шапке документа
		Для Каждого ИстСтрокаТч Из ИстДокумент.НомерныеЭлементы Цикл
 			АвтомобильКакНоменклатура  = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, ИстСтрокаТЧ.НЭБазовый);
			Док.ПодразделениеОрганизации = ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(АвтомобильКакНоменклатура, ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку,ВыбраннаяСтрока.Дата+2);
			Прервать //см. предыдущий комментарий
		КонецЦикла;	
	КонецЕсли;
	//</Подразделение>
	
	//<Договор>
	нДоговор = ПолучитьДоговор(нКонтрагент, "", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Док.ПодразделениеОрганизации, Ложь);
	Док.ДоговорКонтрагента = нДоговор;
	//</Договор>
	
	//<Склад>;
	Док.Склад = ПолучитьСклад(ИстДокумент.МестоХранения.Код);
	//</Склад>
		
	//Счет затрат, МВЗ, НГ - в шапке ,статьи затрат - в табл. частях
	//------------------------------------------------------------------
	Док.СчетЗатрат = ЭтотОбъект.СчетЗатратДляПоступлениеУслугИзПереработки;
	//<Кошелев_06.02.2020_16:15, =>, Для Уфы подразделение затрат будет равно подразделению организации
	//Док.ПодразделениеЗатрат = ЭтотОбъект.МВЗдляПоступлениеУслугИзПереработки;
	//=>
	Если ЭтоУфа Или ЭтоЧелябинск Или  ЭтоЛуидорГарантияУфа Тогда
		Док.ПодразделениеЗатрат = Док.ПодразделениеОрганизации;
		Если Док.ПодразделениеЗатрат = Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
			Док.ПодразделениеЗатрат = ЭтотОбъект.МВЗдляПоступлениеУслугИзПереработки;	
		КонецЕсли;
	Иначе
		Док.ПодразделениеЗатрат = ЭтотОбъект.МВЗдляПоступлениеУслугИзПереработки;	
	КонецЕсли;
	
	//</Кошелев_06.02.2020_16:15>
	Док.НоменклатурнаяГруппа = ЭтотОбъект.НомГруппаЗатратДляПоступлениеУслугИзПереработки;
	
	//НДС
	//-----
	Если ЗначениеЗаполнено(ИстДокумент.СчфНомер) И ЗначениеЗаполнено(ИстДокумент.СчФДата) Тогда
		ПредъявленСчетФактура = Истина;
		Док.СуммаВключаетНДС=Истина;
	Иначе
		ПредъявленСчетФактура = Ложь;
	КонецЕсли;
	
	//<27.06.2018, + В приеме из переработки может быть несколько автомобилей и у каждого своя стоимость переработки>
	тзПрямыеЗатраты = Новый ТаблицаЗначений();  // Накапливает затраты в разрезе автомобилей
	тзПрямыеЗатраты.Колонки.Добавить("Автомобиль", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КвЧисла = Новый КвалификаторыЧисла(15,2);
	тзПрямыеЗатраты.Колонки.Добавить("СтоимостьМатериаловБезНДС", Новый ОписаниеТипов("Число", КвЧисла));
	тзПрямыеЗатраты.Колонки.Добавить("СтоимостьУслугБезНДС", Новый ОписаниеТипов("Число", КвЧисла));
	//</27.06.2018>
	
	//<Использованные материалы как затрата>
	Для Каждого ИстСтрокаТч Из ИстДокумент.НомерныеЭлементы Цикл
		нСтрока = Док.ИспользованныеМатериалы.Добавить();
		нСтрока.Номенклатура 	= ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, ИстСтрокаТЧ.НЭБазовый);
		нСтрока.Количество 		= 1;	
		нСтрока.СтатьяЗатрат	= ?(ЗначениеЗаполнено(нСтрока.Номенклатура.СтатьяЗатрат),нСтрока.Номенклатура.СтатьяЗатрат ,ЭтотОбъект.СтатьяЗатратМатериалыДляПоступлениеУслугИзПереработки);
		
		// Заполнение субконто СпособУчетаНДС, если оно есть
		//---------------------------------------------------
		Если ЭтоУфа ИЛИ ЭтоТамбов Или ЭтоЧелябинск Или ЭтоЛуидорГарантияУфа Тогда
			нСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;	
		
		//<04.08.2020_11:09, +, Заполнение поля Продукция по письму Давыдовой Анны>
		Если ЭтоМосква Тогда
			нСтрока.Продукция = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, ИстСтрокаТЧ.НЭНовый);
		КонецЕсли;
		//<04.08.2020_11:09>
		
		//<27.06.2018, + В приеме из переработки может быть несколько автомобилей и у каждого своя стоимость переработки>
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		|	ХозрасчетныйОбороты.Регистратор КАК РегистраторСправочно
		|ПОМЕСТИТЬ ВТ01
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Счет В ИЕРАРХИИ (&Счет1007),
		|			,
		|			Субконто2 = &Номенклатура
		|				И Организация = &Организация,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.СуммаОборотДт > 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйОбороты.СуммаОборотДт,
		|	ХозрасчетныйОбороты.Регистратор
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Счет В ИЕРАРХИИ (&Счет4101),
		|			,
		|			Субконто1 = &Номенклатура
		|				И Организация = &Организация,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.СуммаОборотДт > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ01.СуммаОборотДт КАК СуммаОборотДт,
		|	ВТ01.РегистраторСправочно
		|ИЗ
		|	ВТ01 КАК ВТ01";
		
		Запрос.УстановитьПараметр("Счет1007", 		ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
		Запрос.УстановитьПараметр("Счет4101", 		ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		Запрос.УстановитьПараметр("Организация", 	Док.Организация);
		Запрос.УстановитьПараметр("Номенклатура", 	нСтрока.Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			СебестоимостьМатериалов = 0;
		Иначе
			СебестоимостьМатериалов = РезультатЗапроса.Выгрузить()[0][0];
		КонецЕсли;	
		
		Новая = тзПрямыеЗатраты.Добавить();
		Новая.Автомобиль 				= ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, ИстСтрокаТЧ.НЭНовый);
		Новая.СтоимостьМатериаловБезНДС = СебестоимостьМатериалов;
		//</27.06.2018>	
	КонецЦикла;
	
	
	//<27.06.2018, // В приеме из переработки может быть несколько автомобилей и у каждого своя стоимость переработки>

	////<15.12.2017,=>, не всегда срабатывает определить стоимость через остаток, определим через оборот любого документа>

	////<28.04.2017, +, Определи себестоимость списанных материалов>
	////СебестоимостьМатериалов = 0;
	////Запрос = Новый Запрос();
	////Запрос.Текст =
	////"ВЫБРАТЬ ПЕРВЫЕ 1
	////|
	////|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт
	////|ИЗ
	////|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	////|			&Период,
	////|			Счет В ИЕРАРХИИ (&Счет),
	////|			,
	////|			Субконто2 = &Номенклатура
	////|				И 
	////|			Организация = &Организация) КАК ХозрасчетныйОстатки";
	////
	////
	////Запрос.УстановитьПараметр("Период",  		Новый Граница(Док.Дата, ВидГраницы.Включая));
	////Запрос.УстановитьПараметр("Счет", 			ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
	////Запрос.УстановитьПараметр("Организация", 	Док.Организация);
	////Запрос.УстановитьПараметр("Номенклатура", 	Док.ИспользованныеМатериалы[0].Номенклатура);
	////
	////
	////РезультатЗапроса = Запрос.Выполнить();
	////Если РезультатЗапроса.Пустой() Тогда
	////	СебестоимостьМатериалов = 0;
	////Иначе
	////	СебестоимостьМатериалов = РезультатЗапроса.Выгрузить()[0][0];
	////КонецЕсли;	
	////</28.04.2017>
	//
	////=>
	//
	//СебестоимостьМатериалов = 0;
	//Запрос = Новый Запрос();
	//Запрос.Текст =
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	//|	ХозрасчетныйОбороты.Регистратор КАК РегистраторСправочно
	//|ПОМЕСТИТЬ ВТ01
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	//|			,
	//|			,
	//|			Регистратор,
	//|			Счет В ИЕРАРХИИ (&Счет1007),
	//|			,
	//|			Субконто2 = &Номенклатура
	//|				И Организация = &Организация,
	//|			,
	//|			) КАК ХозрасчетныйОбороты
	//|ГДЕ
	//|	ХозрасчетныйОбороты.СуммаОборотДт > 0
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ХозрасчетныйОбороты.СуммаОборотДт,
	//|	ХозрасчетныйОбороты.Регистратор
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	//|			,
	//|			,
	//|			Регистратор,
	//|			Счет В ИЕРАРХИИ (&Счет4101),
	//|			,
	//|			Субконто1 = &Номенклатура
	//|				И Организация = &Организация,
	//|			,
	//|			) КАК ХозрасчетныйОбороты
	//|ГДЕ
	//|	ХозрасчетныйОбороты.СуммаОборотДт > 0
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ01.СуммаОборотДт КАК СуммаОборотДт,
	//|	ВТ01.РегистраторСправочно
	//|ИЗ
	//|	ВТ01 КАК ВТ01";
	//
	//Запрос.УстановитьПараметр("Счет1007", 		ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
	//Запрос.УстановитьПараметр("Счет4101", 		ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	//Запрос.УстановитьПараметр("Организация", 	Док.Организация);
	//Запрос.УстановитьПараметр("Номенклатура", 	Док.ИспользованныеМатериалы[0].Номенклатура);
	//
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	СебестоимостьМатериалов = 0;
	//Иначе
	//	СебестоимостьМатериалов = РезультатЗапроса.Выгрузить()[0][0];
	//КонецЕсли;	
	////</15.12.2017>
	//</27.06.2018>

	
	//<Цикл заполнения счетов учета в табличной части>
	Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "ИспользованныеМатериалы");
	Для Каждого нСтрока Из Док.ИспользованныеМатериалы Цикл
		Если Не ЗначениеЗаполнено(нСтрока.СчетУчета) Тогда
			нСтрока.счетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		КонецЕсли;
	КонецЦикла;
	//</Цикл заполнения счетов учета в табличной части>
	//</Использованные материалы как затрата>
	

	//<Полученная услуга по переработке как затрата>
	СебестоимостьУслугиБезНДС = 0;
	Для Каждого ИстСтрокаТч Из ИстДокумент.НомерныеЭлементы Цикл
		нСтрока = Док.Услуги.Добавить();
		нСтрока.Содержание = "Переработка автомобиля";
		нСтрока.СтатьяЗатрат = ЭтотОбъект.СтатьяЗатратУслугиДляПоступлениеУслугИзПереработки;
		нСтрока.Количество = 1;		
		нСтрока.Цена = 	ИстСтрокаТЧ.ВсегоСНДС;
		нСтрока.Сумма = ИстСтрокаТЧ.ВсегоСНДС;
		
		//<04.08.2020_11:09, +, Заполнение поля Продукция по письму Давыдовой Анны>
		Если ЭтоМосква Тогда
			нСтрока.Номенклатура = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, ИстСтрокаТч.НЭНовый);
		КонецЕсли;
		//<04.08.2020_11:09>

		Если ПредъявленСчетФактура Тогда
			Если Док.Дата<'20190101' Тогда
				нСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				нСтрока.СуммаНДС = Окр(нСтрока.Цена*18/118,2);
			Иначе
				нСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				нСтрока.СуммаНДС = Окр(нСтрока.Цена*20/120,2);
			КонецЕсли;
		Иначе
			нСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			нСтрока.СуммаНДС = 0;
		КонецЕсли;
		
				
		//<27.06.2018, + В приеме из переработки может быть несколько автомобилей и у каждого своя стоимость переработки>
		//СебестоимостьУслугиБезНДС = СебестоимостьУслугиБезНДС + (нСтрока.Сумма - нСтрока.СуммаНДС);
        //=>
		тзПрямыеЗатраты[ИстСтрокаТч.НомерСтроки-1].СтоимостьУслугБезНДС = (нСтрока.Сумма - нСтрока.СуммаНДС);
		//</27.06.2018
	КонецЦикла;
	
	
	//<Цикл заполнения счетов учета в табличной части>
	Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Услуги");
	Для Каждого нСтрока Из Док.Услуги Цикл
		Если Не ЗначениеЗаполнено(нСтрока.СчетУчетаНДС) Тогда
			нСтрока.счетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		КонецЕсли;
	КонецЦикла;
	//</Цикл заполнения счетов учета в табличной части>
	//</Полученная услуга по переработке как затрата>
	
	//<20.02.2018,+ Проверим наличие непредопределенного субконто СпособУчетаНДС на счете 19>
	Для Каждого ТекСтрока Из Док.Услуги Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаНДС) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполнение субконто СпособУчетаНДС, если оно есть
		//---------------------------------------------------
		ЕстьСубконтоСпособУчетаНДС = ЕстьСубконтоСпособУчетаНДСнаСчете19(ТекСтрока.счетУчетаНДС);
		Если ЕстьСубконтоСпособУчетаНДС = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоУфа Или ЭтоТамбов Или ЭтоЧелябинск Или ЭтоЛуидорГарантияУфа Тогда
			ТекСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;	
		
	КонецЦикла;
	//</20.02.2018>

	//<Продукция>
	Для Каждого ИстСтрокаТч Из ИстДокумент.НомерныеЭлементы Цикл
		нСтрока = Док.Продукция.Добавить();
		
		//<27.06.2018, =>, В приеме из переработки может быть несколько автомобилей и у каждого своя стоимость переработки>
 		//нСтрока.Номенклатура = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, ИстСтрокаТЧ.НЭНовый);
		//=>
		нСтрока.Номенклатура = тзПрямыеЗатраты[ИстСтрокаТч.НомерСтроки-1].Автомобиль;
		//</27.06.2018>
		
	 	нСтрока.Количество = 1;	
		
		//<27.06.2018, =>, В приеме из переработки может быть несколько автомобилей и у каждого своя стоимость переработки>
		//СебестоимостьПлановая = СебестоимостьМатериалов + СебестоимостьУслугиБезНДС;
		//нСтрока.СуммаПлановая = СебестоимостьПлановая;
		//нСтрока.ПлановаяСтоимость = СебестоимостьПлановая;
		//=>
		нСтрока.СуммаПлановая 		= тзПрямыеЗатраты[ИстСтрокаТч.НомерСтроки-1].СтоимостьМатериаловБезНДС+тзПрямыеЗатраты[ИстСтрокаТч.НомерСтроки-1].СтоимостьУслугБезНДС;
		нСтрока.ПлановаяСтоимость 	= нСтрока.СуммаПлановая;
		//</27.06.2018>

	КонецЦикла;
	
	//<Цикл заполнения счетов учета в табличной части>
	Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Продукция");
	Для Каждого нСтрока Из Док.Продукция Цикл
		Если Не ЗначениеЗаполнено(нСтрока.Счет) Тогда
			нСтрока.Счет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		КонецЕсли;
	КонецЦикла;
	//</Цикл заполнения счетов учета в табличной части>
	//</Продукция>

		
	//Попытка записать под номером, созданным самой платформой
	//--------------------------------------------------------
	Попытка
		Док.УстановитьНовыйНомер();
		Док.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
		
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Объект = Док.Ссылка;
		МЗ.Свойство = ЭтотОбъект.ДопСввоНомерВхДокПоступлениеИзПереработки;
		МЗ.Значение =  ИстНомерДокумента;
		
		Доступно = Истина;
		Доступно = Доступно И ЭтоУфа;
		Доступно = Доступно И ИстДокумент.Подрядчик.ИНН = "5256171639"; //ООО "НОВЫЙ ЗАВОД"
		Доступно = Доступно И ЗначениеЗаполнено(ИстДокумент.СчфНомер);
		Доступно = Доступно И СокрЛП(ИстДокумент)<> СокрЛП(ИстДокумент.СчфНомер);
		Если Доступно Тогда
			МЗ.Значение = ИстДокумент.СчфНомер;	
		КонецЕсли;
		МЗ.Записать();
		
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Объект = Док.Ссылка;
		МЗ.Свойство = ЭтотОбъект.ДопСввоДатаВхДокПоступлениеИзПереработки;
		МЗ.Значение =  ВыбраннаяСтрока.Дата;
		МЗ.Записать();
		
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док)+"."+Символы.ПС+"Описание ошибки = "+ОписаниеОшибки());
		Возврат
	КонецПопытки;
	
	Если ПредъявленСчетФактура Тогда
		ДобавитьСчетФактуруПолученный(Док.Ссылка, ИстДокумент.СчфНомер, ИстДокумент.СчФДата);
	КонецЕсли;

	ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БазаИсточник, ИстДокумент);

КонецПроцедуры

Процедура НЭПеремещение_В_ПеремещениеТоваров(БазаИсточник, НомерСтроки) Экспорт
	ИмяДок= "ПеремещениеТоваров";

	ВыбраннаяСтрока = ЭтотОбъект.ТЧ[НомерСтроки-1];
	ПредставлениеДокумента = ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
	
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент=БазаИсточник.Документы["НЭПеремещение"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	//<Поиск документа>
	ИстНомерДокумента = ПолучитьНомерДокумента(ВыбраннаяСтрока.Номер, Метаданные.Документы[ИмяДок].ДлинаНомера); //если номер в приемнике, короче чем в источнике
	ДокСсылка = НайтиИсходящийДокумент(БазаИсточник, ИмяДок, ИстНомерДокумента, ВыбраннаяСтрока.Дата, ПредставлениеДокумента);
	//</Поиск документа>	
	
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Если Не ПерезаписыватьДокументы Тогда 
			СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
			Возврат;
		КонецЕсли;
		Док = ДокСсылка.ПолучитьОбъект();
		Док.Товары.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Док = Документы[имяДок].СоздатьДокумент();
		//<Ключ для поиска № 1>
		Док.Номер = ВыбраннаяСтрока.Номер;
		//11.11.2016 =>
		//Док.Дата = ВыбраннаяСтрока.Дата;
		//=>
		Док.Дата = ВыбраннаяСтрока.Дата+1;
		//</Ключ для поиска № 1>
		//<Ключ для поиска № 2>
		Док.Комментарий = "#Загружено из ОУ " + ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой;
		//</Ключ для поиска № 2>
		Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Док.Организация = ЭтотОбъект.Организация;
		Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));		
	КонецЕсли;
	
	Док.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	БазаИсточник_Запрос = БазаИсточник.NewObject("Запрос");
	БазаИсточник_Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧ.Ссылка,
	|	ТЧ.НомернойЭлемент,
	|	ВЫБОР
	|		КОГДА ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА 1
	|		КОГДА ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА 2
	|	КОНЕЦ КАК ВидДвиженияЧислом,
	|	ДвижениеНЭ.МестоХранения.Код КАК СкладКод
	|ИЗ
	|	Документ.НЭПеремещение.НомерныеЭлементы КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
	|		ПО ТЧ.НомернойЭлемент = ДвижениеНЭ.НомернойЭлемент
	|			И ТЧ.Ссылка = ДвижениеНЭ.Регистратор
	|ГДЕ
	|	ТЧ.Ссылка = &Ссылка";

	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	БазаИсточник_ДокументСсылка=БазаИсточник.Документы[ВыбраннаяСтрока.ИдВидаДокумента].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	БазаИсточник_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_ДокументСсылка);
	БазаИсточник_РезультатЗапроса = БазаИсточник_Запрос.Выполнить();
	Если БазаИсточник_РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет движений в регистре по документу "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	БИ_Выборка = БазаИсточник_РезультатЗапроса.Выбрать();
	
	ИскалиСкладПолучатель = Ложь;
	ИскалиСкладОтправитель= Ложь;
	ИстНоменклатураСсылкаСтрокой = "";
	Пока БИ_Выборка.Следующий() Цикл
		
		Если БИ_Выборка. ВидДвиженияЧислом = 1 И Не ИскалиСкладПолучатель Тогда			
			Док.СкладПолучатель = ПолучитьСклад(БИ_Выборка.СкладКод);
			ИскалиСкладПолучатель = Истина;
			
			Если ЭтоУфа Тогда
				Док.ПодразделениеПолучатель = ПолучитьПодразделениеПоСкладу(БИ_Выборка.СкладКод);
			Иначе
				Док.ПодразделениеПолучатель = ПолучитьПодразделениеПоСкладуБУ(Док.СкладПолучатель);
			КонецЕсли;
		КонецЕсли;
		
		Если БИ_Выборка. ВидДвиженияЧислом = 2 И Не ИскалиСкладОтправитель Тогда	
			Док.СкладОтправитель = ПолучитьСклад(БИ_Выборка.СкладКод);
			ИскалиСкладОтправитель=Истина;
			
			Если ЭтоУфа Тогда
				Док.ПодразделениеОтправитель = ПолучитьПодразделениеПоСкладу(БИ_Выборка.СкладКод);
			Иначе
				Док.ПодразделениеОтправитель = ПолучитьПодразделениеПоСкладуБУ(Док.СкладОтправитель);
			КонецЕсли;
		КонецЕсли;
		
		БИ_ГУИД_НЭ_строкой = БазаИсточник.XMLСтрока(БИ_Выборка.НомернойЭлемент);
		Если ИстНоменклатураСсылкаСтрокой <> БИ_ГУИД_НЭ_строкой Тогда		
			нСтрока = Док.Товары.Добавить();	
			нСтрока.Номенклатура = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, БИ_Выборка.НомернойЭлемент);
			нСтрока.Количество=1;
			
			ИстНоменклатураСсылкаСтрокой = БИ_ГУИД_НЭ_строкой;
		КонецЕсли;
	КонецЦикла;
	
	//<Заполнение счетов учета в табличной части>
	ЗаполнениеДокументов.Заполнить(Док);
	Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Товары");
	Для Каждого нСтрока Из Док["Товары"] Цикл
		Если Не ЗначениеЗаполнено(нСтрока.СчетУчета) Тогда
			нСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		КонецЕсли;
	КонецЦикла;
	//</Заполнение счетов учета в табличной части>
	
	флНовыйДок = Док.ЭтоНовый();
	Попытка
		Док.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док));
		Возврат
	КонецПопытки;
		
	ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БазаИсточник, ИстДокумент);

КонецПроцедуры

Процедура НЭДоработка_В_ПоступлениеДопРасходов (БазаИсточник, НомерСтроки) Экспорт
	// Документ в БУ записываем не датой документа в ОУ, а датой приемки автомобиля в ОУ

	ИмяДок= "ПоступлениеДопРасходов";
	ВыбраннаяСтрока = ЭтотОбъект.ТЧ[НомерСтроки-1];
	ПредставлениеДокумента = ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
	
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент=БазаИсточник.Документы["НЭДоработка"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	
	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	НомерВхДок = ИстДокумент.ДокНомер;
	
	//Дата поступления из доработки
	// Так как в документе Доработка дата передачи - с учетом времени, а дата приемки - без времени (т.е. время 00:00:00), тогда если даты передачи передачи
	// и приемки совпадают, получается, что дата приемки по времени раньше даты передачи. Из-за этого вместо поступления доп. расходов загрузится обычное ПТУ
	// Для исправления этой ситуации в качестве времени приемки возьмем время передачи, если даты приемки и передачи совпадают.
	//---------------------------------------------------------------------------------------------------------------------------------------------------------
	
	ДатаВхДок = ИстДокумент.ДокДата; 
	//<10.07.2017, +, если даты совпадают, возьми наибольшее время>
	Если НачалоДня(ИстДокумент.Дата) = НачалоДня(ДатаВхДок) Тогда
		ДатаВхДок = ИстДокумент.Дата;	
	КонецЕсли;
	//</10.07.2017>
	
	Если Не ЗначениеЗаполнено(НомерВхДок) И Не ЗначениеЗаполнено(ДатаВхДок)
		// И Не ЗначениеЗаполнено(ИстДокумент.Подрядчик.Код) 
		Тогда
		СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. на момент выгрузки он не закрыт (не исполнен)");
		Возврат;
	КонецЕсли;
	
	//Контрагент. Общая часть
	//------------------------
	ИстКонтрагент = ИстДокумент.Подрядчик;
	АтрибутыКонтрагента = ПолучитьАтрибутыКонтрагента(БазаИсточник, ИстКонтрагент);
	нКонтрагент = ПолучитьКонтрагента(АтрибутыКонтрагента);
	Если нКонтрагент = Неопределено тогда
		Возврат;
	КонецЕсли; 
	
	//Контрагент.Уфа.Не выгружаем Доработки от Луидор-ГарантияУФА, даже если они выбраны
	//-----------------------------------------------------------------------
	Если ЭтоУфа Тогда
		Если нКонтрагент.ИНН = "0273088220" Тогда  // ООО "ЛуидорГарантия-Уфа"
			//Сообщить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от Луидор-Гарантия-Уфа");
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от Луидор-Гарантия-Уфа");
			Возврат;
		ИначеЕсли нКонтрагент.ИНН = "7447279002" Тогда // ООО "ЛУИДОРГАРАНТИЯ-ЧЕЛЯБИНСК"
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от Луидор-Гарантия-Челябинск");
			Возврат;
		ИначеЕсли нКонтрагент.ИНН = "0273088212" Тогда //ООО "ЛуидорСервис-Уфа"
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от ЛуидорСервис-Челябинск");
			Возврат;
		ИначеЕсли нКонтрагент.ИНН = "7447254135" Тогда //ООО "ЛуидорСервис-Челябинск"
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от ЛуидорСервис-Челябинск");
			Возврат;
		КонецЕсли;
	КонецЕсли;  
	
	//Не выгружаем Доработки от Луидор-ГарантияУФА, даже если они выбраны
	//-----------------------------------------------------------------------
	Если ЭтоЛуидорГарантияУфа Тогда
		Если нКонтрагент.ИНН = "0273088220" Тогда  // ООО "ЛуидорГарантия-Уфа"
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от Луидор-Гарантия-Уфа");
			Возврат;
		ИначеЕсли нКонтрагент.ИНН = "0273088212" Тогда //ООО "ЛуидорСервис-Уфа"
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от ЛуидорСервис-Челябинск");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Контрагент.Казань
	//-----------------
	Если ЭтотОбъект.ЭтоКазань Тогда
		Если нКонтрагент.ИНН = "1660277473" Или нКонтрагент.ИНН = "1660277988" Тогда 
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от Луидор-Сервис-Казань или Луидор-Гарантия-Казань");	
		КонецЕсли;
	КонецЕсли;
	
	//Контрагент.Тамбов
	//-----------------
	Если  ЭтотОбъект.ЭтоТамбов Тогда
		Если нКонтрагент.ИНН = "6829138160" Или нКонтрагент.ИНН = "6829138146" Тогда 
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от Азимут-Сервис или Азимут-Гарантия");	
		КонецЕсли;                                                                                                                      
	КонецЕсли; 
	
	//<Поиск партии>
	//Сначала найдем автомобиль
	нАвтомобиль=ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, ИстДокумент.НомернойЭлемент);
	
	//Уфа с 2019 года всегда грузит как ПТУ на счет 44, никаких доп.расходов
	//----------------------------------------------------------------------
	Если ЭтоУфа Или ЭтоЧелябинск Тогда
		ВИН = ИстДокумент.НомернойЭлемент.НомерВин;
		НЭДоработка_В_ПТУ_вместоПоступлениеДопРасходов(БазаИсточник, НомерСтроки, ВИН);
		Возврат;
	КонецЕсли;
	
	
	//<1. Проверка остатков. Если остаток есть, далее будем искать партию>
	Запрос = Новый Запрос();
	//<17.05.2018,=>, >

	//Запрос.Текст = 
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	//|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
	//|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В ИЕРАРХИИ (&Счет), , Субконто1 = &Номенклатура) КАК ХозрасчетныйОстатки";
	
	//=>
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В ИЕРАРХИИ (&Счет41), , Субконто1 = &Номенклатура) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстаток > 0";
	
	//<02.12.2019,+, По Москве добавлено условие по счету 10.07>
	Если ЭтоМосква Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В ИЕРАРХИИ (&Счет41), , Субконто1 = &Номенклатура) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.КоличествоОстаток > 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйОстатки.Подразделение,
		|	ХозрасчетныйОстатки.КоличествоОстаток,
		|	ХозрасчетныйОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&Счет1007), , Субконто2 = &Номенклатура) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.КоличествоОстаток > 0";
	КонецЕсли;
	//</02.12.2019>
	//</17.05.2018>";
	
	
	//Запрос.УстановитьПараметр("Период", ИстДокумент.Дата);//=>
	//Запрос.УстановитьПараметр("Период", ДатаВхДок);  // Документ в БУ записываем не датой документа в ОУ, а датой приемки автомобиля в ОУ 	
	//Запрос.УстановитьПараметр("Период", Новый Граница(ДатаВхДок, ВидГраницы.Включая)); // 10.11.2017 =>
	//Запрос.УстановитьПараметр("Период", Новый Граница(НачалоДня(ДатаВхДок), ВидГраницы.Включая)); //14.03.2018 =>
	//Запрос.УстановитьПараметр("Период", Новый Граница(НачалоДня(ДатаВхДок)+2, ВидГраницы.Включая)); //10.04.2018 => 
	Запрос.УстановитьПараметр("Период", Новый Граница(НачалоДня(ДатаВхДок)+1, ВидГраницы.Исключая));
		
	Запрос.УстановитьПараметр("Счет41",  	ПланыСчетов.Хозрасчетный.Товары);    
	Запрос.УстановитьПараметр("Счет1007",  	ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
	
	Запрос.УстановитьПараметр("Номенклатура", нАвтомобиль);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		тзРезультат = РезультатЗапроса.Выгрузить();
		
		ПодразделениеОстатка = тзРезультат[0].Подразделение;
		
		//<19.07.2016, все таки нужна себестоимость партии>	
		СебестоимостьПартии = тзРезультат[0].СуммаОстаток;
		//</19.07.2016все таки нужна себестоимость партии>
		
		//<Поиск партии>
		ДокументПартии = "";
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Ссылка,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Дата
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура
		|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
		|	И ПоступлениеТоваровУслугТовары.Ссылка.Дата < &ДатаДопРасходов
		|
		//|ОБЪЕДИНИТЬ //21.06.2016, убираем поиск документа Перемещения в качестве документа партии, т.к. возникают проблемы с НДС
		//|
		//|ВЫБРАТЬ
		//|	ПеремещениеТоваров.Ссылка,
		//|	ПеремещениеТоваров.Ссылка.Дата
		//|ИЗ
		//|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
		//|ГДЕ
		//|	ПеремещениеТоваров.Номенклатура = &Номенклатура
		//|	И ПеремещениеТоваров.Ссылка.ПодразделениеПолучатель = &Подразделение
		//|	И ПеремещениеТоваров.Ссылка.Проведен = ИСТИНА
		//|	И ПеремещениеТоваров.Ссылка.Дата < &ДатаДопРасходов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеИзПереработкиПродукция.Ссылка,
		|	ПоступлениеИзПереработкиПродукция.Ссылка.Дата
		|ИЗ
		|	Документ.ПоступлениеИзПереработки.Продукция КАК ПоступлениеИзПереработкиПродукция
		|ГДЕ
		|	ПоступлениеИзПереработкиПродукция.Номенклатура = &Номенклатура
		|	И ПоступлениеИзПереработкиПродукция.Ссылка.Проведен = ИСТИНА
		|	И ПоступлениеИзПереработкиПродукция.Ссылка.Дата < &ДатаДопРасходов
		|
		//<Кошелев_v108_04.03.2019_11-31; +; Учет комплектации как партиеобразующего документа>
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КомплектацияНоменклатуры.Ссылка,
		|	КомплектацияНоменклатуры.Дата
		|ИЗ
		|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
		|ГДЕ
		|	КомплектацияНоменклатуры.Номенклатура = &Номенклатура
		|	И КомплектацияНоменклатуры.Проведен = ИСТИНА
		|	И КомплектацияНоменклатуры.Дата < &ДатаДопРасходов
		//</Кошелев_v108_04.03.2019_11-31; +; Учет комплектации как партиеобразующего документа>
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка,
		|	МАКСИМУМ(ВТ.Дата) КАК Дата
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Ссылка";
		
		Запрос.УстановитьПараметр("Номенклатура", нАвтомобиль);
		Запрос.УстановитьПараметр("ДатаДопРасходов", ИстДокумент.Дата);
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОстатка);	
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ДокументПартии=РезультатЗапроса.Выгрузить()[0][0];
		Иначе
			СписокОшибок.Добавить(ПредставлениеДокумента+": "+"Не найден документ партиии для автомобиля "+нАвтомобиль);
			Возврат
		КонецЕсли;		
		//</Поиск партии>
		//КонецЕсли;
		
		
		//Поиск документа
		//---------------
		ДокСсылка = НайтиПолучитьВходящийДокумент(БазаИсточник, ИмяДок, НомерВхДок, ДатаВхДок, ПредставлениеДокумента);
		
		Если ЗначениеЗаполнено(ДокСсылка) Тогда
			Если Не ПерезаписыватьДокументы Тогда 
				СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
				Возврат;
			КонецЕсли;
			Док = ДокСсылка.ПолучитьОбъект();
			Док.Товары.Очистить();
		Иначе	
			Док = Документы[имяДок].СоздатьДокумент();
			Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));
			
			Док.НомерВходящегоДокумента = НомерВхДок; //<Номер и дата ВХОДЯЩЕГО документа - ключ поиска №1>
			Док.ДатаВходящегоДокумента = ДатаВхДок;
			
			Док.Комментарий = "#Загружено из ОУ " + ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой; //<Ключ для поиска № 2>
			
			Док.Номер = ИстДокумент.Номер;
			
			//Док.Дата = ИстДокумент.Дата; //=>
			Док.Дата = ДатаВхДок;   // Документ в БУ записываем не датой документа в ОУ, а датой приемки автомобиля в ОУ
			
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Док.Организация = ЭтотОбъект.Организация;					
		КонецЕсли;
		
		//<Взаиморасчеты>
		//<Контрагент>
		Док.Контрагент = нКонтрагент;
		//</Контрагент>
		
		Если ЭтоМосква Тогда
			БИ_Запрос = БазаИсточник.NewObject("Запрос");
			БИ_Запрос.Text = 
			"ВЫБРАТЬ
			|	ЗаказНарядыИмпорт.Основание.ДоговорВзаиморасчетов.Номер КАК Номер
			|ИЗ
			|	РегистрСведений.ЗаказНарядыИмпорт КАК ЗаказНарядыИмпорт
			|ГДЕ
			|	ЗаказНарядыИмпорт.Сигнатура = &Сигнатура";
			БИ_Запрос.УстановитьПараметр("Сигнатура", ИстДокумент.Основание);
			БИ_Результат = БИ_Запрос.Выполнить();
			Если Не БИ_Результат.Пустой() Тогда
				БИ_Выборка = БИ_Результат.Выбрать();
				БИ_Выборка.Следующий();
				Док.ДоговорКонтрагента = ПолучитьДоговор(нКонтрагент, БИ_Выборка.Номер, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Ложь);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Док.ДоговорКонтрагента) Тогда
				Док.ДоговорКонтрагента =	ПолучитьДоговор(нКонтрагент, "", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Ложь); //По номеру не ищем, т.е. берем первый попавшийся договор
			КонецЕсли;
		Иначе
		//<Договор>
			нДоговор = ПолучитьДоговор(нКонтрагент, "", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком); //По номеру не ищем, т.е. берем первый попавшийся договор
			Если нДоговор = Неопределено тогда
				Возврат;
			КонецЕсли;
			Док.ДоговорКонтрагента = нДоговор;
		КонецЕсли;
		//</Договор>
		//</Взаиморасчеты>
		
		мСписокВидовДоговоров = Новый СписокЗначений;
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док,мСписокВидовДоговоров);
		ЗаполнениеДокументов.Заполнить(Док);
		
		Документы[ИмяДок].ЗаполнитьСчетаУчетаРасчетов(Док);	
		Если Не ЗначениеЗаполнено(Док.СчетУчетаРасчетовСКонтрагентом) Тогда
			Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Док.СчетУчетаРасчетовПоАвансам) Тогда
			Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;	
		КонецЕсли;
		
		Док.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Док.КурсВзаиморасчетов             = 1;
		Док.КратностьВзаиморасчетов        = 1;
		
		Док.Сумма = ИстДокумент.СуммаВсего;
		Док.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству;
		
		//<НДС>
		Если ЗначениеЗаполнено(ИстДокумент.СчфНомер) И ЗначениеЗаполнено(ИстДокумент.СчФДата) Тогда // значит предъявлен счет-фактура
			ПредъявленСчетФактура = Истина;
			// Док.НДСВключенВСтоимость = Ложь; // 23.08.2016, наша деятельность облагается НДС, поэтому входящий НДС не может быть включен в стоимость
			Док.СуммаВключаетНДС = Истина;
			
			
			Док.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ;// было СтавкаНДС(БазаИсточник.XMLСтрока(ИстДокумент.СтавкаНДС));
			Док.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Док.Сумма, Док.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Док.СтавкаНДС));
		Иначе
			ПредъявленСчетФактура = Ложь;
			// Док.НДСВключенВСтоимость = Истина;	// 23.08.2016, наша деятельность облагается НДС, поэтому входящий НДС не может быть включен в стоимость
			Док.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Док.СуммаНДС = 0;
		КонецЕсли;
		//</НДС>
		
		нСтрока = Док.Товары.Добавить();
		нСтрока.Номенклатура = нАвтомобиль;
		нСтрока.Количество = 1;
		
		//<19.07.2016, все таки нужна себестоимость партии>	
		Если СебестоимостьПартии > 0 Тогда
			нСтрока.СуммаТовара = СебестоимостьПартии;
		Иначе
			нСтрока.СуммаТовара = 1;
		КонецЕсли;
		//</19.07.2016все таки нужна себестоимость партии>
		
		нСтрока.ДокументПартии = ДокументПартии;
		
		Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Товары");
		Если Не ЗначениеЗаполнено(нСтрока.СчетУчета) Тогда
			нСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		КонецЕсли;
		
		Если ПредъявленСчетФактура И Не ЗначениеЗаполнено(нСтрока.СчетУчетаНДС) Тогда
			нСтрока.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		КонецЕсли;
			
		//<20.02.2018,+ Проверим наличие непредопределенного субконто СпособУчетаНДС на счете 19>
		Для Каждого ТекСтрока Из Док.Товары Цикл
			
			Если Док.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				Прервать;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаНДС) Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьСубконтоСпособУчетаНДС = ЕстьСубконтоСпособУчетаНДСнаСчете19(ТекСтрока.счетУчетаНДС);
			Если ЕстьСубконтоСпособУчетаНДС = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоУфа Тогда
				ТекСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;		
		КонецЦикла;
		//</20.02.2018>

		флНовыйДок = Док.ЭтоНовый();
		Попытка
			Док.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
			СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
		Исключение
			СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док));
			Возврат
		КонецПопытки;
		
		Если ПредъявленСчетФактура Тогда
			ДобавитьСчетФактуруПолученный(Док.Ссылка, ИстДокумент.СчфНомер, ИстДокумент.СчФДата);
		КонецЕсли;
		
		ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БазаИсточник, ИстДокумент);
			
	Иначе
		
		//<07.02.2019, //, Уфа с 2019 года всегда грузит как ПТУ на счет 44, никаких доп.расходов>
		//Если ЭтотОбъект.ЭтоУфа Тогда  // ООО "Луидор-УФа"
		//	ВИН = ИстДокумент.НомернойЭлемент.НомерВин;
		//	НЭДоработка_В_ПТУ_вместоПоступлениеДопРасходов(БазаИсточник, НомерСтроки, ВИН);
		//	Возврат;
		//Иначе
		//<07.02.2019, +, Уфа с 20	
			СписокОшибок.Добавить(ПредставлениеДокумента+ ": нет автомобиля  "+нАвтомобиль+ " на остатках на дату " +Запрос.Параметры.Период.Значение);	
			Возврат;
		//<07.02.2019, +, Уфа с 20	
		//КонецЕсли;
		//<07.02.2019, +, Уфа с 20
		
	КонецЕсли;
		
	//Иначе
	//</1. Проверка остатков. Если остаток есть, далее будем искать партию>
	
КонецПроцедуры

Процедура НЭДоработка_В_ПТУ_вместоПоступлениеДопРасходов(БазаИсточник, НомерСтроки, ВИН = "")
	// Документ в БУ записываем не датой документа в ОУ, а датой приемки автомобиля в ОУ
		
	ИмяДок					= "ПоступлениеТоваровУслуг";
	ВыбраннаяСтрока 		= ЭтотОбъект.ТЧ[НомерСтроки-1];
	ПредставлениеДокумента 	= ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
		
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент=БазаИсточник.Документы["НЭДоработка"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);

	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	НомерВхДок	= ИстДокумент.ДокНомер;
	ДатаВхДок 	= ИстДокумент.ДокДата;
	
	Если Не ЗначениеЗаполнено(НомерВхДок) И Не ЗначениеЗаполнено(ДатаВхДок)
	Тогда
		СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. на момент выгрузки он не закрыт (не исполнен)");
		Возврат;
	КонецЕсли;

	//<Контрагент>
	ИстКонтрагент = ИстДокумент.Подрядчик;
	АтрибутыКонтрагента = ПолучитьАтрибутыКонтрагента(БазаИсточник, ИстКонтрагент);
	нКонтрагент = ПолучитьКонтрагента(АтрибутыКонтрагента);
	Если нКонтрагент = Неопределено тогда
		Возврат;
	КонецЕсли; 
	
	//<Уфа.Не выгружаем Доработки от Луидор-ГарантияУФА, даже если они выбраны>
	Если ЭтотОбъект.Организация.ИНН= "0273088205" Тогда
		Если нКонтрагент.ИНН = "0273088220" Тогда
			//Сообщить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от Луидор-Гарантия-Уфа");
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от Луидор-Гарантия-Уфа");
			Возврат
		ИначеЕсли нКонтрагент.ИНН = "7447279002" Тогда
			СписокОшибок.Добавить(ПредставлениеДокумента+ " не выгружаем, т.к. доработка от Луидор-Гарантия-Челябинск");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//</Уфа>
	//</Контрагент>
	
	//<Поиск документа>	
	ДокСсылка = НайтиПолучитьВходящийДокумент(БазаИсточник, ИмяДок, НомерВхДок, ДатаВхДок, ПредставлениеДокумента);
	//</Поиск документа>	
	
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Если Не ПерезаписыватьДокументы Тогда 
			СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
			Возврат;
		КонецЕсли;
		Док = ДокСсылка.ПолучитьОбъект();
		Док.Услуги.Очистить();
	Иначе	
		Док = Документы[имяДок].СоздатьДокумент();
		Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));
		
		Док.НомерВходящегоДокумента = НомерВхДок; //<Номер и дата ВХОДЯЩЕГО документа - ключ поиска №1>
		Док.ДатаВходящегоДокумента = ДатаВхДок;

		Док.Комментарий = "#Загружено из ОУ.Доработка " + ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой+" ; VIN "+ВИН; //<Ключ для поиска № 2>
		
		Док.Номер = ИстДокумент.Номер;
		
		//Док.Дата = ИстДокумент.Дата; //=>
		Док.Дата = ДатаВхДок; // Документ в БУ записываем не датой документа в ОУ, а датой приемки автомобиля в ОУ
		
		Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Док.Организация = ЭтотОбъект.Организация;	
		
		//<21.09.2016>
		Если ЗначениеЗаполнено(ВИН) Тогда
			Док.ПодразделениеОрганизации = ПолучитьПодразделениеПоВИН(ВИН);
		КонецЕсли;
		//</21.09.2016>
		
		//03.09.2020_10:48, +
		Если ЭтоЧелябинск Тогда
			Док.ПодразделениеОрганизации = ПолучитьПодразделениеПоТочкеОформления(ИстДокумент.ТочкаОформления.Код);
		КонецЕсли;
	КонецЕсли;
	
	Док.Комментарий = "#Загружено из ОУ.Доработка " + ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой+" ; VIN "+ВИН; //<Ключ для поиска № 2>

	Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
	Док.Контрагент = нКонтрагент;
	нДоговор = ПолучитьДоговор(нКонтрагент, "", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, Ложь); //По номеру не ищем, т.е. берем первый попавшийся договор
	Если нДоговор = Неопределено тогда
		Возврат;
	КонецЕсли;
	Док.ДоговорКонтрагента = нДоговор;
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док,мСписокВидовДоговоров);
	ЗаполнениеДокументов.Заполнить(Док);
	
	Документы[ИмяДок].ЗаполнитьСчетаУчетаРасчетов(Док);	
	Если Не ЗначениеЗаполнено(Док.СчетУчетаРасчетовСКонтрагентом) Тогда
		Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Док.СчетУчетаРасчетовПоАвансам) Тогда
		Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;	
	КонецЕсли;
	
	Док.ВалютаДокумента = ВалютаРегламентированногоУчета;
	Док.КурсВзаиморасчетов             = 1;
	Док.КратностьВзаиморасчетов        = 1;

	//<НДС>
	Если ЗначениеЗаполнено(ИстДокумент.СчфНомер) И ЗначениеЗаполнено(ИстДокумент.СчФДата) Тогда // значит предъявлен счет-фактура
		ПредъявленСчетФактура = Истина;
		//Док.НДСВключенВСтоимость = Ложь; //23.08.2016  наша деятельность облагается НДС, поэтому реквизит не актуален
		Док.СуммаВключаетНДС = Истина;
	Иначе
		ПредъявленСчетФактура = Ложь;
		//Док.НДСВключенВСтоимость = Истина; //23.08.2016  наша деятельность облагается НДС, поэтому реквизит не актуален	
	КонецЕсли;
	//</НДС>
	
    нСтрока = Док.Услуги.Добавить();
	нСтрока.Номенклатура = ЭтотОбъект.НоменклатураДляПТУкакДоработка;
	нСтрока.Содержание = "Доработка";	
	нСтрока.Количество = 1;
	нСтрока.Цена = ИстДокумент.СуммаВсего;
	нСтрока.Сумма = ИстДокумент.СуммаВсего;
	
	//<НДС>
	Если ПредъявленСчетФактура Тогда // значит предъявлен счет-фактура
		нСтрока.СтавкаНДС = СтавкаНДС(ИстДокумент.СтавкаНДС.Наименование);
		нСтрока.СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(нСтрока.Сумма, Док.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(нСтрока.СтавкаНДС));
	Иначе
		нСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		нСтрока.СуммаНДС  = 0;
	КонецЕсли;
	//</НДС>
	
	Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Услуги");
	//Переопределим на счет 44.02
	нСтрока.СчетЗатрат= ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
	нСтрока.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
	
	Если ИстДокумент.ТочкаОформления.Код="000000018" Тогда //Если это Челябинск
		нСтрока.ПодразделениеЗатрат = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000009");
	Иначе // точка оформления - Уфа
		Если ЗначениеЗаполнено (Док.ПодразделениеОрганизации) Тогда // оно заполнено если это ВАЗ
			нСтрока.ПодразделениеЗатрат = 	Док.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕсли;
	нСтрока.Субконто1 = ЭтотОбъект.СтатьяЗатратДляПТУкакДоработка;
	нСтрока.СубконтоНУ1 = ЭтотОбъект.СтатьяЗатратДляПТУкакДоработка;

	
	Если ПредъявленСчетФактура И Не ЗначениеЗаполнено(нСтрока.СчетУчетаНДС) Тогда
		нСтрока.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	КонецЕсли;
	
	//<20.02.2018,+ Проверим наличие непредопределенного субконто СпособУчетаНДС на счете 19>
	
	Для Каждого ТекСтрока Из Док.Услуги Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаНДС) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьСубконтоСпособУчетаНДС = ЕстьСубконтоСпособУчетаНДСнаСчете19(ТекСтрока.СчетУчетаНДС);
		Если ЕстьСубконтоСпособУчетаНДС = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоУфа Тогда
			ТекСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;	
		
	КонецЦикла;
	//</20.02.2018>

	флНовыйДок = Док.ЭтоНовый();
	Попытка
		Док.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док));
		Возврат
	КонецПопытки;
	Если ПредъявленСчетФактура Тогда
		ДобавитьСчетФактуруПолученный(Док.Ссылка, ИстДокумент.СчфНомер, ИстДокумент.СчФДата);
	КонецЕсли;
	
	УстановиЗначениеДопСвойства(Док.Ссылка, "vin_dorabotka", ВИН); 
		
	ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БазаИсточник, ИстДокумент);
	
КонецПроцедуры

Процедура НЭРазукомплектация_В_ОперацияБух(БазаИсточник, НомерСтроки) Экспорт
	
	ИмяДок= "ОперацияБух";

	ВыбраннаяСтрока = ЭтотОбъект.ТЧ[НомерСтроки-1];
	ПредставлениеДокумента = ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
	ИстДокПредставление = ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой;
	
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент=БазаИсточник.Документы["НЭРазукомплектация"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	//<Поиск документа>
	ИстНомерДокумента = ПолучитьНомерДокумента(ВыбраннаяСтрока.Номер, Метаданные.Документы[ИмяДок].ДлинаНомера); //если номер в приемнике, короче чем в источнике
	//ДокСсылка = НайтиИсходящийДокумент(БазаИсточник, ИмяДок, ИстНомерДокумента, ВыбраннаяСтрока.Дата, ПредставлениеДокумента);
	
	//<Поиск по представлению документа-источника в комментарии документа-приемника>
	//Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Документ."+имяДок+"
			|ГДЕ
			|	Комментарий ПОДОБНО &Комментарий";			
		Запрос.УстановитьПараметр("Комментарий", "%"+ИстДокПредставление+"%");
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ДокСсылка = РезультатЗапроса.Выгрузить()[0][0];
		КонецЕсли;
	//КонецЕсли;
	//</Поиск по представлению документа-источника в комментарии документа-приемника>
		
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Если Не ПерезаписыватьДокументы Тогда 
			СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
			Возврат;
		КонецЕсли;
		Док = ДокСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Док = Документы[имяДок].СоздатьДокумент();
		Док.Номер = ВыбраннаяСтрока.Номер;
		Док.Дата = ВыбраннаяСтрока.Дата;
		//<Ключ для поиска>
		Док.Комментарий = "#Загружено из ОУ " + ИстДокПредставление;
		//</Ключ для поиска>
		Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Док.Организация = ЭтотОбъект.Организация;
		Док.Содержание = "Изменение состава авто";
		Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));		
	КонецЕсли;
		
	БазаИсточник_Запрос = БазаИсточник.NewObject("Запрос");
	БазаИсточник_Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧ.Ссылка,
	|	ТЧ.Ссылка.ТочкаОформления.Код КАК ТочкаОформленияКод,
	|	ТЧ.Ссылка.НомернойЭлемент КАК НомернойЭлемент,
	|	ТЧ.Ссылка.МестоХранения.Код КАК СкладКод,
	|	ТЧ.Материал.Код КАК МатериалКод,
	|	ТЧ.Материал.Наименование КАК МатериалНаименование,
	|	ТЧ.Количество КАК Количество,
	|	ТЧ.ЦенаСНДС КАК Цена
	|ИЗ
	|	Документ.НЭРазукомплектация.Материалы КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеМТ КАК ДвижениеМТ
	|		ПО ТЧ.Материал = ДвижениеМТ.Материал
	|			И ТЧ.Ссылка = ДвижениеМТ.Регистратор
	|ГДЕ
	|	ТЧ.Ссылка = &Ссылка";

	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	БазаИсточник_ДокументСсылка=БазаИсточник.Документы[ВыбраннаяСтрока.ИдВидаДокумента].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	БазаИсточник_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_ДокументСсылка);
	БазаИсточник_РезультатЗапроса = БазаИсточник_Запрос.Выполнить();
	Если БазаИсточник_РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет движений в регистре по документу "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	БИ_Выборка = БазаИсточник_РезультатЗапроса.Выбрать();
	
	//Заполнить шапку
	БИ_Выборка.Следующий();
	
	
	Автомобиль = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, БИ_Выборка.НомернойЭлемент);
	
	Склад = ПолучитьСклад(БИ_Выборка.СкладКод);
	
	//12.12.2016, =>, определение подразделения не по складу а по остатку на счете
	//Подразделение = ПолучитьПодразделениеПоСкладу(БИ_Выборка.СкладКод);
	//=>
	
	//<06.02.2020_16:21, =>, Для Уфы подразделение определять по точке оформления>
	//Подразделение = ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(Автомобиль, ПланыСчетов.Хозрасчетный.Товары, ИстДокумент.Дата);
	//=>
	Если ЭтотОбъект.ЭтоУфа Тогда
		Подразделение = ПолучитьПодразделениеПоТочкеОформления(БИ_Выборка.ТочкаОформленияКод);
	Иначе
		Подразделение = ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(Автомобиль, ПланыСчетов.Хозрасчетный.Товары, ИстДокумент.Дата);
	КонецЕсли;
          
	БИ_Выборка.Сбросить();
	
	Проводки = Новый ТаблицаЗначений();
	Проводки.Колонки.Добавить("Материал");
	Проводки.Колонки.Добавить("Количество");
	Проводки.Колонки.Добавить("Сумма");
	
	СуммаОперации = 0;
	Пока БИ_Выборка.Следующий() Цикл
		СуммаПроводки = БИ_Выборка.Количество*БИ_Выборка.Цена;
		СуммаОперации = СуммаОперации + СуммаПроводки;

		НоваяЗап = Проводки.Добавить();
		
		Материал = ПолучиМатериал(СокрЛП(БИ_Выборка.МатериалНаименование));
		НоваяЗап.Материал = Материал;
		
		НоваяЗап.Количество = БИ_Выборка.Количество*(-1);
		НоваяЗап.Сумма = СуммаПроводки*(-1);
			
	КонецЦикла;

	Если СуммаОперации = 0 Тогда
		СписокОшибок.Добавить("Нулевая сумма операции в документе "+Строка(Док));
		Возврат
	КонецЕсли;
	
	Док.СуммаОперации = СуммаОперации;
	
	флНовыйДок = Док.ЭтоНовый();
	Попытка
		Док.Записать(РежимЗаписиДокумента.Запись);
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док)+" "+ОписаниеОшибки());
		Возврат
	КонецПопытки;
	
	НЗ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НЗ.Отбор.Регистратор.Установить(Док.Ссылка);		
	Для Каждого Проводка Из Проводки Цикл
		НоваяЗапись = НЗ.Добавить();
		НоваяЗапись.Регистратор = Док.Ссылка;
		НоваяЗапись.Период = Док.Дата;
		НоваяЗапись.Организация = Док.Организация;

		НоваяЗапись.ПодразделениеДт = Подразделение;
		НоваяЗапись.ПодразделениеКт = Подразделение;

		НоваяЗапись.Содержание = "Изменение состава авто";
		НоваяЗапись.КоличествоДт =0;

		НоваяЗапись.СчетДт = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		БухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, "Номенклатура", Автомобиль);
		
		НоваяЗапись.СчетКт = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		БухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, "Номенклатура", Проводка.Материал);
		
		НоваяЗапись.КоличествоКт = Проводка.Количество;
		НоваяЗапись.Сумма =Проводка.Сумма;

		НоваяЗапись.СуммаНУКт = Проводка.Сумма;
		НоваяЗапись.СуммаНУДт = Проводка.Сумма;	
	КонецЦикла;
	НЗ.Записать();
	
КонецПроцедуры

Процедура НЭДоукомплектация_В_Доукомплектация(БазаИсточник, НомерСтроки) Экспорт
	
	ИмяДок= "КомплектацияНоменклатуры";

	ВыбраннаяСтрока = ЭтотОбъект.ТЧ[НомерСтроки-1];
	ПредставлениеДокумента = ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
	ИстДокПредставление = ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой;
	
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент=БазаИсточник.Документы["НЭДоукомплектация"].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	//<Поиск документа>
	ИстНомерДокумента = ПолучитьНомерДокумента(ВыбраннаяСтрока.Номер, Метаданные.Документы[ИмяДок].ДлинаНомера); //если номер в приемнике, короче чем в источнике
	//ДокСсылка = НайтиИсходящийДокумент(БазаИсточник, ИмяДок, ИстНомерДокумента, ВыбраннаяСтрока.Дата, ПредставлениеДокумента);
	
	//Поиск документа
	//---------------
	ИстНомерДокумента = ПолучитьНомерДокумента(ВыбраннаяСтрока.Номер, Метаданные.Документы[ИмяДок].ДлинаНомера); //если номер в приемнике, короче чем в источнике
	ДокСсылка = НайтиИсходящийДокумент(БазаИсточник, ИмяДок, ИстНомерДокумента, ВыбраннаяСтрока.Дата, ПредставлениеДокумента);
	
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Если Не ПерезаписыватьДокументы Тогда 
			СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
			Возврат;
		КонецЕсли;
		Док = ДокСсылка.ПолучитьОбъект(); 
		Док.Комплектующие.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Док = Документы[имяДок].СоздатьДокумент();
		Док.Номер = ВыбраннаяСтрока.Номер;
		Док.Дата = ВыбраннаяСтрока.Дата;
		Док.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
		Док.Комментарий = "#Загружено из ОУ " + ИстДокПредставление;
		Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Док.Организация = ЭтотОбъект.Организация;
		Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));		
	КонецЕсли;
		
	БазаИсточник_Запрос = БазаИсточник.NewObject("Запрос");
	БазаИсточник_Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧ.Ссылка,
	|	ТЧ.Ссылка.ТочкаОформления.Код КАК ТочкаОформленияКод,
	|	ТЧ.Ссылка.НомернойЭлемент КАК НомернойЭлемент,
	|	ТЧ.Ссылка.МестоХранения.Код КАК СкладКод,
	|	ТЧ.Материал.Код КАК МатериалКод,
	|	ТЧ.Материал.Наименование КАК МатериалНаименование,
	|	ТЧ.Количество КАК Количество,
	|	ТЧ.ЦенаСНДС КАК Цена
	|ИЗ
	|	Документ.НЭДоукомплектация.Материалы КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеМТ КАК ДвижениеМТ
	|		ПО ТЧ.Материал = ДвижениеМТ.Материал
	|			И ТЧ.Ссылка = ДвижениеМТ.Регистратор
	|ГДЕ
	|	ТЧ.Ссылка = &Ссылка";

	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	БазаИсточник_ДокументСсылка=БазаИсточник.Документы[ВыбраннаяСтрока.ИдВидаДокумента].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	БазаИсточник_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_ДокументСсылка);
	БазаИсточник_РезультатЗапроса = БазаИсточник_Запрос.Выполнить();
	Если БазаИсточник_РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет движений в регистре по документу "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	БИ_Выборка = БазаИсточник_РезультатЗапроса.Выбрать();
	
	//Заполнить шапку
	БИ_Выборка.Следующий();
	
	
	Автомобиль = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, БИ_Выборка.НомернойЭлемент);
	Док.Номенклатура = Автомобиль;
	Док.Количество = 1;
	
	Склад = ПолучитьСклад(БИ_Выборка.СкладКод);
	
	//12.12.2016, =>, определение подразделения не по складу а по остатку на счете
	//Подразделение = ПолучитьПодразделениеПоСкладу(БИ_Выборка.СкладКод);
	//=>
	
	//<06.02.2020_16:21, =>, Для Уфы подразделение определять по точке оформления>
	//Подразделение = ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(Автомобиль, ПланыСчетов.Хозрасчетный.Товары, ИстДокумент.Дата);
	//=>
	Если ЭтотОбъект.ЭтоУфа Тогда
		Подразделение = ПолучитьПодразделениеПоТочкеОформления(БИ_Выборка.ТочкаОформленияКод);
	Иначе
		Подразделение = ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(Автомобиль, ПланыСчетов.Хозрасчетный.Товары, ИстДокумент.Дата);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
	|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	|	ПоступлениеТоваровУслугТовары.СпособУчетаНДС КАК СпособУчетаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.ПоступлениеМатериаловКомплектации);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док)+" "+ОписаниеОшибки());
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл		
		Нов = Док.Комплектующие.Добавить();
		Нов.Номенклатура 	= Выборка.Номенклатура;
		Нов.СчетУчета		= Выборка.СчетУчета;
		Нов.СпособУчетаНДС 	= Выборка.СпособУчетаНДС;
		Нов.Количество		= Выборка.Количество/35	
	КонецЦикла;
	
	флНовыйДок = Док.ЭтоНовый();
	Попытка
		Док.Записать(РежимЗаписиДокумента.Запись);
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док)+" "+ОписаниеОшибки());
		Возврат
	КонецПопытки;
КонецПроцедуры

Процедура НЭПередачаНаХранение_В_РеализацияКомиссия(БИ, НомерСтроки) Экспорт
	//Параметры
	// БИ - База источник
	// Номер строки - номер строки табл.части перечня документов
	
	ИмяДок					= "РеализацияТоваровУслуг";
	ВыбраннаяСтрока 		= ЭтотОбъект.ТЧ[НомерСтроки-1];
	ПредставлениеДокумента 	= ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
		
	БИ_ГУИД_ДокументаИсточника 	= БИ.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент					= БИ.Документы["НЭПередачаНаХранение"].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);

	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	Если ИстДокумент.Договор.ЭтоАгентский = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	//Поиск документа
	//---------------
	ИстНомерДокумента 	= ПолучитьНомерДокумента(ВыбраннаяСтрока.Номер, Метаданные.Документы[ИмяДок].ДлинаНомера); //если номер в приемнике, короче чем в источнике	
	Тире = Сред(ИстНомерДокумента, 4,1);
	Если Тире = "-" Тогда
		ИстНомерДокумента	= СтрЗаменить(ИстНомерДокумента, "-", "*");
	Иначе
		Префикс = ПолучитьПрефиксДокумента(ИстНомерДокумента);
		
		//Замена символа после префикса на "*"
		//-------------------------------------
		ИстНомерДокумента1 = Префикс+"*"+Прав(ИстНомерДокумента,  СтрДлина(ИстНомерДокумента)-СтрДлина(Префикс)-1 );
		
		//Добавление символа "*" после префикса
		//--------------------------------------
		ИстНомерДокумента2 = Префикс+"*"+Прав(ИстНомерДокумента,  СтрДлина(ИстНомерДокумента)-СтрДлина(Префикс));
		Если СтрДлина(ИстНомерДокумента2)<=11 Тогда
			ИстНомерДокумента = ИстНомерДокумента2;
		Иначе
			ИстНомерДокумента = ИстНомерДокумента1;
		КонецЕсли;
	КонецЕсли;                           
	ДокСсылка 	= НайтиИсходящийДокумент(БИ, ИмяДок, ИстНомерДокумента, ВыбраннаяСтрока.Дата, ПредставлениеДокумента);
	
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Если Не ПерезаписыватьДокументы Тогда 
			СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
			Возврат;
		КонецЕсли;

		Док = ДокСсылка.ПолучитьОбъект(); 
		Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);  // чтобы корректно отработали запросы
		Док.Товары.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Док = Документы[имяДок].СоздатьДокумент();
		
		Док.Номер			= ИстНомерДокумента;
		Док.ВидОперации 	= Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		Док.Организация 	= ЭтотОбъект.Организация;

		Док.Комментарий	= "#Загружено из ОУ " + ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой; //<Ключ для поиска № 2>
		Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));		
	КонецЕсли;
	
	//Если документ найден, то при повторной загрузке изменим дату, если изменилась в источнике
	//Для нового документа также пишем датой источника
	//------------------------------------------------
	
	//+16.02.2022, Т.к. возвраты c комиссии проводятся +1й секундой, тогда повторный прием делаем +2й секундой 
	
	//Док.Дата 	= ВыбраннаяСтрока.Дата; =>   
	Док.Дата	=ВыбраннаяСтрока.Дата + 2;

	//Учет НДС
	//--------
	Док.СуммаВключаетНДС = Истина;
	
	//Склад
	//-----
	БИ_Запрос = БИ.NewObject("Запрос");
	БИ_Запрос.Текст =
	//Берем одну расходную запись т.к. склад в получателе в шапке
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТЧ.Ссылка КАК Ссылка,
	|	ТЧ.Ссылка.Номер КАК Номер,
	|	ТЧ.Ссылка.Дата КАК Дата,
	|	ТЧ.Ссылка.Хранитель КАК Контрагент,
	|	ТЧ.Ссылка.Хранитель.Наименование КАК КонтрагентНаименование,
	|	ТЧ.Ссылка.ТочкаОформления.Код КАК ТочкаОформленияКод,
	|	ТЧ.НомернойЭлемент КАК НомернойЭлемент,
	|	ДвижениеНЭ.МестоХранения КАК МестоХранения,
	|	ДвижениеНЭ.МестоХранения.Код КАК СкладКод
	|ИЗ
	|	Документ.НЭПередачаНаХранение.НомерныеЭлементы КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
	|		ПО (ТЧ.НомернойЭлемент = ДвижениеНЭ.НомернойЭлемент)
	|			И (ТЧ.Ссылка = ДвижениеНЭ.Регистратор)
	|			И (ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|ГДЕ
	|	ТЧ.Ссылка = &Ссылка";
	БИ_ГУИД_ДокументаИсточника 		= БИ.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	БИ_ДокументСсылка				= БИ.Документы[ВыбраннаяСтрока.ИдВидаДокумента].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);
	БИ_Запрос.УстановитьПараметр("Ссылка", БИ_ДокументСсылка);
	
	БИ_РезультатЗапроса 			= БИ_Запрос.Выполнить();
	Если БИ_РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет движений в регистре по документу "+ПредставлениеДокумента);
	КонецЕсли;
	БИ_Выборка = БИ_РезультатЗапроса.Выбрать();
	БИ_Выборка.Следующий();
	Док.Склад = ПолучитьСклад(БИ_Выборка.СкладКод);
	
	//Подразделение
	//-------------
	Если УчетВРазрезеПодразделений Тогда
		Если ЭтоУфа Тогда
			Док.ПодразделениеОрганизации 	= ПолучитьПодразделениеПоТочкеОформления(БИ_Выборка.ТочкаОформленияКод);	
		Иначе
			АвтомобильКакНоменклатура 		= ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БИ, БИ_Выборка.НомернойЭлемент);
			Док.ПодразделениеОрганизации  	= ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(АвтомобильКакНоменклатура, ПланыСчетов.Хозрасчетный.Товары, Док.Дата+1);
		КонецЕсли;
	КонецЕсли;
	
	//Контрагент
	//----------
	АтрибутыКонтрагента		= ПолучитьАтрибутыКонтрагента(БИ, ИстДокумент.Хранитель);
	Док.Контрагент 	= ПолучитьКонтрагента(АтрибутыКонтрагента);
	
	//Договор
	//-------
	Док.ДоговорКонтрагента = ПолучитьДоговор(Док.Контрагент, ИстДокумент.Договор.Номер, Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, Док.ПодразделениеОрганизации);	
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док,мСписокВидовДоговоров);
	ЗаполнениеДокументов.Заполнить(Док);
	
	//Табл. часть Товары
	//------------------
	Док.Товары.Очистить();
	Для Каждого ТекСтрока Из ИстДокумент.НомерныеЭлементы Цикл
		нСтрока = Док.Товары.Добавить();
		нСтрока.Номенклатура 		= ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БИ, ТекСтрока.НомернойЭлемент);
		нСтрока.ЕдиницаИзмерения 	= нСтрока.Номенклатура.ЕдиницаИзмерения;
		нСтрока.Количество			= 1;
		
		//Цена. Переопределим если уже есть отчет Агента
		//--------------------------------------------------------
		нСтрока.Цена 				= ТекСтрока.ОценкаСтоимости;				

		БИ_Запрос = БИ.NewObject("Запрос");
		БИ_Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НЭОтчетАгента.ЦенаБазовая КАК ЦенаБазовая
		|ИЗ
		|	Документ.НЭОтчетАгента КАК НЭОтчетАгента
		|ГДЕ
		|	НЭОтчетАгента.НомернойЭлемент = &НомернойЭлемент
		|УПОРЯДОЧИТЬ ПО НЭОтчетАгента.Дата УБЫВ";
		БИ_Запрос.УстановитьПараметр("НомернойЭлемент", ТекСтрока.НомернойЭлемент);
		БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
		Если БИ_РезультатЗапроса.Пустой()=Ложь Тогда
			БИ_Выборка =БИ_РезультатЗапроса.Выбрать();
			БИ_Выборка.Следующий();
			нСтрока.Цена = БИ_Выборка.ЦенаБазовая;
		КонецЕсли;
		
		нСтрока.Сумма 	  = нСтрока.Количество * нСтрока.Цена;
		нСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		нСтрока.СуммаНДС  = Окр(нСтрока.Цена*20/120,2); // ндс в сумме

	КонецЦикла; 
	
	//Заполнение счетов учета в табличной части
	//------------------------------------------
	Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Товары");
	Для Каждого СтрокаТЧ Из Док.Товары Цикл
		нСтрока.счетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		нСтрока.ПереданныеСчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;	
	КонецЦикла;
			
	флНовыйДок = Док.ЭтоНовый();
	Попытка
		Док.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док));
		Возврат
	КонецПопытки;
	
	ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БИ, ИстДокумент);
	
КонецПроцедуры

Процедура НЭСнятиеИзХранения_В_ВозвратТоваровОтПокупателя(БИ, НомерСтроки) Экспорт
	//Параметры
	// БИ - База источник
	// Номер строки - номер строки табл.части перечня документов
	
	ИмяДок					= "ВозвратТоваровОтПокупателя";
	ВыбраннаяСтрока 		= ЭтотОбъект.ТЧ[НомерСтроки-1];
	ПредставлениеДокумента 	= ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
	
	БИ_ГУИД_ДокументаИсточника 	= БИ.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент					= БИ.Документы["НЭСнятиеИзХранения"].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);
	
	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
	
	Если ИстДокумент.Договор.ЭтоАгентский = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	//Поиск документа
	//---------------
	ИстНомерДокумента 	= ПолучитьНомерДокумента(ВыбраннаяСтрока.Номер, Метаданные.Документы[ИмяДок].ДлинаНомера); //если номер в приемнике, короче чем в источнике	
	Тире = Сред(ИстНомерДокумента, 4,1);
	Если Тире = "-" Тогда
		ИстНомерДокумента	= СтрЗаменить(ИстНомерДокумента, "-", "*");
	Иначе
		Префикс = Лев(ИстНомерДокумента,3);
		ИстНомерДокумента = Префикс+"*"+Прав(ИстНомерДокумента, СтрДлина(ИстНомерДокумента)-3);
	КонецЕсли;
	
	//Дату увеличим на одну секунду
	//-----------------------------
	ДокСсылка 	= НайтиИсходящийДокумент(БИ, ИмяДок, ИстНомерДокумента, ВыбраннаяСтрока.Дата+1, ПредставлениеДокумента);
	
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Если Не ПерезаписыватьДокументы Тогда 
			СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
			Возврат;
		КонецЕсли;
		
		Док = ДокСсылка.ПолучитьОбъект(); 
		Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);  // чтобы корректно отработали запросы
		Док.Товары.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Док = Документы[имяДок].СоздатьДокумент();
		Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));		
	КонецЕсли;
	
	Док.Номер			 = ИстНомерДокумента;
	Док.ВидОперации 	 = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары;
	Док.Организация 	 = ЭтотОбъект.Организация;
	Док.Комментарий		 = "#Загружено из ОУ " + ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой; //<Ключ для поиска № 2>
	Док.Ответственный 	 = ПараметрыСеанса.ТекущийПользователь;
	Док.СуммаВключаетНДС = Истина;
	
	//Если документ найден, то при повторной загрузке изменим дату, если изменилась в источнике
	//Для нового документа также пишем датой источника.
	//Дату увеличим на одну секунду
	//------------------------------------------------
	Док.Дата 			= ВыбраннаяСтрока.Дата+1;
	
	//Заполнение по документу-основанию
	//----------------------------------
	Номенклатура = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БИ, ИстДокумент.НомернойЭлемент);
	Док.Товары.Очистить();
	
	
	//Определи, кому передано на комиссию
	//-------------------------------------
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные), , Субконто2 = &Номенклатура) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт > 0";
	Запрос.УстановитьПараметр("Период",			ИстДокумент.Дата);
	Запрос.УстановитьПараметр("Номенклатура",	Номенклатура);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Контрагент = РезультатЗапроса.Выгрузить()[0][0];
	КонецЕсли;
	
	//Если не удалось определить, кому передано на комиссию, то просто первую реализацию с этой номенклатурой
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслугТовары.Ссылка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура
	|	И РеализацияТоваровУслугТовары.Ссылка.Дата <= &Дата
	|	И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|	И РеализацияТоваровУслугТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)
	|	И ВЫБОР
	|			КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	Запрос.УстановитьПараметр("Дата", 			ИстДокумент.Дата);
	Запрос.УстановитьПараметр("Контрагент",		Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() = Ложь Тогда
		Док.Сделка = РезультатЗапроса.Выгрузить()[0][0];
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(Док, Док.Сделка);
		ТоварыПоДаннымОснования = Документы.ВозвратТоваровОтПокупателя.ТоварыПоДаннымОснования(Док, Док.Сделка);
		Если ТоварыПоДаннымОснования.Количество() > 0 Тогда
			Док.Товары.Загрузить(ТоварыПоДаннымОснования);
		КонецЕсли;
	КонецЕсли;
	
	Если Док.Товары.Количество()=0 Тогда
		// Не удалось заполнить по документу-основанию, заполняем сами
		//-------------------------------------------------------------
		
		//Склад
		//-----
		БИ_Запрос = БИ.NewObject("Запрос");
		БИ_Запрос.Текст =
		//Берем одну расходную запись т.к. склад в получателе в шапке
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТЧ.Ссылка КАК Ссылка,
		|	ТЧ.Ссылка.Номер КАК Номер,
		|	ТЧ.Ссылка.Дата КАК Дата,
		//|	ТЧ.Ссылка.Хранитель КАК Контрагент,
		//|	ТЧ.Ссылка.Хранитель.Наименование КАК КонтрагентНаименование,
		|	ТЧ.НомернойЭлемент КАК НомернойЭлемент,
		|	ДвижениеНЭ.МестоХранения КАК МестоХранения,
		|	ДвижениеНЭ.МестоХранения.Код КАК СкладКод
		|ИЗ
		|	Документ.НЭСнятиеИзХранения КАК ТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
		|		ПО (ТЧ.НомернойЭлемент = ДвижениеНЭ.НомернойЭлемент)
		|			И (ТЧ.Ссылка = ДвижениеНЭ.Регистратор)
		|			И (ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
		|ГДЕ
		|	ТЧ.Ссылка = &Ссылка";
		БИ_ГУИД_ДокументаИсточника 		= БИ.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
		БИ_ДокументСсылка				= БИ.Документы[ВыбраннаяСтрока.ИдВидаДокумента].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);
		БИ_Запрос.УстановитьПараметр("Ссылка", БИ_ДокументСсылка);
		
		БИ_РезультатЗапроса 			= БИ_Запрос.Выполнить();
		Если БИ_РезультатЗапроса.Пустой() Тогда
			Сообщить("Нет движений в регистре по документу "+ПредставлениеДокумента);
		КонецЕсли;
		БИ_Выборка = БИ_РезультатЗапроса.Выбрать();
		БИ_Выборка.Следующий();
		Док.Склад = ПолучитьСклад(БИ_Выборка.СкладКод);
		
		//Подразделение
		//-------------
		Если ЭтотОбъект.УчетВРазрезеПодразделений Тогда
			АвтомобильКакНоменклатура 		= ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БИ, БИ_Выборка.НомернойЭлемент);
			Док.ПодразделениеОрганизации  	= ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(АвтомобильКакНоменклатура, ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные, Док.Дата);
		КонецЕсли;
		
		//Контрагент
		//----------
		АтрибутыКонтрагента		= ПолучитьАтрибутыКонтрагента(БИ, ИстДокумент.Холдер);
		Док.Контрагент 			= ПолучитьКонтрагента(АтрибутыКонтрагента);
		
		//Договор
		//-------
		Док.ДоговорКонтрагента = ПолучитьДоговор(Док.Контрагент, ИстДокумент.Договор.Номер, Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, Док.ПодразделениеОрганизации);	
		мСписокВидовДоговоров = Новый СписокЗначений;
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док,мСписокВидовДоговоров);
		ЗаполнениеДокументов.Заполнить(Док);
		
		
		//Документ-отгрузки и заполнение табличной части товары по документу-основанию
		//-----------------
		
		//Табл. часть Товары
		//------------------
		нСтрока = Док.Товары.Добавить();
		нСтрока.Номенклатура 		= Номенклатура;
		нСтрока.Количество			= 1;
		нСтрока.СтавкаНДС 			= Перечисления.СтавкиНДС.НДС20;
		нСтрока.СуммаНДС  			= Окр(нСтрока.Цена*20/120,2); // ндс в сумме

		//Заполнение счетов учета в табличной части
		//------------------------------------------
		Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Товары");
		Для Каждого СтрокаТЧ Из Док.Товары Цикл
			Если Не ЗначениеЗаполнено(нСтрока.СчетУчета) Тогда
				нСтрока.счетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(нСтрока.ПереданныеСчетУчета) Тогда
				нСтрока.ПереданныеСчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	флНовыйДок = Док.ЭтоНовый();
	Попытка
		Док.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док)+":"+ОписаниеОшибки());
		Возврат
	КонецПопытки;
	
	ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БИ, ИстДокумент);
	
	
КонецПроцедуры

Процедура НЭОтчетАгента_В_ОтчетКомиссионераОПродажах(БИ, НомерСтроки) Экспорт
//Параметры
	// БИ - База источник
	// Номер строки - номер строки табл.части перечня документов
	
	ИмяДок= "ОтчетКомиссионераОПродажах";
	ВыбраннаяСтрока = ЭтотОбъект.ТЧ[НомерСтроки-1];
	ПредставлениеДокумента = ""+ВыбраннаяСтрока.ИдВидаДокумента +" № "+ВыбраннаяСтрока.Номер+" от "+Формат(ВыбраннаяСтрока.Дата, "ДЛФ=Д");
		
	БИ_ГУИД_ДокументаИсточника 	= БИ.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	ИстДокумент					= БИ.Документы["НЭОтчетАгента"].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);

	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ "+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;
		
	//Поиск документа
	//----------------
	ИстНомерДокумента 	= ПолучитьНомерДокумента(ВыбраннаяСтрока.Номер, Метаданные.Документы[ИмяДок].ДлинаНомера); //если номер в приемнике, короче чем в источнике	
	ИстНомерДокумента	= СтрЗаменить(ИстНомерДокумента, "-", "*");
	
	//Документ запишем временем 23:59:58
	//-----------------------------------
	ЗаписатьДокументДатой = ВыбраннаяСтрока.Дата+23*60*60+59*60+58;
	
	ДокСсылка = НайтиИсходящийДокумент(БИ, ИмяДок, ИстНомерДокумента, ЗаписатьДокументДатой, ПредставлениеДокумента);
	
	Если ЗначениеЗаполнено(ДокСсылка) Тогда
		Если Не ПерезаписыватьДокументы Тогда 
			СписокОшибок.Добавить(""+ДокСсылка+" не обновляем!");
			Возврат;
		КонецЕсли;
		Док = ДокСсылка.ПолучитьОбъект(); 
		Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Док.Товары.Очистить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Док = Документы[имяДок].СоздатьДокумент();
		
		Док.Номер			= ВыбраннаяСтрока.Номер; //<Номер и дата - ключ поиска №1>
		Док.Организация 	= ЭтотОбъект.Организация;

		Док.Комментарий	= "#Загружено из ОУ " + ПредставлениеДокумента+" @"+ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой; //<Ключ для поиска № 2>
		Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Док.УстановитьСсылкуНового(Документы[имяДок].ПолучитьСсылку(Новый УникальныйИдентификатор()));		
	КонецЕсли;
	
	//Для нового документа пишем датой в источнике. При перезагрузке уже существующего документа 
	//также меняем документы дату документа на дату документа-источника
	//------------------------------------------------------------------
	Док.Дата 			= ЗаписатьДокументДатой;
	
	Док.СпособЗачетаАвансов							= Перечисления.СпособыЗачетаАвансов.Автоматически;
	Док.СпособРасчетаКомиссионногоВознаграждения	= Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления;
	Док.УдержатьВознаграждение 						= Истина;
	Док.ПроцентКомиссионногоВознаграждения 			= 100;
	Док.СуммаВключаетНДС 							= Истина;
	Док.НДСВключенВСтоимость						= Ложь;
	Док.СчетУчетаНДС 								= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам");
	Док.ДокументБезНДС 								= Ложь;
	Док.НомерВходящегоДокумента 					= ВыбраннаяСтрока.Номер;
	Док.ДатаВходящегоДокумента  					= ВыбраннаяСтрока.Дата;

	//Контрагент
	//----------
	АтрибутыКонтрагента 							= ПолучитьАтрибутыКонтрагента(БИ, ИстДокумент.Холдер);
	Док.Контрагент 									= ПолучитьКонтрагента(АтрибутыКонтрагента);
	
	//Ставка НДС зависит от системы налогообложения контрагента
	//----------------------------------------------------------
	СистемаНалогообложения = СокрЛП(АтрибутыКонтрагента.Получить("СистемаНалогообложения"));
	Если СистемаНалогообложения = "ОСН" Тогда
		Док.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.НДС20;
		Док.СпособУчетаНДС			= Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	Иначе
		Док.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	//Подразделение. Сначала получим атрибуты автомобиля
	//-----------------------------------------------------
	БИ_Запрос = БИ.NewObject("Запрос");
	БИ_Запрос.Текст =	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвижениеНЭ.НомернойЭлемент КАК НомернойЭлемент
	|ИЗ
	|	Документ.НЭОтчетАгента КАК НЭОтчетАгента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
	|		ПО (НЭОтчетАгента.ДокРасход = ДвижениеНЭ.Регистратор)
	|ГДЕ
	|	НЭОтчетАгента.Ссылка = &Ссылка";
		
	БИ_ГУИД_ДокументаИсточника 		= БИ.NewObject("УникальныйИдентификатор", ВыбраннаяСтрока.ГУИДДокументаИсточникаСтрокой);
	БИ_ДокументСсылка				= БИ.Документы[ВыбраннаяСтрока.ИдВидаДокумента].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);
	БИ_Запрос.УстановитьПараметр("Ссылка", БИ_ДокументСсылка);
	
	БИ_РезультатЗапроса 			= БИ_Запрос.Выполнить();
	Если БИ_РезультатЗапроса.Пустой() Тогда
		Сообщить("Нет движений в регистре по документу "+ПредставлениеДокумента);
	КонецЕсли;
	БИ_Выборка = БИ_РезультатЗапроса.Выбрать();
	БИ_Выборка.Следующий();

	Если ЭтотОбъект.УчетВРазрезеПодразделений Тогда
		АвтомобильКакНоменклатура 	  = ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БИ, БИ_Выборка.НомернойЭлемент);
		//Теперь получим подразделение
		//-----------------------------
		Док.ПодразделениеОрганизации  = ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(АвтомобильКакНоменклатура, ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные, ЗаписатьДокументДатой);
	КонецЕсли;
	
	
	//Договор
	//-------
	Док.ДоговорКонтрагента = ПолучитьДоговор(Док.Контрагент, ИстДокумент.Договор.Номер, Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, Док.ПодразделениеОрганизации);	
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док,мСписокВидовДоговоров);
	ЗаполнениеДокументов.Заполнить(Док);
			
	//Счет учтета затрат на комиссионное вознаграждение и субконто
	//-------------------------------------------------------------
	Док.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ИздержкиОбращения");
	Если ЭтотОбъект.УчетВРазрезеПодразделений Тогда	
		Док.ПодразделениеЗатрат = Док.ПодразделениеОрганизации;
	КонецЕсли;
	Док.Субконто1 = Справочники.СтатьиЗатрат.НайтиПоНаименованию("Услуги комиссионеров");
	
	//Счета учета взаиморасчетов
	//---------------------------
	//Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(Неопределено, Истина, Док);
	Док.СчетУчетаРасчетовСКонтрагентом 			= ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Док.СчетУчетаРасчетовПоАвансамПолученным 	= ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Док.СчетУчетаРасчетовПоАвансамВыданным 		= ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Док.СчетУчетаРасчетовЗаПосредническиеУслуги = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;

	Док.ЗачетАвансов.Очистить();
	
	

	//Табл. часть Товары
	//------------------
	Док.Товары.Очистить();
	нСтрока = Док.Товары.Добавить();
	нСтрока.Номенклатура 			= ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БИ, ИстДокумент.НомернойЭлемент);	
	нСтрока.ЕдиницаИзмерения 		= нСтрока.Номенклатура.ЕдиницаИзмерения;
	нСтрока.Количество				= 1;
	нСтрока.ЦенаПередачи			= ИстДокумент.ЦенаБазовая;				
	нСтрока.СуммаПередачи			= ИстДокумент.ЦенаБазовая;

	//По умолчанию полагаем, что авто закупаются у физиков, поэтому НДС возникает с межценовой разницы
	//==================================================================================================
	МежценоваяРазница				= 0;
	ЦенаПродажи						= ИстДокумент.ЦенаПродажи;
	СебестоимостьАвто				= ПолучитьСтоимостьАвтомобиляНаСчете(нСтрока.Номенклатура, ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные, Док.Дата);	
	МежценоваяРазница				= ЦенаПродажи - СебестоимостьАвто;
	
	//нСтрока.Цена					= МежценоваяРазница;
	//нСтрока.Сумма					= МежценоваяРазница;
	
	нСтрока.Цена					= ИстДокумент.ЦенаПродажи;
	нСтрока.Сумма					= ИстДокумент.ЦенаПродажи;
	
	//Значение по умолчанию
	нСтрока.СтавкаНДС 				= Перечисления.СтавкиНДС.НДС20_120;	
	нСтрока.СуммаНДС 				= (МежценоваяРазница) /120*20; 

	//Если тип контрагента в поступлении авто - юрлицо, тогда замени ставку НДС на 20 и ндс считаем от цены продажи, 
	//а не с межценовой разницы
	БИ_Запрос = БИ.NewObject("Запрос");
	БИ_Запрос.Текст =	
	"ВЫБРАТЬ
	|	ДвижениеНЭ.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ДвижениеНЭ.Регистратор.Поставщик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Юл)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипКонтрагента,
	|	МАКСИМУМ(ДвижениеНЭ.Регистратор.Дата) КАК РегистраторДата
	|ИЗ
	|	РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
	|ГДЕ
	|	ДвижениеНЭ.Регистратор ССЫЛКА Документ.НЭЗакупка
	|	И ДвижениеНЭ.НомернойЭлемент = &НомернойЭлемент
	|	И ДвижениеНЭ.Холдер = &Холдер
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвижениеНЭ.Регистратор,
	|	ДвижениеНЭ.Регистратор.Поставщик,
	|	ВЫБОР
	|		КОГДА ДвижениеНЭ.Регистратор.Поставщик.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ТипКонтрагента.Юл)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	БИ_Запрос.УстановитьПараметр("НомернойЭлемент", ИстДокумент.НомернойЭлемент);
	БИ_Запрос.УстановитьПараметр("Холдер", 			ИстДокумент.Контрагент);
	БИ_РезультатЗапроса 			= БИ_Запрос.Выполнить();
	Если Не БИ_РезультатЗапроса.Пустой() Тогда
		БИ_Выборка = БИ_РезультатЗапроса.Выбрать();
		БИ_Выборка.Следующий();
		Если БИ_Выборка.ТипКонтрагента = 1 Тогда
			нСтрока.СтавкаНДС 	= Перечисления.СтавкиНДС.НДС20;
			нСтрока.СуммаНДС 	= ЦенаПродажи /120*20;
		КонецЕсли;
	КонецЕсли;
	
	//Сумма вознаграждения
	//---------------------
	СуммаВознаграждения = 0;	
	РазностьЦен						= ИстДокумент.ЦенаПродажи-ИстДокумент.ЦенаБазовая;	
	СуммаВознаграждения				= СуммаВознаграждения + ?(РазностьЦен > 0, РазностьЦен, 0);
	нСтрока.СуммаВознаграждения 	= ?(РазностьЦен > 0, РазностьЦен, 0);
	
	нСтрока.СуммаНДСВознаграждения 	= 0;
	Если Док.СуммаВключаетНДС Тогда
		нСтрока.СуммаНДСВознаграждения = УчетНДСКлиентСервер.РассчитатьСуммуНДС(нСтрока.СуммаВознаграждения, Док.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Док.СтавкаНДСВознаграждения, Док.СтавкаНДСВознаграждения));
	КонецЕсли;

	//Заполнение счетов учета в табличной части
	//------------------------------------------
	Документы[ИмяДок].ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Товары");
	Для Каждого СтрокаТЧ Из Док.Товары Цикл
		Если Не ЗначениеЗаполнено(нСтрока.СчетУчета) Тогда
			нСтрока.счетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(нСтрока.СчетДоходов) Тогда
			нСтрока.СчетДоходов = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД");	
			нСтрока.Субконто = ЭтотОбъект.НомГруппаПродажаЧерезКомиссию;	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(нСтрока.СчетРасходов) Тогда
			нСтрока.СчетРасходов = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(нСтрока.СчетУчетаНДСПоРеализации) Тогда
			нСтрока.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;	
		КонецЕсли;
	КонецЦикла;
	
	//Табл.часть Покупатели
	//-----------------------
	Док.Покупатели.Очистить();
	Новая = Док.Покупатели.Добавить();
	АтрибутыКонтрагента	= ПолучитьАтрибутыКонтрагента(БИ, ИстДокумент.ДокРасход.Покупатель);
	Новая.Покупатель   	= ПолучитьКонтрагента(АтрибутыКонтрагента);
	Новая.ВыставленСФ	= Истина;
	СФ = Документы.СчетФактураВыданный.СоздатьДокумент();
	Попытка
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект, Док.Ссылка);
	Исключение
	КонецПопытки;
	СФ.Номер = ИстДокумент.ДокРасход.Номер;
	

	Новая.СчетФактура 	= СФ.Ссылка;
	Новая.ДатаСФ 		= Док.Дата;
	
	//Грузоотправитель
	//-----------------
	Док.Грузоотправитель = Док.Контрагент;
	
	//Грузополучатель
	//----------------
	Док.Грузополучатель = Новая.Покупатель; 
		
	флНовыйДок = Док.ЭтоНовый();
	Попытка
		Док.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док)+":"+ОписаниеОшибки());
		Возврат
	КонецПопытки;
	
	СфОб 		= Док.Покупатели[0].СчетФактура.ПолучитьОбъект();
	СфОб.Номер 	= ИстДокумент.ДокРасход.Номер;
	Попытка
		СфОб.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БИ, ИстДокумент);	
КонецПроцедуры

Функция ПолучиМатериал(НаименованиеМатериала)
	ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", "%"+НаименованиеМатериала+"%");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0][0];
	КонецЕсли
	
КонецФункции

//<ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента>
Функция ПолучитьАвтомобильНоменклатуройИзНомероногоЭлемента(БазаИсточник, ИстНомернойЭлемент)
	//Вход:
	//	БазаИсточник - comсоединение
	//	ИстНомернойЭлемент - ссылка в базе источнике на номерной элемент
	//Исход:
	//	СправочникНоменклатураСсылка на найденный или созданный элемент

	НомернойЭлемент = Новый Структура();
	
	НомернойЭлемент.Вставить("НомерВИН", 		ИстНомернойЭлемент.НомерВин);
	НомернойЭлемент.Вставить("НомерКузова", 	ИстНомернойЭлемент.НомерКузова);
	НомернойЭлемент.Вставить("НомерДвигателя", 	ИстНомернойЭлемент.НомерДвигателя);
	НомернойЭлемент.Вставить("НомерШасси", 		ИстНомернойЭлемент.НомерШасси);
	НомернойЭлемент.Вставить("НомерАгрегата", 	ИстНомернойЭлемент.НомерАгрегата);
	НомернойЭлемент.Вставить("Код", 			ИстНомернойЭлемент.Код);
	
	Артикул=ВыгрузитьНомернойЭлемент(НомернойЭлемент);
	
	БИ_ГУИД_НЭ_строкой = БазаИсточник.XMLСтрока(ИстНомернойЭлемент.Ссылка);
	
	нАвтомобиль = ПолучитьАвтомобиль(Артикул, ИстНомернойЭлемент.Наименование, БИ_ГУИД_НЭ_строкой, ИстНомернойЭлемент.ТипЭлемента.Наименование);

	Возврат нАвтомобиль;
КонецФункции

Функция ПолучитьАтрибутыКонтрагента(БазаИсточник, Контрагент)
	//Не для нэзакупка, нэгаззакупка, нэреализация
	//БазаИсточик - comсоединение с базой-источником
	//Контрагент - ссылка на контрагента в базе-источнике

	Контрагент_ТипКонтрагента_Как_ХМЛСтрока = БазаИсточник.XMLСтрока(Контрагент.ТипКонтрагента);

	АтрибутыКонтрагента = Новый Соответствие();
	АтрибутыКонтрагента.Вставить("Наименование",		СокрЛП(Контрагент.Наименование));
	АтрибутыКонтрагента.Вставить("НаименованиеСтраны",	СокрЛП(Контрагент.Страна.Наименование));
	
	Если Контрагент_ТипКонтрагента_Как_ХМЛСтрока = БазаИсточник.XMLСтрока(БазаИсточник.Перечисления.ТипКонтрагента.Фл) Тогда
		
			АтрибутыКонтрагента.Вставить("ФизЛицо",			"1");
			АтрибутыКонтрагента.Вставить("СерияДокумента",	ВРег(СокрЛП(Контрагент.СерияДокумента)));
			АтрибутыКонтрагента.Вставить("НомерДокумента",	ВРег(СокрЛП(Контрагент.НомерДокумента)));
			АтрибутыКонтрагента.Вставить("ДатаДокумента",	СокрЛП(Строка(Контрагент.ДатаДокумента)));
			АтрибутыКонтрагента.Вставить("ЭмитентДокумента",СокрЛП(Контрагент.ЭмитентДокумента));
			
	ИначеЕсли Контрагент_ТипКонтрагента_Как_ХМЛСтрока = БазаИсточник.XMLСтрока(БазаИсточник.Перечисления.ТипКонтрагента.Ип) Тогда
			
			АтрибутыКонтрагента.Вставить("ФизЛицо",	"2");
			АтрибутыКонтрагента.Вставить("ИНН",		ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",		"");
			
	ИначеЕсли Контрагент_ТипКонтрагента_Как_ХМЛСтрока = БазаИсточник.XMLСтрока(БазаИсточник.Перечисления.ТипКонтрагента.Юл) Тогда
			
			АтрибутыКонтрагента.Вставить("ФизЛицо",	"0");
			АтрибутыКонтрагента.Вставить("ИНН",		ВРег(СокрЛП(Контрагент.ИНН)));
			АтрибутыКонтрагента.Вставить("КПП",		ВРег(СокрЛП(Контрагент.КПП)));
			
	КонецЕсли;
	
	Контрагент_СистемаНалогообложения = БазаИсточник.XMLСтрока(Контрагент.СистемаНалогообложения);
	АтрибутыКонтрагента.Вставить("СистемаНалогообложения",	ВРег(СокрЛП(Контрагент_СистемаНалогообложения)));

	Возврат АтрибутыКонтрагента;
	
КонецФункции

Функция ПолучитьКонтрагента(АтрибутыКонтрагента)
		
	нКонтрагент = Неопределено;
	
	ФизЛицо = СокрЛП(АтрибутыКонтрагента.Получить("ФизЛицо"));
	Наименование = СокрЛП(АтрибутыКонтрагента.Получить("Наименование"));
	
	
	Если ФизЛицо = "1" Тогда
		СерияДокумента = СокрЛП(АтрибутыКонтрагента.Получить("СерияДокумента"));
		НомерДокумента = СокрЛП(АтрибутыКонтрагента.Получить("НомерДокумента"));
		
		Доступно = СтрДлина(СерияДокумента)>0;
		Доступно = Доступно И СтрДлина(НомерДокумента)>0;
		
		Если Доступно Тогда
			строкаДокумента = СерияДокумента+" № "+НомерДокумента+" выдан "+Формат(Дата(АтрибутыКонтрагента.Получить("ДатаДокумента")), "ДЛФ=Д")+" "+СокрЛП(АтрибутыКонтрагента.Получить("ЭмитентДокумента"));
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ДокументУдостоверяющийЛичность ПОДОБНО &ДокументУдостоверяющийЛичность
			|	И НЕ Контрагенты.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ДокументУдостоверяющийЛичность", "%"+СерияДокумента+"%"+НомерДокумента+"%");
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				нКонтрагент = Выборка.Ссылка;
			КонецЦикла;
		КонецЕсли;

	Иначе 
		ИНН = СокрЛП(АтрибутыКонтрагента.Получить("ИНН"));
		КПП = СокрЛП(АтрибутыКонтрагента.Получить("КПП"));  
		
		//В ОУ в документах ГАЗНЭЗакупка неверно указан контрагент: ООО ГК СТТ (ИНН 5262369563), а должен быть АО ГК СТТ (ИНН 5256197404). КПП совпадают. Подменим на правильного здесь
		//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Если ЭтоУфа И ИНН = "5262369563" Тогда
			ИНН = "5256197404";
		КонецЕсли;
		
		Если СтрДлина(ИНН)>1 И СтрДлина(КПП)>1 Тогда	
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Контрагенты ГДЕ ИНН = &ИНН И КПП = &КПП И НЕ ПометкаУдаления");
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				нКонтрагент = Выборка.Ссылка;
			КонецЦикла;
		КонецЕсли;

		Если нКонтрагент=Неопределено И СтрДлина(ИНН)>1 Тогда	
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Контрагенты ГДЕ ИНН = &ИНН И НЕ ПометкаУдаления");
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				нКонтрагент = Выборка.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Если не нашли то поищем по наименованию
	//----------------------------------------
	Если нКонтрагент=Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Контрагенты ГДЕ НЕ ПометкаУдаления И Наименование = &Наименование");
		Запрос.УстановитьПараметр("Наименование", Наименование);
		Выборка = Запрос.Выполнить().Выбрать();	
		Если Выборка.Количество()=1 Тогда
			Пока Выборка.Следующий() Цикл  // найден единственный вариант
				нКонтрагент = Выборка.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	Если нКонтрагент=Неопределено Тогда
		Если Не СоздаватьКонтрагентов Тогда
			СписокОшибок.Добавить("Справочник Контрагенты (загрузка без создания новых): Не найден элемент '"+Наименование+"', "+?(ФизЛицо = "1","документ "+строкаДокумента,"ИНН "+СокрЛП(АтрибутыКонтрагента.Получить("ИНН"))));
		Иначе
			// не нашли и будем создавать
			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			
			КонтрагентОбъект.Наименование = Наименование;
			КонтрагентОбъект.НаименованиеПолное = Наименование;
			
			Если ФизЛицо = "1" Тогда
				КонтрагентОбъект.ДокументУдостоверяющийЛичность = строкаДокумента;
				КонтрагентОбъект.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				КонтрагентОбъект.ИНН = СокрЛП(АтрибутыКонтрагента.Получить("ИНН"));
				КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.НайтиПоНаименованию(СокрЛП(АтрибутыКонтрагента.Получить("НаименованиеСтраны")));
			ИначеЕсли ФизЛицо = "2" Тогда
				КонтрагентОбъект.ИНН = СокрЛП(АтрибутыКонтрагента.Получить("ИНН"));
				КонтрагентОбъект.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.НайтиПоНаименованию(СокрЛП(АтрибутыКонтрагента.Получить("НаименованиеСтраны")));
			Иначе
				КонтрагентОбъект.ИНН = СокрЛП(АтрибутыКонтрагента.Получить("ИНН"));
				КонтрагентОбъект.КПП = СокрЛП(АтрибутыКонтрагента.Получить("КПП"));								
				КонтрагентОбъект.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
				КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.НайтиПоНаименованию(СокрЛП(АтрибутыКонтрагента.Получить("НаименованиеСтраны")));
			КонецЕсли;
			
			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			
			КонтрагентОбъект.УстановитьНовыйКод();
			
			Попытка
				КонтрагентОбъект.Записать();
				нКонтрагент = КонтрагентОбъект.Ссылка;
				СписокВыполнено.Добавить(КонтрагентОбъект.Ссылка, "Справочник Контрагенты: добавлен элемент "+СокрЛП(КонтрагентОбъект.Ссылка));
			Исключение
				СписокОшибок.Добавить("Справочник Контрагенты: "+ОписаниеОшибки());
				нКонтрагент = Неопределено;
			КонецПопытки;				
		КонецЕсли;		
	КонецЕсли;	
	
	Возврат нКонтрагент;
КонецФункции

Функция ПолучитьДоговор(Контрагент, НомерДоговора, ВидДоговора, Подразделение = "", ТипКонтрагента = 3, ИскатьОсновнойДоговор = Истина)   //Кош: для ГАЗа номер договора не передаем и 
	//ИскатьОсновнойДоговор - искать договор, в названии которого стоит слово "Основной"
		
	НайденныйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Контрагент)=Ложь Тогда
		Возврат НайденныйДоговор;
	КонецЕсли;
	
	//Поиск 0: Договор Уфы с Соллерс
	Доступно = 		ЭтоУфа
	И   Контрагент.Наименование = "ФОРД СОЛЛЕРС ХОЛДИНГ ООО";
	Если Доступно Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Код УБЫВ";
		
		Запрос.УстановитьПараметр("Наименование",  "Основной Форд UR426%" );	
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НайденныйДоговор = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		Если Не НайденныйДоговор.Пустая() Тогда
			Возврат НайденныйДоговор;
		КонецЕсли;
	КонецЕсли;
	
	Доступно = 		ЭтоУфа
				И   Контрагент.Наименование = "УАЗ ООО"
				И НомерДоговора="90/2020-ВР-Ф";
	Если Доступно Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Номер = &Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Код УБЫВ";
		
		Запрос.УстановитьПараметр("Номер",  "90/2020-ВР-Ф%" );	
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НайденныйДоговор = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		Если Не НайденныйДоговор.Пустая() Тогда
			Возврат НайденныйДоговор;
		КонецЕсли;

	КонецЕсли;			
	
	//Поиск №1: по номеру договора, если он передан и это не физ.лицо>
	Доступно = 		ЗначениеЗаполнено(НомерДоговора)
				И   ТипКонтрагента <> 1;
	Если Доступно Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Номер = &Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Код УБЫВ";

		Запрос.УстановитьПараметр("Номер",  Лев(СокрЛП(НомерДоговора),20));	
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);

		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НайденныйДоговор = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	//</Поиск №1: по номеру договора, если он передан>
	
	//<06.05.2019,+, Для Москвы для реализации не ищем "основной" договор>
	Доступно = Истина;
	Доступно = Доступно И НайденныйДоговор.Пустая(); 
	Доступно = Доступно И ИскатьОсновнойДоговор=Ложь;
	Доступно = Доступно И ЭтотОбъект.ЭтоМосква;
	Если Доступно = Истина  Тогда
		// создадим договор
		
		//Общая часть
		//------------
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Владелец 				= Контрагент;
		НовыйДоговор.Организация 			= ЭтотОбъект.Организация;
		НовыйДоговор.ВидДоговора 			= ВидДоговора;
		НовыйДоговор.ВалютаВзаиморасчетов 	= ВалютаРегламентированногоУчета;
		НовыйДоговор.Номер 					= Лев(СокрЛП(НомерДоговора),20);
		НовыйДоговор.Наименование 			= СокрЛП(НовыйДоговор.ВидДоговора)+" "+СокрЛП(Контрагент.Наименование)+ " "+НовыйДоговор.Номер;	

		//Специальная часть
		//------------------
		Если ТипКонтрагента = 3 Тогда // Это ЮЛ
			Попытка
				НовыйДоговор.СпособЗаполненияСтавкиНДС=Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически; 
			Исключение
				Возврат НайденныйДоговор;
			КонецПопытки;
		КонецЕсли;

		Попытка
			НовыйДоговор.Записать();
			НайденныйДоговор = НовыйДоговор.Ссылка;
			СписокВыполнено.Добавить(НайденныйДоговор,"Добавлен договор "+СокрЛП(НайденныйДоговор)+" с контрагентом "+СокрЛП(Контрагент));
		Исключение
			СписокОшибок.Добавить(ОписаниеОшибки());
			СписокОшибок.Добавить("Ошибка записи договора "+СокрЛП(НомерДоговора)+" контрагента "+СокрЛП(Контрагент));
		КонецПопытки;
	    Возврат НайденныйДоговор;
	КонецЕсли;
	//</06.05.2019>
	
	//<Поиск №2: Ищем договор, содержащий в доп. свойствах обособленное подразделение и слово основной>
	Если НайденныйДоговор.Пустая() Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыДопРеквизиты
		|		ПО ДоговорыКонтрагентов.Ссылка = ДоговорыДопРеквизиты.Ссылка
		|ГДЕ
		|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование
		|	И ЕСТЬNULL(ВЫРАЗИТЬ(ДоговорыДопРеквизиты.Значение КАК Справочник.ПодразделенияОрганизаций).Ссылка, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &Подразделение";
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		Запрос.УстановитьПараметр("Наименование", "%сновной%");
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Иначе
			Запрос.УстановитьПараметр("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		КонецЕсли;
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НайденныйДоговор = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;
	//</Поиск №2: Ищем договор ,содержащий в доп. свойствах обособленное подразделение и слово основной>
	
	//<Поиск №3: Ищем договор ,содержащий слово основной>
	Если НайденныйДоговор.Пустая() Тогда // ищем договор, содержащий в наименовании поле "сновной" и не заполнено основное подразделение
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Код УБЫВ";
		
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		Запрос.УстановитьПараметр("Наименование", "%"+"сновно"+"%");
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НайденныйДоговор = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;	
	КонецЕсли;
	//</Поиск №3: Ищем договор ,содержащий слово основной>
	
	//<Поиск №4: первый попавшийся>
	Если НайденныйДоговор.Пустая() Тогда // ищем договор без учета номера
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Код УБЫВ";
		
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НайденныйДоговор = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;

	КонецЕсли; 
	//</Поиск №4: первый попавшийся>

	Если НайденныйДоговор.Пустая() Тогда
		// создадим договор
		
		//Общая часть
		//------------
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Владелец = Контрагент;
		НовыйДоговор.Организация = ЭтотОбъект.Организация;
		НовыйДоговор.ВидДоговора = ВидДоговора;
		НовыйДоговор.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		НовыйДоговор.Наименование = СокрЛП(НовыйДоговор.ВидДоговора)+" "+СокрЛП(НовыйДоговор.Организация);
		НовыйДоговор.Номер = Лев(СокрЛП(НомерДоговора),20);
		
		//Специальная часть
		//------------------
		Если ЭтоМосква Или ЭтоМоскваГазконтракт Тогда
			НовыйДоговор.Наименование = СокрЛП(НовыйДоговор.ВидДоговора)+" "+СокрЛП(НовыйДоговор.Организация)+ НовыйДоговор.Номер;	
		КонецЕсли;
		Если ТипКонтрагента = 3 Тогда // Это ЮЛ
			//НовыйДоговор.ПредъявляетНДС = Истина;
			Попытка
				НовыйДоговор.СпособЗаполненияСтавкиНДС=Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически; 
			Исключение
				Возврат НайденныйДоговор;
			КонецПопытки;
		КонецЕсли;

		Попытка
			НовыйДоговор.Записать();
			НайденныйДоговор = НовыйДоговор.Ссылка;
			СписокВыполнено.Добавить(НайденныйДоговор,"Добавлен договор "+СокрЛП(НайденныйДоговор)+" с контрагентом "+СокрЛП(Контрагент));
		Исключение
			СписокОшибок.Добавить(ОписаниеОшибки());
			СписокОшибок.Добавить("Ошибка записи договора "+СокрЛП(НомерДоговора)+" контрагента "+СокрЛП(Контрагент));
		КонецПопытки;
	КонецЕсли;
	
	Возврат НайденныйДоговор;
КонецФункции


Функция ПолучитьДоговорУфаСоллерс(Контрагент, НомерДоговора, ВидДоговора, Подразделение = "", ТипКонтрагента = 3, ИскатьОсновнойДоговор = Истина)
	Доступно = 		ЭтоУфа
	И   Контрагент.Наименование = "ФОРД СОЛЛЕРС ХОЛДИНГ ООО";
	Если Не Доступно Тогда
		Возврат ПолучитьДоговор(Контрагент, НомерДоговора, ВидДоговора, Подразделение = "", ТипКонтрагента = 3, ИскатьОсновнойДоговор = Истина)			
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.Код УБЫВ";
	
	Запрос.УстановитьПараметр("Наименование",  "Основной Форд UR426%" );	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденныйДоговор = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Если Не НайденныйДоговор.Пустая() Тогда
		Возврат НайденныйДоговор;
	Иначе
		Возврат ПолучитьДоговор(Контрагент, НомерДоговора, ВидДоговора, Подразделение = "", ТипКонтрагента = 3, ИскатьОсновнойДоговор = Истина)		
	КонецЕсли;
КонецФункции

Функция ПолучитьАвтомобиль(ВИН, Наименование, ИД, ТипЭлемента = "", ЭтоНовыйАвтомобиль = Истина)
	//ТипЭлемента - тип номерного элемента в ОУ. Для Москвы используется для создания ном.группы
	
	НайденныйАвтомобиль = Справочники.Номенклатура.ПустаяСсылка();
	
	// Поиск №1: ищем по артикулу
	//---------------------------------------------------------------
	Если НайденныйАвтомобиль.Пустая() И ПустаяСтрока(ВИН)=Ложь Тогда
		нЭлемент = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", СокрЛП(ВИН));
		Если нЭлемент.Пустая()=Ложь Тогда
			НайденныйАвтомобиль = нЭлемент.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск №2: ищем по наименованию
	//---------------------------------------------------------------------------------------------
	Если НайденныйАвтомобиль.Пустая() И ПустаяСтрока(ВИН) И ПустаяСтрока(Наименование)=Ложь  Тогда
		нЭлемент = Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(Наименование), Истина);
		Если нЭлемент.Пустая()=Ложь Тогда
			НайденныйАвтомобиль = нЭлемент.Ссылка;
		КонецЕсли;		
	КонецЕсли;
	
	// Единица измерения
	//----------------------------------------------------------------
	Штуки=Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
	Если Штуки.Пустая() Тогда
		// добавим
		НовыйЭлемент = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		НовыйЭлемент.Код = "796";
		НовыйЭлемент.Наименование = "шт.";
		НовыйЭлемент.НаименованиеПолное = "Штука";
		Попытка
			НовыйЭлемент.Записать();
			Штуки = НовыйЭлемент.Ссылка;
			СписокВыполнено.Добавить(Штуки,"Добавлена единица измерения "+СокрЛП(Штуки));
		Исключение
			СписокОшибок.Добавить(ОписаниеОшибки());
			Возврат НайденныйАвтомобиль;
		КонецПопытки;
	КонецЕсли;
	
	// Номенклатурная группа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатурныеГруппы.Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НоменклатурныеГруппы.Наименование = &Наименование
	|	И НоменклатурныеГруппы.ЭтоГруппа = ЛОЖЬ
	|	И НоменклатурныеГруппы.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатурныеГруппы.Код УБЫВ";
	
	Запрос.УстановитьПараметр("Наименование", "Автомобили");
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ГруппаАвтомобили = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ГруппаАвтомобили = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Если ГруппаАвтомобили.Пустая() Тогда
		// добавим группу
		НоваяГруппа = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
		НоваяГруппа.Наименование = "Автомобили";
		НоваяГруппа.УстановитьНовыйКод();
		Попытка
			НоваяГруппа.Записать();
			ГруппаАвтомобили = НоваяГруппа.Ссылка;
			СписокВыполнено.Добавить(ГруппаАвтомобили,"Добавлена номенклатурная группа "+СокрЛП(ГруппаАвтомобили));
		Исключение
			СписокОшибок.Добавить(ОписаниеОшибки());
			Возврат НайденныйАвтомобиль;
		КонецПопытки;
	КонецЕсли;
	
	//<23.09.2020_14-51,+, УАЗы новые выгружаем на номенклатрую группу с наименованием Автомобили УАЗ>
	Если ЭтоУфа Или ЭтоЛуидорГарантияУфа Тогда
		Если ЭтоНовыйАвтомобиль = Ложь Тогда
			ГруппаАвтомобили = НомГруппаПродажаВторичные;	
		КонецЕсли;
		Если ЭтоНовыйАвтомобиль И Лев(ВИН, 3) = "XTT" Тогда
			ГруппаАвтомобили = НомГруппаПродажаНовыеУАЗ;	
		КонецЕсли;
		Если ЭтоНовыйАвтомобиль И  (Лев(ВИН, 3) = "XTA" ИЛИ Лев(ВИН, 3) = "X6D" ИЛИ Лев(ВИН, 3) = "X9L" ИЛИ Лев(ВИН, 3) = "ZOX" ИЛИ Лев(ВИН, 3) = "Z0X" ИЛИ  Лев(ВИН, 3) = "TAG") Тогда
			ГруппаАвтомобили = НомГруппаПродажаНовыеВАЗ;	
		КонецЕсли;
		Если ЭтоНовыйАвтомобиль И  (Лев(ВИН, 3) = "X2F" ИЛИ Лев(ВИН, 3) = "XUS" ИЛИ Лев(ВИН, 3) = "XU6") Тогда
			ГруппаАвтомобили = НомГруппаПродажаНовыеФОРД;	
		КонецЕсли;   
		Если ЭтоНовыйАвтомобиль И  (Лев(ВИН, 3) = "XTC" ИЛИ Лев(ВИН, 3) = "X89" ИЛИ Лев(ВИН, 3) = "X1F" ИЛИ Лев(ВИН, 3) = " X6S") Тогда
			ГруппаАвтомобили = НомГруппаПродажаНовыеКамаз;
		КонецЕсли;   
	КонецЕсли;
	//</23.09.2020_14-51>
	
	Если ЭтоМосква Или ЭтоМоскваГазконтракт Тогда
		Если ЗначениеЗаполнено(ТипЭлемента) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НоменклатурныеГруппы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
			|ГДЕ
			|	НоменклатурныеГруппы.Наименование = &Наименование
			|	И НоменклатурныеГруппы.ЭтоГруппа = ИСТИНА
			|	И НоменклатурныеГруппы.ПометкаУдаления = ЛОЖЬ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НоменклатурныеГруппы.Код УБЫВ";
			
			Запрос.УстановитьПараметр("Наименование", "Автомобили");
			РезультатЗапроса = Запрос.Выполнить();
			ГруппаСпрАвтомобили = РезультатЗапроса.Выгрузить()[0][0];
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НоменклатурныеГруппы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
			|ГДЕ
			|	НоменклатурныеГруппы.Наименование = &Наименование
			|	И НоменклатурныеГруппы.ЭтоГруппа = ЛОЖЬ
			|	И НоменклатурныеГруппы.ПометкаУдаления = ЛОЖЬ
			|	И НоменклатурныеГруппы.Родитель = &Родитель
			|
			|УПОРЯДОЧИТЬ ПО
			|	НоменклатурныеГруппы.Код УБЫВ";
			Запрос.УстановитьПараметр("Наименование", ТипЭлемента);
			Запрос.УстановитьПараметр("Родитель", ГруппаСпрАвтомобили);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ГруппаАвтомобили = РезультатЗапроса.Выгрузить()[0][0];	
			Иначе
				// добавим группу
				НоваяГруппа = Справочники.НоменклатурныеГруппы.СоздатьЭлемент();
				НоваяГруппа.Наименование 	= ТипЭлемента;
				НоваяГруппа.Родитель 		= ГруппаСпрАвтомобили;
				НоваяГруппа.УстановитьНовыйКод();
				Попытка
					НоваяГруппа.Записать();
					ГруппаАвтомобили = НоваяГруппа.Ссылка;
					СписокВыполнено.Добавить(ГруппаАвтомобили,"Добавлена номенклатурная группа "+СокрЛП(ГруппаАвтомобили));
				Исключение
					СписокОшибок.Добавить(ОписаниеОшибки());
					Возврат НайденныйАвтомобиль;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НайденныйАвтомобиль.Пустая() Тогда // не нашли - добавляем
		
		// Автомобиль
		НовыйАвтомобиль = Справочники.Номенклатура.СоздатьЭлемент();
		
		//<19.11.2019, //, Закоментарена выгрузка по ИД>
		////<30.11.2017,+, поиск по ИД оставляем только для УФЫ>
		//Если ЭтотОбъект.ЭтоУфа Тогда
		////</30.11.2017>
		//	Если ЗначениеЗаполнено(ИД) Тогда
		//		НовыйАвтомобиль.УстановитьСсылкуНового(ЭлементСсылка);
		//	КонецЕсли;
		////<30.11.2017,+, поиск по ИД оставляем только для УФЫ>
		//КонецЕсли;
		////</30.11.2017>
		//</19.11.2019>

		//<Доработка1. Помещать новые автомобили в указанную группу>
		Если ЗначениеЗаполнено(ЭтотОбъект.ГруппаДляСозданияАвтомобилей) Тогда
			НовыйАвтомобиль.Родитель = ЭтотОбъект.ГруппаДляСозданияАвтомобилей;
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(ЭтотОбъект.ВидНоменклатуры) Тогда
			НовыйАвтомобиль.ВидНоменклатуры = ЭтотОбъект.ВидНоменклатуры
		КонецЕсли;
		
		НовыйАвтомобиль.Наименование 			= СокрЛП(Наименование);
		НовыйАвтомобиль.НаименованиеПолное 		= СокрЛП(Наименование);
		//НовыйАвтомобиль.СтавкаНДС 				= Перечисления.СтавкиНДС.НДС18;
		НовыйАвтомобиль.ЕдиницаИзмерения 		= Штуки;
		НовыйАвтомобиль.НоменклатурнаяГруппа 	= ГруппаАвтомобили;
		НовыйАвтомобиль.Артикул 				= Прав(СокрЛП(ВИН), 25);
		Попытка
			НовыйАвтомобиль.Записать();
			НайденныйАвтомобиль = НовыйАвтомобиль.Ссылка;
			СписокВыполнено.Добавить(НайденныйАвтомобиль,"Добавлен автомобиль "+СокрЛП(НайденныйАвтомобиль));
		Исключение
			СписокОшибок.Добавить(ОписаниеОшибки());
		КонецПопытки;		
	Иначе // автомобиль найден 
		Если ЭтотОбъект.ПерезаписыватьНаименованиеНоменклатуры Тогда // заменяем значение реквизитов
			
			НовыйАвтомобиль = НайденныйАвтомобиль.ПолучитьОбъект();
			РеквзитИзменен = Ложь;
			
			//Замена наименования
			Если СокрЛП(НовыйАвтомобиль.Наименование) <> СокрЛП(Наименование) Тогда
				НовыйАвтомобиль.Наименование = СокрЛП(Наименование);
				НовыйАвтомобиль.НаименованиеПолное = СокрЛП(Наименование);
				РеквзитИзменен = Истина;
			КонецЕсли;
			
			//Замена номенклатурной группы
			Если НовыйАвтомобиль.НоменклатурнаяГруппа <> ГруппаАвтомобили Тогда
				НовыйАвтомобиль.НоменклатурнаяГруппа = ГруппаАвтомобили;
				РеквзитИзменен = Истина;
			КонецЕсли;
			
			//Замена родителя
			Если ЗначениеЗаполнено(ЭтотОбъект.ГруппаДляСозданияАвтомобилей) И НовыйАвтомобиль.Родитель <> ЭтотОбъект.ГруппаДляСозданияАвтомобилей Тогда
				НовыйАвтомобиль.Родитель = ЭтотОбъект.ГруппаДляСозданияАвтомобилей;
				РеквзитИзменен = Истина;
			КонецЕсли;
			
			//Замена вида номенклатуры 
			Если  ЗначениеЗаполнено(ЭтотОбъект.ВидНоменклатуры) И НовыйАвтомобиль.ВидНоменклатуры <> ЭтотОбъект.ВидНоменклатуры Тогда
				НовыйАвтомобиль.ВидНоменклатуры = ЭтотОбъект.ВидНоменклатуры;
				РеквзитИзменен = Истина;
			КонецЕсли;
			
			//Замена единицы измерения
			Если НовыйАвтомобиль.ЕдиницаИзмерения <> Штуки Тогда
				НовыйАвтомобиль.ЕдиницаИзмерения = Штуки;
				РеквзитИзменен = Истина;
			КонецЕсли;
			
			Если РеквзитИзменен Тогда
				Попытка
					НовыйАвтомобиль.Записать();
					НайденныйАвтомобиль = НовыйАвтомобиль.Ссылка;
					СписокВыполнено.Добавить(НайденныйАвтомобиль,"Изменено наименование автомобиля "+СокрЛП(НайденныйАвтомобиль));
				Исключение
					СписокОшибок.Добавить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйАвтомобиль;
	
	//<Если наименование найденного автомобиля не совпадает с наименование автомобиля в ОУ, тогда обновить название/>
	
КонецФункции

Функция ВыгрузитьНомернойЭлемент(ЭлементСсылка) Экспорт

// Сформируем артикул
//-------------------------------------------------------------------------------------------------
	Темп = ВРег(СокрЛП(ЭлементСсылка.НомерВин));
	ТекАртикул = ?(ЗначениеЗаполнено(Темп) И (Темп <> "ОТСУТСТВУЕТ"),Темп,"");

	Если (НЕ ЗначениеЗаполнено(ТекАртикул)) Тогда
		Темп = ВРег(СокрЛП(ЭлементСсылка.НомерКузова));
		ТекАртикул = ?(ЗначениеЗаполнено(Темп) И (Темп <> "ОТСУТСТВУЕТ"),Темп,"");
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(ТекАртикул)) Тогда
		Темп = ВРег(СокрЛП(ЭлементСсылка.НомерДвигателя));
		ТекАртикул = ?(ЗначениеЗаполнено(Темп) И (Темп <> "ОТСУТСТВУЕТ"),Темп,"");
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(ТекАртикул)) Тогда
		Темп = ВРег(СокрЛП(ЭлементСсылка.НомерШасси));
		ТекАртикул = ?(ЗначениеЗаполнено(Темп) И (Темп <> "ОТСУТСТВУЕТ"),Темп,"");
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ТекАртикул)) Тогда
		Темп = ВРег(СокрЛП(ЭлементСсылка.НомерАгрегата));
		ТекАртикул = ?(ЗначениеЗаполнено(Темп) И (Темп <> "ОТСУТСТВУЕТ"),Темп,"");
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ТекАртикул)) Тогда
		ТекАртикул = "Код: " + СокрЛП(ЭлементСсылка.Код);
	КонецЕсли;
	
	Возврат ВРег(СокрЛП(ТекАртикул)); 

КонецФункции

Процедура ВывестиСписокРезультатов(выбСписок, выбЗаголовок)
	Таб = Новый табличныйДокумент;
	Макет = ПолучитьМакет("Макет");
	_Шапка = Макет.ПолучитьОбласть("Шапка");
	_Строка = Макет.ПолучитьОбласть("Строка");
	
	_Шапка.Параметры.печЗаголовок = СокрЛП(выбЗаголовок);
	Таб.Вывести(_Шапка);
	Для Каждого ТекЭлемент Из выбСписок Цикл
		_Строка.Параметры.печОписание = ?(ПустаяСтрока(ТекЭлемент.Представление),СокрЛП(ТекЭлемент.Значение),СокрЛП(ТекЭлемент.Представление));
		_Строка.Параметры.печЭлемент = ТекЭлемент.Значение;
		Таб.Вывести(_Строка);
	КонецЦикла;
	
	Таб.ТолькоПросмотр=Истина;
//	Таб.Показать(выбЗаголовок);
КонецПроцедуры

Процедура ДобавитьДокументПТУ(врТЗ, врНомер, врДата, врКонтрагент, врДоговор, врНомерСФ, врДатаСФ, БазаИсточник, Склад = "", ТочкаОформления = "", ГУИДДокументаИсточникаСтрокой="", ТипДокументаИсточникаСтрокой="", ТипКонтагента=0, ВхДата='00010101');
	
	БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ГУИДДокументаИсточникаСтрокой);
	ИстДокумент=БазаИсточник.Документы[ТипДокументаИсточникаСтрокой].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
	
	НовыйАвтомобиль = Истина;
	Если ИстДокумент.Программа.ПринадлежитЭлементу(БазаИсточник.ПредопределенноеЗначение("Справочник.ПрограммыЗакупки.АвтПробег")) Тогда
		НовыйАвтомобиль = Ложь;	
	КонецЕсли;
	
	нНомерДок = ПолучитьНомерДокумента(врНомер, Метаданные.Документы.ПоступлениеТоваровУслуг.ДлинаНомера);
	
	флНовыйДок = Истина;
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	НайденныйДокумент = НайтиДокумент(врНомер, врДата, врКонтрагент, ГУИДДокументаИсточникаСтрокой);
		
	Если НайденныйДокумент.Пустая() Тогда
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	Иначе
		Если ПерезаписыватьДокументы Тогда
			ДокументОбъект = НайденныйДокумент.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокументОбъект.Товары.Очистить();
		Иначе
			СписокВыполнено.Добавить("Документ "+СокрЛП(НайденныйДокумент)+"( вх. номер "+СокрЛП(врНомер)+", контрагент "+СокрЛП(врКонтрагент)+") уже существует!");
			Возврат;
		КонецЕсли;
		
		флНовыйДок = Ложь;
	КонецЕсли;
	
	//10.04.2019,+, если заполнена вхдата, то ей и пишем документ и проводки
	// шапка документа
	Если ЗначениеЗаполнено(ВхДата) Тогда
		ДокументОбъект.Дата = НачалоДня(вхДата); //Поступления автомобилей помещаем в начало дня, реализацию - на конец для
	Иначе
		ДокументОбъект.Дата = НачалоДня(врДата); //Поступления автомобилей помещаем в начало дня, реализацию - на конец для	
	КонецЕсли;
	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	
	ДокументОбъект.Организация = Организация.Ссылка;
	ДокументОбъект.Склад = ПолучитьСклад(Склад);
		
	ДокументОбъект.Контрагент = врКонтрагент;
	ДокументОбъект.ДоговорКонтрагента = врДоговор;
	
	//Учет в разрезе подразделений
	//----------------------------
	Если ЭтотОбъект.УчетВРазрезеПодразделений Тогда
		ДокументОбъект.ПодразделениеОрганизации 			= ПолучитьПодразделениеПоТочкеОформления(ТочкаОформления);
	КонецЕсли; 

	//Приход в Луидоргарантия-Уфа не зависимо от т. Оформления, но на склад КаМАЗ Уфа, должно выгружаться на Обособленное подразделение Вавилово ЛГ.	
	Если ЭтоЛуидорГарантияУфа Тогда
		ДокументОбъект.ПодразделениеОрганизации = ПолучитьПодразделениеПоСкладуДляПТУ(Склад);
	КонецЕсли;
	
	//Если Покупатель "ЛуидорГарантия-Уфа" и Поставщик  АО "ТФК "КАМАЗ" и договор 485/2022-100, тогда поищи обособленное подразделение в договорe 
	Доступно = 		ЭтоЛуидорГарантияУфа
				И 	ДокументОбъект.Контрагент.Наименование  = "АО ""ТФК ""КАМАЗ"""
				И 	СтрНайти(ДокументОбъект.ДоговорКонтрагента, "485/2022-100")>0; 
	Если Доступно Тогда  
		ПодразделениеПоДоговору = ПолучитьПодразделениеИзДопСвойстваДоговора(ДокументОбъект.ДоговорКонтрагента);
			Если ПодразделениеПоДоговору <> Справочники.ПодразделенияОрганизаций.ПустаяСсылка() Тогда
				ДокументОбъект.ПодразделениеОрганизации = ПодразделениеПоДоговору;		
			КонецЕсли;
		КонецЕсли;     
		

		
		
	
	ДокументОбъект.СуммаВключаетНДС = Истина;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокументОбъект,мСписокВидовДоговоров);

	ДокументОбъект.НомерВходящегоДокумента = врНомер;

	Если ЗначениеЗаполнено(ВхДата) Тогда
		ДокументОбъект.ДатаВходящегоДокумента = ВхДата;
	Иначе
		ДокументОбъект.ДатаВходящегоДокумента = врДата;	
	КонецЕсли;
	
	ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	ЗаполнениеДокументов.Заполнить(ДокументОбъект);

	//Заполнение счетов учета расчетов
	//---------------------------------
	Если Не ПерезаписыватьДокументы Тогда
		СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ДокументОбъект, РежимЗаписиДокумента.Запись);
	КонецЕсли;

	Если ДокументОбъект.СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
		ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	КонецЕсли;
	Если ДокументОбъект.СчетУчетаРасчетовПоАвансам.Пустая() Тогда
		ДокументОбъект.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	КонецЕсли;
	
	ПредставлениеДокумента = ТипДокументаИсточникаСтрокой+" № "+врНомер+" от "+Формат(Дата(врДата),"ДЛФ=Д")+ " @"+ГУИДДокументаИсточникаСтрокой;
	//ДокументОбъект.Комментарий = "#Загружено из ОУ " + ПредставлениеДокумента;   
	ДокументОбъект.Комментарий = СтрШаблон("{""Описание"":""%1"", ""ДатаЗагрузки"":""%2"",""url"":""%3""}", "#Загружено из ОУ " + ПредставлениеДокумента, ТекущаяДата(), ВэбСервер+БазаИсточник.ПолучитьНавигационнуюСсылку(ИстДокумент));
	

	//НДС
	//---
	Если врТЗ[0].ТипКонтрагента = 1 Тогда // Если это физлицо не ИП, то НДС не предъявлен
		ПредъявленСчетФактура = Ложь;
	Иначе
		Если ЗначениеЗаполнено(врНомерСФ) И ЗначениеЗаполнено(врДатаСФ) 
		Тогда
			ПредъявленСчетФактура = Истина;
			ДокументОбъект.СуммаВключаетНДС = Истина;
		Иначе
			ПредъявленСчетФактура = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// ТЧ Товары
	//-----------
	Для Каждого ТекСтрока Из врТЗ Цикл
		НоваяСтрока = ДокументОбъект.Товары.Добавить();	
		НоваяСтрока.Номенклатура = ТекСтрока.Автомобиль;
		НоваяСтрока.Количество = 1;
		Если ПредъявленСчетФактура Тогда
			Если ДокументОбъект.Дата< '20190101' Тогда
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				НоваяСтрока.СуммаНДС = Окр(ТекСтрока.Цена*18/118,2); // ндс в сумме				
			Иначе
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				НоваяСтрока.СуммаНДС = Окр(ТекСтрока.Цена*20/120,2); // ндс в сумме	
			КонецЕсли;
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			НоваяСтрока.СуммаНДС = 0;
		КонецЕсли;
		НоваяСтрока.Цена = ТекСтрока.Цена;				
		НоваяСтрока.Сумма = ТекСтрока.Цена;	
	КонецЦикла;
		
	// заполним счета учета в ТЧ товары
	//----------------------------------
	//<15.07.2019_08-30, //, закоментарено, т.к. неверно может быть настроено в режиме 1с-Предприятие>
	//Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Товары");
	Для Каждого Стр Из ДокументОбъект.Товары Цикл
		Стр.счетУчета 		= ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Стр.счетУчетаНДС 	= ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ; 
	КонецЦикла;
	
	//Проверим наличие непредопределенного субконто СпособУчетаНДС на счете 19
	//----------------------------------------------------------------------------------------
	Для Каждого ТекСтрока Из ДокументОбъект.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетУчетаНДС) Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Продолжить;
		КонецЕсли;
		ЕстьСубконтоСпособУчетаНДС = ЕстьСубконтоСпособУчетаНДСнаСчете19(ТекСтрока.счетУчетаНДС);
		Если ЕстьСубконтоСпособУчетаНДС = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоУфа Или ЭтоЧелябинск Или ЭтоТамбов Или ЭтоЛуидорГарантияУфа Тогда
			ТекСтрока.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;	
	КонецЦикла;

	Если ДокументОбъект.ЭтоНовый() Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		СписокВыполнено.Добавить(ДокументОбъект.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(ДокументОбъект));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(ДокументОбъект));
		Возврат
	КонецПопытки;
	
	//Записать счет-фактуру
	//---------------------
	Если ПредъявленСчетФактура Тогда
		//Даже если не указана дата счета-фактуры, создаем ее
		//----------------------------------------------------
		Если ЗначениеЗаполнено(врДатаСФ) Тогда
			// все ок, создаем фактуру указанной датой
		Иначе
			врДатаСФ = врДата;
		КонецЕсли;
		ДобавитьСчетФактуруПолученный(ДокументОбъект.Ссылка, врНомерСФ, врДатаСФ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГУИДДокументаИсточникаСтрокой) Тогда
			//Получение ссылки на документ-источник
			//---------------------------------------
			БИ_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", ГУИДДокументаИсточникаСтрокой);
			БИ_ДокументИсточникСсылка=БазаИсточник.Документы[ТипДокументаИсточникаСтрокой].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);
				
			ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БазаИсточник, БИ_ДокументИсточникСсылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДокументРТУ(ТЗ, БИ);	
	нНомерДок = ПолучитьНомерДокумента(ТЗ[0].НомерДок, Метаданные.Документы.РеализацияТоваровУслуг.ДлинаНомера);  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка 
	|ИЗ Документ.РеализацияТоваровУслуг
	|ГДЕ НЕ ПометкаУдаления И Номер = &НомерДок И Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Начало, ДЕНЬ) И КОНЕЦПЕРИОДА(&Окончание, ДЕНЬ) И Организация = &Организация";
	Запрос.УстановитьПараметр("НомерДок", 		нНомерДок);
	Запрос.УстановитьПараметр("Начало", 		НачалоДня(ТЗ[0].ДатаДок));
	Запрос.УстановитьПараметр("Окончание", 		КонецДня(ТЗ[0].ДатаДок));
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		НайденныйДокумент = РезультатЗапроса.Выгрузить()[0][0];
	Иначе
		НайденныйДокумент = Документы.РеализацияТоваровУслуг.ПустаяСсылка()
	КонецЕсли;
	
	Если НайденныйДокумент.Пустая() Тогда
		Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		флНовыйДок=Истина;
	Иначе
		Если ПерезаписыватьДокументы Тогда
			Попытка
				Док = НайденныйДокумент.ПолучитьОбъект();
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				СписокОшибок.Добавить("Ошибка отмены проведения документа "+Строка(Док));
				Возврат;
			КонецПопытки;
			Док.Товары.Очистить();
			флНовыйДок=Ложь;
		Иначе
			СписокВыполнено.Добавить("Документ "+СокрЛП(НайденныйДокумент)+" уже существует!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	БИ_ГУИД_ДокументаИсточника = БИ.NewObject("УникальныйИдентификатор", ТЗ[0].ДокументИсточник_ГУИД_Строкой);
	ИстДокумент = БИ.Документы["НЭРеализация"].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);
	Если ИстДокумент = Неопределено Тогда
		СписокОшибок.Добавить("База-источник. Не найден документ реализация ");//+ПредставлениеДокумента);
		Возврат;
	КонецЕсли;

	Док.Номер 			= нНомерДок;
	Док.Дата 			= КонецДня(ТЗ[0].ДатаДок);  //Поступления автомобилей помещаем в начало дня, реализацию - на конец дня
	Док.ВидОперации 	= Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	Док.Контрагент		= ТЗ[0].Контрагент;
	Док.Склад 			= ТЗ[0].Склад; 
	
	Если ЭтоУфа Или ЭтоЛуидорГарантияУфа Тогда
		Док.ПодразделениеОрганизации = ПолучитьПодразделениеПоТочкеОформления(ТЗ[0].ТочкаОформленияКод); 
	Иначе
		Док.ПодразделениеОрганизации =  ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(ТЗ[0].Автомобиль, ПланыСчетов.Хозрасчетный.Товары, Док.Дата);	
	КонецЕсли; 
		
	Если ЭтотОбъект.ЭтоМосква Или ЭтоЧелябинск Тогда
		Док.ДоговорКонтрагента = ПолучитьДоговор(Док.Контрагент, ТЗ[0].ДоговорНомер, Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, Док.ПодразделениеОрганизации,, Ложь);	
	Иначе
		Док.ДоговорКонтрагента = ПолучитьДоговор(Док.Контрагент, "", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, Док.ПодразделениеОрганизации);
	КонецЕсли;

	#Область Грузополучатель
	БИ_Запрос = БИ.NewObject("Запрос");
	БИ_Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЭРеал.Получатель ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГрузополучательЕстьКонтрагент
	|ИЗ
	|	Документ.НЭРеализация КАК НЭРеал
	|ГДЕ
	|	НЭРеал.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА НЭРеал.Получатель ССЫЛКА Справочник.Контрагенты
	|				ТОГДА ВЫБОР
	|						КОГДА НЭРеал.Получатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	БИ_Запрос.УстановитьПараметр("Ссылка", ИстДокумент);
	БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
	
	Если Не БИ_РезультатЗапроса.Пустой() Тогда
		ИстГрузополучатель 		= ИстДокумент.Получатель;
		АтрибутыКонтрагента 	= ПолучитьАтрибутыКонтрагента(БИ, ИстГрузополучатель);
		Грузополучатель 		= ПолучитьКонтрагента(АтрибутыКонтрагента);
		Если Грузополучатель <> Неопределено тогда
			Док.Грузополучатель = Грузополучатель;
		КонецЕсли; 	
	КонецЕсли;	
	
	#КонецОбласти

	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;	
	
	//Док.Комментарий 	= "#Загружено из ОУ НЭРеализация"+нНомерДок+" от "+Формат(Дата(ТЗ[0].ДатаДок),"ДЛФ=Д")+" @"+ТЗ[0].ДокументИсточник_ГУИД_Строкой;  		
	ПредставлениеДокумента = СтрШаблон("НЭРеализация № %1 от %2 @ %3", нНомерДок, Формат(Дата(ТЗ[0].ДатаДок),"ДЛФ=Д"), ТЗ[0].ДокументИсточник_ГУИД_Строкой);
	Док.Комментарий = СтрШаблон("{""Описание"":""%1"", ""ДатаЗагрузки"":""%2"",""url"":""%3""}", "#Загружено из ОУ " + ПредставлениеДокумента, ТекущаяДата(), ВэбСервер+БИ.ПолучитьНавигационнуюСсылку(ИстДокумент));

	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	                         
	Док.СуммаВключаетНДС = Истина;
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Док,мСписокВидовДоговоров);
	
	ЗаполнениеДокументов.Заполнить(Док);

	//Док.ЗаполнитьСчетаУчетаРасчетов(); =>
	Если Не ПерезаписыватьДокументы Тогда
		СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(Док, РежимЗаписиДокумента.Запись);
	КонецЕсли;

	Если Док.СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
		Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	КонецЕсли;
	Если Док.СчетУчетаРасчетовПоАвансам.Пустая() Тогда
		Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	КонецЕсли;
	
	
	//30.11.2017, +, Шапка.Специальная часть
	//--------------------------------------
	Если ЭтоМосква Или ЭтоМоскваГазконтракт Тогда
		Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	КонецЕсли;                         
		
	// ТЧ Товары
	Для Каждого ТекСтрока Из ТЗ Цикл
		нСтрока = Док.Товары.Добавить();
		нСтрока.Номенклатура = ТекСтрока.Автомобиль;
		нСтрока.ЕдиницаИзмерения = нСтрока.Номенклатура.ЕдиницаИзмерения;
		нСтрока.Количество = 1;
		нСтрока.Цена = ТекСтрока.Цена;				
		нСтрока.Сумма = ТекСтрока.Цена;
		Если ТЗ[0].ТипКонтрагента=4 Тогда //иностр. юр. лицо
			нСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			нСтрока.СуммаНДС = нСтрока.Цена; // ндс в сумме	
		Иначе	
			Если Док.Дата < '20190101' Тогда
				нСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				нСтрока.СуммаНДС = Окр(нСтрока.Цена*18/118,2); // ндс в сумме
			Иначе
				нСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				нСтрока.СуммаНДС = Окр(нСтрока.Цена*20/120,2); // ндс в сумме
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Док, "Товары");
	
	Для Каждого ТекущаяСтрокаТовары Из Док.Товары Цикл
		Если ТекущаяСтрокаТовары.СчетДоходов.Пустая() Тогда	
			ТекущаяСтрокаТовары.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.1
		КонецЕсли;
		Если ТекущаяСтрокаТовары.СчетРасходов.Пустая() Тогда	
			ТекущаяСтрокаТовары.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
		КонецЕсли;
		Если ТекущаяСтрокаТовары.СчетУчетаНДСПоРеализации.Пустая() Тогда	
			ТекущаяСтрокаТовары.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС; // 90.3
		КонецЕсли;

	КонецЦикла;
	
	Попытка
		Док.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		СписокВыполнено.Добавить(Док.Ссылка,?(флНовыйДок,"Создан документ ","Перезаполнен документ ")+СокрЛП(Док));
	Исключение
		СписокОшибок.Добавить("Ошибка записи документа "+Строка(Док)+ ", "+ОписаниеОшибки());
		Возврат
	КонецПопытки;
	
	//<Записать счет-фактуру>
	Если ЗначениеЗаполнено(ТЗ[0].НомерСФ)  Тогда
		ДобавитьСчетФактуруВыданный(Док.Ссылка, ТЗ[0].НомерСФ, ТЗ[0].ДатаСФ);
	КонецЕсли;
	//</Записать счет-фактуру>
	
	//<Получение ссылки на документ-источник>
	БИ_ГУИД_ДокументаИсточника = БИ.NewObject("УникальныйИдентификатор", ТЗ[0].ДокументИсточник_ГУИД_Строкой);
	БИ_ДокументИсточникСсылка=БИ.Документы[(ТЗ[0].ТипДокументаИсточникаСтрокой)].ПолучитьСсылку(БИ_ГУИД_ДокументаИсточника);
	//</Получение ссылки на документ-источник>
	ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БИ, БИ_ДокументИсточникСсылка);
КонецПроцедуры

Функция НайтиДокумент(врНомер, врДата, врКонтрагент, ГУИДДокументаИсточникаСтрокой)
	
	НайденныйДокумент = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ
		|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента
//		|	И ПоступлениеТоваровУслуг.ДатаВходящегоДокумента МЕЖДУ &начДата И &конДата
		|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
		|	И ПоступлениеТоваровУслуг.Организация = &Организация
		|	И ПоступлениеТоваровУслуг.Комментарий ПОДОБНО &Комментарий
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеТоваровУслуг.Номер УБЫВ,
		|	ПоступлениеТоваровУслуг.Дата УБЫВ";

	Запрос.УстановитьПараметр("начДата", НачалоДня(врДата));
	Запрос.УстановитьПараметр("конДата", КонецДня(врДата));
	
	Запрос.УстановитьПараметр("Контрагент", врКонтрагент);
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", врНомер);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("Комментарий", "%"+ГУИДДокументаИсточникаСтрокой+"%");

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденныйДокумент = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

	Возврат НайденныйДокумент;
КонецФункции

Функция ПолучитьПрефиксДокумента(врНомер)
	
	МассивЧисел 	= "0123456789";
	ЧисловаяЧасть	= "";
	ПРефикс			= "";
	
	ИсходныйНомер = СокрЛП(врНомер); 
	
	// Уберем "-", "_" и " "
	ИсходныйНомер = СтрЗаменить(ИсходныйНомер, "-","");
	ИсходныйНомер = СтрЗаменить(ИсходныйНомер, "_","");
	ИсходныйНомер = СтрЗаменить(ИсходныйНомер, " ","");
	
	ЧисловаяЧасть = "";
	ПРефикс 	  = "";
	
	поз = СтрДлина(ИсходныйНомер);
	Для сч=1 по СтрДлина(ИсходныйНомер) Цикл
		врСТр = Сред(ИсходныйНомер, поз, 1);
	
		Если Найти(МассивЧисел, врСтр)=0 Тогда
			Прервать;
		КонецЕсли;
		ЧисловаяЧасть = врСтр+ЧисловаяЧасть;	
		поз = поз-1;
	КонецЦикла;	
	
	Префикс = Лев(ИсходныйНомер, СтрДлина(ИсходныйНомер)-СтрДлина(ЧисловаяЧасть));
	
	Возврат Префикс;

КонецФункции

Функция ПолучитьНомерДокумента(врНомер, врДлинаНомера, НоваяЧисловаяЧасть=Неопределено)
	
	//ИсходныйНомер = СокрЛП(врНомер); 
	//Если СтрДлина(ИсходныйНомер)<=врДлинаНомера Тогда
	//	Возврат ИсходныйНомер;
	//КонецЕсли;
	//
	//// Уберем "-", "_" и " "
	//ИсходныйНомер = СтрЗаменить(ИсходныйНомер, "-","");
	//ИсходныйНомер = СтрЗаменить(ИсходныйНомер, "_","");
	//ИсходныйНомер = СтрЗаменить(ИсходныйНомер, " ","");
	//Если СтрДлина(ИсходныйНомер)<=врДлинаНомера Тогда
	//	Возврат ИсходныйНомер;
	//КонецЕсли;
	//
	//МассивЧисел = "0123456789";
	//
	//ЧисловаяЧасть = "";
	//ПРефикс = "";
	//
	//поз = СтрДлина(ИсходныйНомер);
	//Для сч=1 по СтрДлина(ИсходныйНомер) Цикл
	//	врСТр = Сред(ИсходныйНомер, поз, 1);
	//	
	//	Если Найти(МассивЧисел, врСтр)=0 Тогда
	//		Прервать;
	//	КонецЕсли;
	//	
	//	ЧисловаяЧасть = врСтр+ЧисловаяЧасть;
	//	
	//	поз = поз-1;
	//КонецЦикла;	
	//
	//Префикс = Лев(ИсходныйНомер, СтрДлина(ИсходныйНомер)-СтрДлина(ЧисловаяЧасть));
	//
	//Возврат Префикс+Прав(ЧисловаяЧасть, врДлинаНомера-СтрДлина(Префикс)); 	
	
	
	МассивЧисел = "0123456789";
	
	ЧисловаяЧасть = "";
	ПРефикс = "";
	
	ИсходныйНомер = СокрЛП(врНомер); 
	поз = СтрДлина(ИсходныйНомер);
	Для сч=1 по СтрДлина(ИсходныйНомер) Цикл
		врСТр = Сред(ИсходныйНомер, поз, 1);
		
		Если Найти(МассивЧисел, врСтр)=0 Тогда
			Прервать;
		КонецЕсли;
		
		ЧисловаяЧасть = врСтр+ЧисловаяЧасть;
		
		поз = поз-1;
	КонецЦикла;	
	Префикс = Лев(ИсходныйНомер, СтрДлина(ИсходныйНомер)-СтрДлина(ЧисловаяЧасть));
	
	Если НоваяЧисловаяЧасть=Неопределено Тогда
		Если СтрДлина(ИсходныйНомер)<=врДлинаНомера Тогда
			Возврат ИсходныйНомер;
		КонецЕсли;
	Иначе
		Если СтрДлина(Префикс+СокрЛП(НоваяЧисловаяЧасть))<=врДлинаНомера Тогда
			Возврат Префикс+СокрЛП(НоваяЧисловаяЧасть);
		КонецЕсли;		
	КонецЕсли;	
	
	// Уберем "-", "_" и " "
	ИсходныйНомер = СтрЗаменить(ИсходныйНомер, "-","");
	ИсходныйНомер = СтрЗаменить(ИсходныйНомер, "_","");
	ИсходныйНомер = СтрЗаменить(ИсходныйНомер, " ","");
	
	ЧисловаяЧасть = "";
	ПРефикс = "";
	
	поз = СтрДлина(ИсходныйНомер);
	Для сч=1 по СтрДлина(ИсходныйНомер) Цикл
		врСТр = Сред(ИсходныйНомер, поз, 1);
		
		Если Найти(МассивЧисел, врСтр)=0 Тогда
			Прервать;
		КонецЕсли;
		
		ЧисловаяЧасть = врСтр+ЧисловаяЧасть;
		
		поз = поз-1;
	КонецЦикла;	
	
	Префикс = Лев(ИсходныйНомер, СтрДлина(ИсходныйНомер)-СтрДлина(ЧисловаяЧасть));
	
	Если НоваяЧисловаяЧасть=Неопределено Тогда
		Если СтрДлина(ИсходныйНомер)<=врДлинаНомера Тогда
			новыйНомер = ИсходныйНомер;
		Иначе
			новыйНомер = Префикс+Прав(ЧисловаяЧасть, врДлинаНомера-СтрДлина(Префикс));
		КонецЕсли;
	Иначе 
		Если СтрДлина(Префикс+СокрЛП(НоваяЧисловаяЧасть))<=врДлинаНомера Тогда
			новыйНомер = Префикс+СокрЛП(НоваяЧисловаяЧасть);
		Иначе
			новыйНомер = Префикс+Прав(СокрЛП(НоваяЧисловаяЧасть), врДлинаНомера-СтрДлина(Префикс));
		КонецЕсли;
	КонецЕсли;
	
	Возврат новыйНомер; 	

КОнецФункции

Процедура ДобавитьСчетФактуруПолученный(ДокОснование, НомерСФ, ДатаСФ)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Попытка 
			//Если ЭтоКазань Или ЭтоУфа  Тогда
				//в новом релизе 1С 3.0.76.67 нужно передать в функцию структуру
				Парам = Новый Структура();
				Парам.Вставить("Основание",						ДокОснование);
				Парам.Вставить("НомерСчетаФактурыПолученного", 	НомерСФ);
				Парам.Вставить("ДатаСчетаФактурыПолученного", 	ДатаСФ);
				Парам.Вставить("Продавец", 						"");
				Парам.Вставить("ЭтоУниверсальныйДокумент",		Ложь);
				Парам.Вставить("продавцы",						"");
				Парам.Вставить("КодВидаОперации",				"01");
				Парам.Вставить("НДСПредъявленКВычету",			Истина);
				СчетФактураСсылка = Документы.СчетФактураПолученный.СоздатьДокументНаОсновании(Парам);	
			//Иначе
			//	СчетФактураСсылка = Документы.СчетФактураПолученный.СоздатьДокументНаОсновании(ДокОснование, НомерСФ, ДатаСФ);
			//КонецЕсли;
			СписокВыполнено.Добавить(СчетФактураСсылка, "Создан документ " +СокрЛП(СчетФактураСсылка));
		Исключение
		    СписокОшибок.Добавить(СтрШаблон("Ошибка записи счет-фактуры.Основание = %1, НомерСФ = %2, ДатаСФ = %3 ", ДокОснование, НомерСФ, ДатаСФ));	
		КонецПопытки
	Иначе
		СчетФактура = РезультатЗапроса.Выгрузить()[0][0];
		ДокументОбъект = СчетФактура.ПолучитьОбъект();
		
		ДокументОбъект.ДокументОснование=Неопределено;
		ДокументОбъект.ДокументыОснования.Очистить();
		
		Проведен = ДокументОбъект.Проведен;
		
		Попытка 
			Если Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			СписокОшибок.Добавить(СтрШаблон("Ошибка записи счет-фактуры. СчетФактура = %1,  Основание = %2, НомерСФ = %3, ДатаСФ = %4", СчетФактура, ДокОснование, НомерСФ, ДатаСФ));
			Возврат;
		КонецПопытки;
		
		ДокументОбъект.Заполнить(ДокОснование);  
		Попытка
			Если Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокументОбъект.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись))
			КонецЕсли;
		Исключение
				СписокОшибок.Добавить(СтрШаблон("Ошибка записи счет-фактуры. СчетФактура = %1,  Основание = %2, НомерСФ = %3, ДатаСФ = %4", СчетФактура, ДокОснование, НомерСФ, ДатаСФ));
			Возврат;
		КонецПопытки;

		СписокВыполнено.Добавить(СчетФактура, "Перезаполнен документ "+СчетФактура);
		
	КонецЕсли;
КонецПроцедуры  //</Добавить счет-фактуру на основании поступления>

Процедура ДобавитьСчетФактуруВыданный(ДокОснование, НомерСФ, ДатаСФ)
	
	нСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокОснование);
	//08.02.2017_11-06, =>, задвоение префикса
	//СчетФактураНомер = ?(ПустаяСТрока(НомерСФ), ДокОснование.Номер, ПолучитьНомерДокумента(ДокОснование.Номер, Метаданные.Документы.СчетФактураВыданный.ДлинаНомера, НомерСФ));
	//=>
	СчетФактураНомер = ?(ЗначениеЗаполнено(НомерСФ), НомерСФ, ДокОснование.Номер);
	//08.02.2017_11-06
	
	Если нСчетФактура=Неопределено Тогда
		Попытка 
			ПараметрыСоздания = Новый Структура();
			ПараметрыСоздания.Вставить("Основание", 				ДокОснование);
			ПараметрыСоздания.Вставить("ЭтоУниверсальныйДокумент", 	Ложь);
			ПараметрыСоздания.Вставить("КодВидаОперации",			"01");

			СчетФактураСсылка = Документы.СчетФактураВыданный.СоздатьДокументНаОсновании(ПараметрыСоздания);
			СчетФактураОбъект = СчетФактураСсылка.ПолучитьОбъект();

			СчетФактураОбъект.Номер=СчетФактураНомер;
			СчетФактураОбъект.Дата=ДатаСФ;
			СчетФактураОбъект.Записать();
			СписокВыполнено.Добавить(СчетФактураСсылка, "Создан документ " +СокрЛП(СчетФактураСсылка));
		Исключение
			СписокОшибок.Добавить("Ошибка записи счет-фактуры выданной на основании "+ДокОснование+" ,"+ОписаниеОшибки());	
		КонецПопытки		
	Иначе
		//СФОбъект = нСчетФактура.ПолучитьОбъект();
		ДокументОбъект = нСчетФактура.ПолучитьОбъект();
		
		ДокументОбъект.ДокументОснование=Неопределено;
		ДокументОбъект.ДокументыОснования.Очистить();
		
		Проведен = ДокументОбъект.Проведен;
		
		Попытка 
			Если Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			СписокОшибок.Добавить("Ошибка записи счет-фактуры выданной" + ДокументОбъект.Ссылка);
			Возврат;
		КонецПопытки;
		
		ДокументОбъект.Заполнить(ДокОснование); 
		ДокументОбъект.Номер = СчетФактураНомер;
		ДокументОбъект.Дата = ДатаСФ;
		Попытка
			Если Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокументОбъект.Записать(?(ПроводитьДокументы,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись))
			КонецЕсли;
		Исключение
			СписокОшибок.Добавить("Ошибка записи счет-фактуры выданной" + ДокументОбъект.Ссылка);	
			Возврат;
		КонецПопытки;

		СписокВыполнено.Добавить(ДокументОбъект.Ссылка, "Перезаполнен документ "+ДокументОбъект.Ссылка);
	КонецЕсли;
КонецПроцедуры  

Функция ПолучитьСклад(КодСклада)
	
	Если ЭтотОбъект.УчетВРазрезеСкладов Тогда
	
		ПустойСклад = Справочники.Склады.ПустаяСсылка();
		
		Если Не ЗначениеЗаполнено(КодСклада) Тогда
			Сообщить("Не указан код склада");
			Возврат ПустойСклад;
		КонецЕсли;
		
		НайденнаяСтрокаКЭШа= ЭтотОбъект.Склады.Найти(КодСклада, "КодСкладаВБазеИсточнике");
		
		Если НайденнаяСтрокаКЭШа <> Неопределено Тогда
			Возврат НайденнаяСтрокаКЭШа.Склад;
		Иначе
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Склады.Ссылка
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Комментарий ПОДОБНО &КодСклада";
			
			Запрос.УстановитьПараметр("КодСклада", "%"+КодСклада+"%");
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				СписокОшибок.Добавить("Не найден склад, у которого в комментарии указан следующий код склада из базы-источника: "+КодСклада+". Установлен основной склад");
				Возврат ЭтотОбъект.ОсновнойСклад;
			КонецЕсли;
			Выгрузка = РезультатЗапроса.Выгрузить();
			Если Выгрузка.Количество()>1 Тогда
				СписокОшибок.Добавить("Обнаружено несколько складов, у которых в комментарии указан один и тот же код склада из базы-источника: "+КодСклада);
				Возврат ПустойСклад;
			КонецЕсли;
			НайденныйСклад = Выгрузка[0][0];
			НоваяСтрока = ЭтотОбъект.Склады.Добавить();
			НоваяСтрока.КодСкладаВБазеИсточнике=КодСклада;
			НоваяСтрока.Склад=НайденныйСклад;
		КонецЕсли;
		Возврат НайденныйСклад;
		
	Иначе
		Возврат ЭтотОбъект.ОсновнойСклад;	
	КонецЕсли;
 КонецФункции
  
Функция ПолучитьПодразделениеПоСкладу(КодСкладаИсточника)
	//Используется только для перемещений между Уфой и Челябинском
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Если ЭтотОбъект.УчетВРазрезеПодразделений Тогда
			
			Если Не ЗначениеЗаполнено(КодСкладаИсточника) Тогда
				Сообщить("Не заполнен код склада-источника");
				Возврат ПустоеПодразделение;
			КонецЕсли;
			
			НайденнаяСтрока = ЭтотОбъект.СоответствиеСкладаИсточникаПодразделениюПриемника.Найти(КодСкладаИсточника, "СкладИсточникКод");
			Если НайденнаяСтрока <> Неопределено Тогда
				Возврат НайденнаяСтрока.ПодразделениеПриемник;
			Иначе
				Возврат ПустоеПодразделение;
			КонецЕсли;	
			
		Иначе
			Возврат ПустоеПодразделение;
	КонецЕсли;
		 
КонецФункции 

Функция ПолучитьПодразделениеПоСкладуБУ(СкладБУ)
	//Возвращает подразделение, связанное со складом типовой связкой
	
	Если СкладБУ = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка") Тогда
		Возврат ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	КонецЕсли;
	
	Возврат СкладБУ.ПодразделениеОрганизации;
КонецФункции	
 
Функция ПолучитьПодразделениеПоСкладуДляПТУ(КодСкладаИсточника)
	 //Используется только при загрузке поступлений
	 
	 ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	 
	 Если ЭтотОбъект.УчетВРазрезеПодразделений Тогда
		
		 Если Не ЗначениеЗаполнено(КодСкладаИсточника) Тогда
			 Сообщить("Не заполнен код склада-источника");
			 Возврат ПустоеПодразделение;
		 КонецЕсли;
		 
		 НайденнаяСтрока = ЭтотОбъект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Найти(КодСкладаИсточника, "СкладИсточникКод");
		 Если НайденнаяСтрока <> Неопределено Тогда
			 Возврат НайденнаяСтрока.ПодразделениеПриемник;
		 Иначе
			 Возврат ПустоеПодразделение;
		 КонецЕсли;	
		 
	 Иначе
		 Возврат ПустоеПодразделение;
	 КонецЕсли;
	 
КонецФункции

Функция ПолучитьПодразделениеПоТочкеОформления(КодТочкиОформления)
	 
	 ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	 
	 Если ЭтотОбъект.УчетВРазрезеПодразделений Тогда
		
		 Если Не ЗначениеЗаполнено(КодТочкиОформления) Тогда
			 Сообщить("Не заполнен код точки офомления");
			 Возврат ПустоеПодразделение;
		 КонецЕсли;
		 
		 НайденнаяСтрока = ЭтотОбъект.СоответствиеТочкиОформленияПодразделениюПриемника.Найти(КодТочкиОформления, "ТочкаОформленияКод");
		 Если НайденнаяСтрока <> Неопределено Тогда
			 Возврат НайденнаяСтрока.ПодразделениеПриемник;
		 Иначе
			 Возврат ПустоеПодразделение;
		 КонецЕсли;	
		 
	 Иначе
		 Возврат ПустоеПодразделение;
	 КонецЕсли;
	 
КонецФункции
 
Функция ПолучитьПодразделениеПоОстаткуАвтомобиляНаСчете(АвтомобильКакНоменклатура, Счет, Период)
	
	ЗначениеПоУмолчанию = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Доступно = ТипЗнч(АвтомобильКакНоменклатура) = Тип("СправочникСсылка.Номенклатура");
	Доступно = Доступно И ЗначениеЗаполнено(АвтомобильКакНоменклатура);
	Доступно = Доступно И ТипЗнч(Период) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(Период);
	
	Если Не Доступно Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Субконто1 = &Номенклатура
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстаток > 0";
	
	Если Счет = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда //на Счете 10.07 Номенклатура это субконто 2
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Субконто1", "Субконто2");	
	КонецЕсли;
	
	Если Счет = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные Тогда //на Счете 45.01 Номенклатура это субконто 2
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Субконто1", "Субконто2");	
	КонецЕсли;

			
	Запрос.УстановитьПараметр("Период", 		Новый Граница(Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Счет", 			Счет);
	Запрос.УстановитьПараметр("Номенклатура", 	АвтомобильКакНоменклатура);
	Запрос.УстановитьПараметр("Организация", 	ЭтотОбъект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выгрузить()[0][0];	
	Возврат Результат		 
КонецФункции

Функция ПолучитьСтоимостьАвтомобиляНаСчете(АвтомобильКакНоменклатура, Счет, Период)
	
	ЗначениеПоУмолчанию = 0;
	
	Доступно = ТипЗнч(АвтомобильКакНоменклатура) = Тип("СправочникСсылка.Номенклатура");
	Доступно = Доступно И ЗначениеЗаполнено(АвтомобильКакНоменклатура);
	Доступно = Доступно И ТипЗнч(Период) = Тип("Дата");
	Доступно = Доступно И ЗначениеЗаполнено(Период);
	
	Если Не Доступно Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Субконто1 = &Номенклатура
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Если Счет = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда //на Счете 10.07 Номенклатура это субконто 2
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Субконто1", "Субконто2");	
	КонецЕсли;
	
	Если Счет = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные Тогда //на Счете 45.01 Номенклатура это субконто 2
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Субконто1", "Субконто2");	
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Период", Новый Граница(Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Номенклатура", АвтомобильКакНоменклатура);
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выгрузить()[0][0];	
	Возврат Результат		 
КонецФункции

Процедура УстановитьПодразделение(ДокументОбъект, ТочкаОформления)
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации")=Неопределено Тогда
		Возврат;		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Владелец
	|	И ПодразделенияОрганизаций.Наименование ПОДОБНО &Наименование
	|	И ПодразделенияОрганизаций.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Наименование", "%"+ТочкаОформления+"%");
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект.ПодразделениеОрганизации = Выборка.Ссылка;			
	КонецЦикла;   
	
КонецПроцедуры

Функция НайтиИсходящийДокумент(БазаИсточник, ИмяДок, ИстДокНомер, ИстДокДата, ИстДокПредставление);
	//Поиск документа ПередачаТоваров, ПоступлениеИзПереработки, ПеремещениеТоваров
	//БазаИсточник - com-соединение
	//ИмяДок - тип документа в базе-приемнике
	//ИстДокНомер - номер документа в базе-источнике
	//ИстДокДата - дата документа в базе-источнике
	//ИстДокПредставление - представление документа
	//Возвращаемое значение: ссылка на найденный дкумент или пустая ссылка
	
	//Поиск №1: по номеру и дате
	//--------------------------
	ДокСсылка = Документы[ИмяДок].НайтиПоНомеру(ИстДокНомер, ИстДокДата);
	
	//Поиск №2: по представлению документа-источника в комментарии документа-приемника
	//--------------------------------------------------------------------------------
	Если Не ЗначениеЗаполнено(ДокСсылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Документ."+имяДок+"
			|ГДЕ
			|	Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Комментарий", "%"+СокрЛП(ИстДокПредставление)+"%");
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ДокСсылка = РезультатЗапроса.Выгрузить()[0][0];
		КонецЕсли;
	КонецЕсли;
	Возврат ДокСсылка;
	
КонецФункции

Функция НайтиПолучитьВходящийДокумент(БазаИсточник, ИмяДок, НомерВхДок, ДатаВхДок, ПредставлениеДокумента);
	
	ДокСсылка = Документы[ИмяДок].ПустаяСсылка();
	
	//<Поиск №1: по номеру и дате входящего документа>
	Запрос = Новый Запрос;
	Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Док.Ссылка
				|ИЗ
				|	Документ."+имяДок+" КАК Док
				|ГДЕ
				|	Док.НомерВходящегоДокумента = &НомерВходящегоДокумента
				|	И Док.ДатаВходящегоДокумента МЕЖДУ &начДата И &конДата
				|	И Док.Организация = &Организация";

	Запрос.УстановитьПараметр("конДата", КонецДня(ДатаВхДок));
	Запрос.УстановитьПараметр("начДата", НачалоДня(ДатаВхДок));
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", СокрЛП(НомерВхДок));
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	
    РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ДокСсылка = РезультатЗапроса.Выгрузить()[0][0];
	//</Поиск №1: по номеру и дате входящего документа>
	
	Иначе
	
		//<Поиск №2: по представлению документа-источника в комментарии документа-приемника>
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Док.Ссылка
			|ИЗ
			|	Документ."+имяДок+" КАК Док
			|ГДЕ
			|	Док.Комментарий ПОДОБНО &Комментарий";

		Запрос.УстановитьПараметр("Комментарий", "%"+СокрЛП(ПредставлениеДокумента)+"%");
		Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ДокСсылка = РезультатЗапроса.Выгрузить()[0][0];	
		КонецЕсли;
		//</Поиск №2: по представлению документа-источника в комментарии документа-приемника>	
	
	КонецЕсли;	

	Возврат ДокСсылка;
	
КонецФункции

Функция СтавкаНДС(ИсточникСтавкаНДС_Строкой)
	//ИсточникСтавкаНДС_Строкой - значение ставки НДС строкой в базе источнике
	//СтавкаНДС - значение перечисления в приемнике

	
	Если Не ЗначениеЗаполнено(ИсточникСтавкаНДС_Строкой) Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		Если Найти(ИсточникСтавкаНДС_Строкой, "20%") > 0 Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		ИначеЕсли Найти(ИсточникСтавкаНДС_Строкой, "18%") > 0 Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли Найти(ИсточникСтавкаНДС_Строкой, "10%") > 0 Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли Найти(ИсточникСтавкаНДС_Строкой, "0%") > 0 Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
	КонецЕсли;
	Возврат СтавкаНДС;
КонецФункции

Процедура ЗарегистрироватьФактЗагрузкиВБазеИсточнике(БазаИсточник, БазаИсточник_Документ)
	//Аргументы:
	//БазаИсточник - comсоединение
	//БазаИсточник_Документ - ссылка на документ в базе источнике
	
	БИ_НЗ = БазаИсточник.РегистрыСведений.ДокументыДляВыгрузкиБух.СоздатьМенеджерЗаписи();
	БИ_НЗ.Документ = БазаИсточник_Документ.Ссылка;
	БИ_НЗ.Прочитать();
	БИ_НЗ.Выгружен = Истина;
	БИ_НЗ.Записать(Истина);	
КонецПроцедуры

Функция ПолучитьПодразделениеПоВИН(ВИН)
	//возвращает подразделение организации из табл.части СоответствиеВинаИПодразделения по трем первым символам ВИН
	//используется только для доработки, которая в 1С Бух проходит не как ПоступлениеДопРасходов, а как обычное поступление,
	//т.е. как ком. расходы
	
	ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
	Доступно = ТипЗнч(ВИН) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ВИН);
	Доступно = Доступно И СтрДлина(ВИН)>=3;
	
	Если Не Доступно Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ;
	КонецЕсли;
	
	ПервыеСимв = ЛЕВ(ВИН,3);
	
	НайденнаяСтрока = ЭтотОбъект.СоответствиеВинаИПодразделения.Найти(ПервыеСимв, "ВИН");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат ЗНАЧЕНИЕ_ПО_УМОЛЧАНИЮ
	КонецЕсли;
	
	Результат = НайденнаяСтрока.ПодразделениеПриемник;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПодразделениеИзДопСвойстваДоговора(Договор)
	// Функция возвращает подразделение, указанное в доп. свойстве "подразделение" договора 
	
	ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	
	Доступно = ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	Если Не Доступно Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
	|ГДЕ
	|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &ДоговорСсылка
	|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство.Наименование = &НаименованиеСвойства";
	Запрос.УстановитьПараметр("ДоговорСсылка", Договор);
	Запрос.УстановитьПараметр("НаименованиеСвойства", "Подразделение");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = РезультатЗапроса.Выгрузить()[0][0];
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьСубконтоСпособУчетаНДСнаСчете19(Счет19) 
	//Возвращает Истина если на переданном счете учета НДС предъвленного есть непредопределенное субконто способ учета НДС
	
	Результат = Ложь;
	
	Доступно = ТипЗнч(Счет19) = Тип("ПланСчетовСсылка.Хозрасчетный");
	Доступно = Доступно И ЗначениеЗаполнено(Счет19);
	Если Не Доступно Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = &Ссылка
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС)";
	Запрос.УстановитьПараметр("Ссылка", Счет19);
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Не РезультатЗапроса.Пустой();	
	
	Возврат Результат
КонецФункции

#Область HTML
Функция НTML__ПолучитьМакет(ИмяМакета) Экспорт
	Возврат ЭтотОбъект.ПолучитьМакет(ИмяМакета);
КонецФункции
#КонецОбласти

#Область РегистрацияВнешнейОбработки
Функция СведенияОВнешнейОбработке() Экспорт	
	РегистрационныеДанные = Новый Структура();
	РегистрационныеДанные.Вставить("Наименование", "Обмен данными с 1С-ОУ");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "2018-08-13");
	РегистрационныеДанные.Вставить("Информация", "Обработка предназначена для загрузки документов из 1С-ОУ");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Идентификатор");
	тз.Колонки.Добавить("Использование");
	тз.Колонки.Добавить("Представление");
	
	НоваяСтрока = тз.Добавить();
	НоваяСтрока.Идентификатор = "ОткрытьОбработку";
	НоваяСтрока.Использование = "ОткрытиеФормы";
	НоваяСтрока.Представление = "Загрузка документов из 1С:Оперативный учет";
	
	РегистрационныеДанные.Вставить("Команды", тз);
	
	Возврат РегистрационныеДанные	
КонецФункции
#КонецОбласти

Процедура УстановиЗначениеДопСвойства(ДокСсылка, ИмяДопСвойства, ЗначениеДопСвойства)
	//Устанавливает у документа со ссылкой ДокСсылка значение доп. свойства,
	//например у документа ПоступлениеТоваровУслуг для Уфы заполняет свойство "vin" ВИНом доработанного автмобиля
	
	Доступно = Истина;
	Доступно = Доступно И ТипЗнч(ИмяДопСвойства) = Тип("Строка");
	Доступно = Доступно И ЗначениеЗаполнено(ИмяДопСвойства);
	Доступно = Доступно И ЗначениеЗаполнено(ЗначениеДопСвойства);
	
	Если Не Доступно Тогда
		Возврат;
	КонецЕсли;
	
	ДопСвойства = УправлениеСвойствами.СвойстваОбъекта(ДокСсылка);
	Если ДопСвойства.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = Новый ТаблицаЗначений();
	Свойства.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	Свойства.Колонки.Добавить("Значение");

	НайденноеДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	Для Каждого i Из ДопСвойства Цикл
		Если i.Имя = ИмяДопСвойства Тогда
			НайденноеДопСвойство = i;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденноеДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	Новая = Свойства.Добавить();
	Новая.Свойство = НайденноеДопСвойство;
	Новая.Значение = ЗначениеДопСвойства;
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДокСсылка, Свойства);
КонецПроцедуры
