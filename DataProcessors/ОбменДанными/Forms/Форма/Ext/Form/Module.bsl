
&НаКлиенте
Процедура ПолучитьЖурналРегистрации(Команда)
	Ошибка = Ложь;
	                              
	Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.НачалоПериода) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле="НачалоПериода";
		Сообщение.Текст = "Не указана дата начала!";
		Сообщение.Сообщить();
		Ошибка=Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.КонецПериода) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "КонецПериода";
		Сообщение.Текст = "Не указана дата окончания!";
		Сообщение.Сообщить();
		Ошибка=Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "Организация";
		Сообщение.Текст = "Не указана Организация!";
		Сообщение.Сообщить();
		Ошибка=Истина;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан фильтр отображения документов";
		Сообщение.Сообщить();
		Ошибка=Истина;		
	КонецЕсли;
	
	Если Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьСписокДокументов_Сервер(ЭтаФорма.Объект.НачалоПериода, ЭтаФорма.Объект.КонецПериода);	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументы(Команда)
	Ошибка = Ложь;
	ЭтаФорма.Объект.СписокОшибок.Очистить();
	ЭтаФорма.Объект.СписокВыполнено.Очистить();
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле="Организация";
		Сообщение.Текст = "Не указана организация!";
		Сообщение.Сообщить();
		Ошибка = Истина;	
	КонецЕсли;

	//<Доработка1. Использовать один склад>
	Если Не ЭтаФорма.Объект.УчетВРазрезеСкладов Тогда
		Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.ОсновнойСклад) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле="Склад";
			Сообщение.Текст = "Не указан основной склад!";
			Сообщение.Сообщить();
			Ошибка = Истина;		
		КонецЕсли;
	КонецЕсли;
	//</Доработка1. Использовать один склад>
			
	Если Ошибка Тогда
		Возврат
	КонецЕсли;
		
	//<10.04.2019, +, Перенесено из ЗагрузитьДокументы_Сервер()>
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Закупка ГАЗ");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		 Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Состояние("Загрузка документа Поступление № "+ ВыбранныйДокумент.Номер +" от "+ВыбранныйДокумент.Дата);
			Загрузить_ГазНЭЗакупка_Сервер(ВыбранныйДокумент.НомерСтроки);
		КонецЦикла;
	 КонецЕсли;
	//</10.04.2019>

	//<22.03.2019, +, Перенесено из ЗагрузитьДокументы_Сервер()>
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Закупка");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		//Проверь заполнение номенклатурных групп
		Если Объект.ЭтоУфа Тогда
			Доступно = Истина;
			Доступно = Доступно И 	Не ЗначениеЗаполнено(Объект.НомГруппаПродажаНовыеГАЗ);
			Доступно = Доступно ИЛИ Не ЗначениеЗаполнено(Объект.НомГруппаПродажаНовыеВАЗ);
			Доступно = Доступно ИЛИ Не ЗначениеЗаполнено(Объект.НомГруппаПродажаНовыеУАЗ);
			Доступно = Доступно ИЛИ Не ЗначениеЗаполнено(Объект.НомГруппаПродажаНовыеФОРД);
			Доступно = Доступно ИЛИ Не ЗначениеЗаполнено(Объект.НомГруппаПродажаВторичные);
			Если Доступно Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Поле	="СтатьяЗатратУслугиДляПоступлениеУслугИзПереработки";
				Сообщение.Текст = "Закупка: не заполнены номенклатурные группы автомобилей";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		 Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Состояние("Загрузка документа Поступление № "+ ВыбранныйДокумент.Номер +" от "+ВыбранныйДокумент.Дата);
			Загрузить_НЭЗакупка_Сервер(ВыбранныйДокумент.НомерСтроки);
		КонецЦикла;
	 КонецЕсли;
	//</22.03.2019>
	
	//<04.02.2019, +, Перенесено из ЗагрузитьДокументы_Сервер()>
	//<НЭРеализация в РТУ>
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Реализация");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		 Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Состояние("Загрузка документа Реализация № "+ ВыбранныйДокумент.Номер +" от "+ВыбранныйДокумент.Дата);
			Загрузить_НЭРеализация_Сервер(ВыбранныйДокумент.НомерСтроки);
		КонецЦикла;
	 КонецЕсли;
	//</НЭРеализация в РТУ>
	//</04.02.2019>
			
	//<НЭПередачаНаПереработку_В_ПередачаТоваров>
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Передача на переработку");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Состояние("Загрузка документа Передача на переработку № "+ ВыбранныйДокумент.Номер +" от "+ВыбранныйДокумент.Дата);
			Загрузить_НЭПередачаНаПереработку_Сервер(ВыбранныйДокумент.НомерСтроки);		
		КонецЦикла;
	КонецЕсли; //</НЭПередачаНаПереработку_В_ПередачаТоваров>
	
	//<НЭПриемИзПереработки_В_ПоступлениеИзПереработки>
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Прием из переработки");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		
		//<Проверка заполнения на форме входящих данных>
		Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.СтатьяЗатратМатериалыДляПоступлениеУслугИзПереработки) Тогда
			Сообщение = Новый СообщениеПользователю;
			//Сообщение.ПутьКДанным= "ВнешниеОбработки.ОбменДанными.СтатьяЗатратУслугиДляПоступлениеУслугИзПереработки";
			Сообщение.Поле="СтатьяЗатратМатериалыДляПоступлениеУслугИзПереработки";
			Сообщение.Текст = "Поступление услуг из переработки: не указана статья затрат для использованных материалов";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.СтатьяЗатратУслугиДляПоступлениеУслугИзПереработки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле="СтатьяЗатратУслугиДляПоступлениеУслугИзПереработки";
			Сообщение.Текст = "Поступление услуг из переработки: не указана статья затрат для полученных услуг по переработке";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.СчетЗатратДляПоступлениеУслугИзПереработки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле="СчетЗатратДляПоступлениеУслугИзПереработки";
			Сообщение.Текст = "Поступление услуг из переработки: не указан счет учета затрат";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.ДопСввоНомерВхДокПоступлениеИзПереработки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле="ДопСввоНомерВхДокПоступлениеИзПереработки";
			Сообщение.Текст = "Не указано свойство Номер входящего документа";
			Сообщение.Сообщить();
			Возврат;	
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.ДопСввоНомерВхДокПоступлениеИзПереработки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле="ДопСввоДатаВхДокПоступлениеИзПереработки";
			Сообщение.Текст = "Не указано свойство Дата входящего документа";
			Сообщение.Сообщить();
			Возврат;	
		КонецЕсли;	
			
		Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.НомГруппаЗатратДляПоступлениеУслугИзПереработки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле="МВЗдляПоступлениеУслугИзПереработки";
			Сообщение.Текст = "Поступление услуг из переработки: не указана номенклатурная группа учета затрат";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		//<Проверка заполнения на форме входящих данных>
		
		Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Состояние("Загрузка документа Прием из переработки № "+ ВыбранныйДокумент.Номер +" от "+ВыбранныйДокумент.Дата);
			Загрузить_НЭПриемИзПереработки_Сервер(ВыбранныйДокумент.НомерСтроки);		
		КонецЦикла;

	КонецЕсли; //</НЭПриемИзПереработки_В_ПоступлениеИзПереработки>
	
	//<НЭПеремещение_В_ПеремещениеТоваров>
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Перемещение");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Состояние("Загрузка документа Перемещение № "+ ВыбранныйДокумент.Номер +" от "+ВыбранныйДокумент.Дата);
			Загрузить_НЭПеремещение_Сервер(ВыбранныйДокумент.НомерСтроки);		
		КонецЦикла;
	КонецЕсли; //</НЭПеремещение_В_ПеремещениеТоваров>

	//<НЭДоработка_В_ПостплениеДопРасходов>
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Доработка");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		//<Проверка заполнения на форме входящих данных>
		Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.СтатьяЗатратДляПТУкакДоработка) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле="УслугаДорабокиКакНоменклатура";
			Сообщение.Текст = "Доработка как ПТУ, а не поступление доп. расходов: не указана статья затрат";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		//</Проверка заполнения на форме входящих данных>  
		
		ВыбранныеНомераСтрок = Новый Массив();
		Если ВыбранныеДокументы.Количество()>0 Тогда      
			ВыбранныеНомераСтрок = Новый Массив();
			Для Каждого i Из ВыбранныеДокументы Цикл
				ВыбранныеНомераСтрок.Добавить(i.НомерСтроки);	
			КонецЦикла;

			//Загрузить_НЭПередачаНаХранение_Сначала(ВыбранныеНомераСтрок);
			Загрузить_НЭДоработка_Сервер_Сначала(ВыбранныеНомераСтрок);
		КонецЕсли; 
	
		

		//Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
		//	Загрузить_НЭДоработка_Сервер(ВыбранныйДокумент.НомерСтроки);		
		//КонецЦикла;
	КонецЕсли; //</НЭДоработка_В_ПоступлениеДопРасходов>
	
	 //<НЭРазукомплектация_В_ОперацияБух>
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Разукомплектация");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Состояние("Загрузка документа Разукомплектация № "+ ВыбранныйДокумент.Номер +" от "+ВыбранныйДокумент.Дата);
			Загрузить_НЭРазукомплектация_Сервер(ВыбранныйДокумент.НомерСтроки);		
		КонецЦикла;
	КонецЕсли; //</НЭРазукомплектация_В_ОперацияБух>
	
	 //<НЭРазукомплектация_В_Доукомплектацию>
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", 			Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", 	"Доукомплектация");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		Если Не ЗначениеЗаполнено(Объект.ПоступлениеМатериаловКомплектации) Тогда
			Сообщить("Не выбрано поступление материалов");
			Возврат;
		КонецЕсли;
		Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Состояние("Загрузка документа Разукомплектация № "+ ВыбранныйДокумент.Номер +" от "+ВыбранныйДокумент.Дата);
			Загрузить_НЭДоукомплектация_Сервер(ВыбранныйДокумент.НомерСтроки);		
		КонецЦикла;
	КонецЕсли; //</НЭРазукомплектация_В_ОперацияБух>

	//Передача на комиссию
	//---------------------
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Передача на комиссию");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);  
	ВыбранныеНомераСтрок = Новый Массив();
	Если ВыбранныеДокументы.Количество()>0 Тогда      
		ВыбранныеНомераСтрок = Новый Массив();
		Для Каждого i Из ВыбранныеДокументы Цикл
			ВыбранныеНомераСтрок.Добавить(i.НомерСтроки);	
		КонецЦикла;

		Загрузить_НЭПередачаНаХранение_Сначала(ВыбранныеНомераСтрок);	
	КонецЕсли; 
	
	//Отчет комиссионера
	//---------------------
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Отчет комиссионера");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		
		Если Не ЗначениеЗаполнено(Объект.НомГруппаПродажаЧерезКомиссию) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Поле="НомГруппаПродажаЧерезКомиссию";
			Сообщение.Текст = "Отчет комиссионера о продажах: не указана номенклатурная группа";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ВыбранныеНомераСтрок = Новый Массив();
		Для Каждого i Из ВыбранныеДокументы Цикл
			ВыбранныеНомераСтрок.Добавить(i.НомерСтроки);
		КонецЦикла; 
		Загрузить_НЭОтчетАгента_Сначала(ВыбранныеНомераСтрок);	
	КонецЕсли; 

	//возврат от комиссионера
	//---------------------
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);
	ПараметрыОтбора.Вставить("ВидДокумента", "Возврат с комиссии");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда		
		Для Каждого ВыбранныйДокумент Из ВыбранныеДокументы Цикл
			Состояние("Возврат с комиссии № "+ ВыбранныйДокумент.Номер +" от "+ВыбранныйДокумент.Дата);
			Загрузить_НЭСнятиеИзХранения(ВыбранныйДокумент.НомерСтроки);		
		КонецЦикла;
	КонецЕсли; 

	Если ЭтаФорма.Объект.СписокВыполнено.Количество()>0 Тогда
		ТабДокСписокВыполнено = Новый ТабличныйДокумент();	
		ЗаполнитьТабличныйДокумент(ТабДокСписокВыполнено,"Протокол загрузки", ЭтаФорма.Объект.СписокВыполнено);
		ТабДокСписокВыполнено.Показать("Протокол загрузки");		
	КонецЕсли;
	
	Если ЭтаФорма.Объект.СписокОшибок.Количество()>0 Тогда
		ТабДокСписокВыполнено = Новый ТабличныйДокумент();	
		ЗаполнитьТабличныйДокумент(ТабДокСписокВыполнено,"Протокол ошибок", ЭтаФорма.Объект.СписокОшибок);
		ТабДокСписокВыполнено.Показать("Протокол ошибок");		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭРеализация_Сервер(НомерСтрокиТЧ)
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭРеализация_В_РТУ_Новая(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура Загрузить_ГазНЭЗакупка_Сервер(НомерСтрокиТЧ)
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.ГазНЭЗакупка_В_ПТУ_Новая(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭЗакупка_Сервер(НомерСтрокиТЧ)
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭЗакупка_В_ПТУ_Новая(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭПередачаНаПереработку_Сервер(НомерСтрокиТЧ)
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭПередачаНаПереработку_В_ПередачаТоваров(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭПеремещение_Сервер(НомерСтрокиТЧ)
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭПеремещение_В_ПеремещениеТоваров(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭДоработка_Сервер_Сначала(ВыбранныеДокументы)     
	Если ВыбранныеДокументы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	БазаИсточник = ПолучитьПодключениеБД();	
	Для Каждого i Из ВыбранныеДокументы Цикл
			Загрузить_НЭДоработка_Сервер(i, БазаИсточник);
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура Загрузить_НЭДоработка_Сервер(НомерСтрокиТЧ, БазаИсточник)
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭДоработка_В_ПоступлениеДопРасходов(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭПриемИзПереработки_Сервер(НомерСтрокиТЧ)
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭПриемИзПереработки_В_ПоступлениеИзПереработки(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭРазукомплектация_Сервер(НомерСтрокиТЧ)
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭРазукомплектация_В_ОперацияБух(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭДоукомплектация_Сервер(НомерСтрокиТЧ)
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭДоукомплектация_В_Доукомплектация(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры


&НаСервере
Процедура Загрузить_НЭПередачаНаХранение_Сначала(ВыбранныеДокументы) 
	Если ВыбранныеДокументы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	БазаИсточник = ПолучитьПодключениеБД();	
	Для Каждого i Из ВыбранныеДокументы Цикл
			Загрузить_НЭПередачаНаХранение(i, БазаИсточник);		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭПередачаНаХранение(НомерСтрокиТЧ, БазаИсточник)
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭПередачаНаХранение_В_РеализацияКомиссия(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура Загрузить_НЭОтчетАгента_Сначала(ВыбранныеДокументы) Экспорт     
	Если ВыбранныеДокументы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	БазаИсточник = ПолучитьПодключениеБД();	
	Для Каждого i Из ВыбранныеДокументы Цикл
		Загрузить_НЭОтчетАгента(i, БазаИсточник);
	КонецЦикла;
КонецПроцедуры  

&НаСервере
Процедура Загрузить_НЭОтчетАгента(НомерСтрокиТЧ, БазаИсточник) Экспорт
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭОтчетАгента_В_ОтчетКомиссионераОПродажах(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

Процедура Загрузить_НЭСнятиеИзХранения(НомерСтрокиТЧ) Экспорт
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ЭтаОбработка.НЭСнятиеИзХранения_В_ВозвратТоваровОтПокупателя(БазаИсточник, НомерСтрокиТЧ);
КонецПроцедуры

&НаСервере
Процедура ПоказатьСписокДокументов_Сервер(НачалоПериода, КонецПериода)
	Объект.ТЧ.Очистить();
	
	БИ = ПолучитьПодключениеБД();	
	Если БИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	БИ_Запрос = БИ.NewObject("Запрос");
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	РегистрацияИзменений.Документ КАК Документ,
	|	РегистрацияИзменений.Документ.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоработка)
	|			ТОГДА РегистрацияИзменений.Документ.ДокНомер
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭЗакупка)
	|			ТОГДА РегистрацияИзменений.Документ.ВхНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерПеч,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоработка)
	|			ТОГДА РегистрацияИзменений.Документ.ДокДата
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПриемИзПереработки)
	|			ТОГДА РегистрацияИзменений.Документ.ВхДата
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭЗакупка)
	|			ТОГДА ВЫБОР
	|					КОГДА РегистрацияИзменений.Документ.ВхДата = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА РегистрацияИзменений.Документ.Дата
	|					ИНАЧЕ РегистрацияИзменений.Документ.ВхДата
	|				КОНЕЦ
	|		ИНАЧЕ РегистрацияИзменений.Документ.Дата
	|	КОНЕЦ КАК Дата,
	|	ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) КАК ТипЗначенияИсточника,
	|	РегистрацияИзменений.Документ.Холдер.Наименование КАК НаименованиеОрганизации,
	|	РегистрацияИзменений.Выгружен КАК Выгружен,
	|	РегистрацияИзменений.Модифицирован КАК Модифицирован,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.ГАЗНЭЗакупка)
	|			ТОГДА ""ГАЗНЭЗакупка""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭЗакупка)
	|			ТОГДА ""НЭЗакупка""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРеализация)
	|			ТОГДА ""НЭРеализация""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПеремещение)
	|			ТОГДА ""НЭПеремещение""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаПереработку)
	|			ТОГДА ""НЭПередачаНаПереработку""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПриемИзПереработки)
	|			ТОГДА ""НЭПриемИзПереработки""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоработка)
	|			ТОГДА ""НЭДоработка""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.ДоговорТЭФЛ)
	|			ТОГДА ""ДоговорТЭФЛ""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРазукомплектация)
	|			ТОГДА ""НЭРазукомплектация""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоукомплектация)
	|			ТОГДА ""НЭДоукомплектация""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаХранение)
	|			ТОГДА ""НЭПередачаНаХранение""	
	|		ИНАЧЕ ""Другое""
	|	КОНЕЦ КАК ТипЗначенияСсылкиДокументаИсточникаСтрокой,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.ГАЗНЭЗакупка)
	|			ТОГДА ""Закупка ГАЗ""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭЗакупка)
	|			ТОГДА ""Закупка""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРеализация)
	|			ТОГДА ""Реализация""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПеремещение)
	|			ТОГДА ""Перемещение""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаПереработку)
	|			ТОГДА ""Передача на переработку""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПриемИзПереработки)
	|			ТОГДА ""Прием из переработки""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоработка)
	|			ТОГДА ""Доработка""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРазукомплектация)
	|			ТОГДА ""Разукомплектация""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоукомплектация)
	|			ТОГДА ""Доукомплектация""
	|		КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаХранение)
	|			ТОГДА ""Передача на комиссию""
	|		ИНАЧЕ ""Другое""
	|	КОНЕЦ КАК НаименованиеВидаДокумента
	|ИЗ
	|	РегистрСведений.ДокументыДляВыгрузкиБух КАК РегистрацияИзменений
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоработка)
	|				ТОГДА РегистрацияИзменений.Документ.ДокДата
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПриемИзПереработки)
	|				ТОГДА РегистрацияИзменений.Документ.ВхДата
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭЗакупка)
	|				ТОГДА ВЫБОР
	|						КОГДА РегистрацияИзменений.Документ.ВхДата = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА РегистрацияИзменений.Документ.Дата
	|						ИНАЧЕ РегистрацияИзменений.Документ.ВхДата
	|					КОНЕЦ
	|			ИНАЧЕ РегистрацияИзменений.Документ.Дата
	|		КОНЕЦ МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ)
	|	И РегистрацияИзменений.Документ.Холдер.ИНН = &ИНН
	|	И (РегистрацияИзменений.Выгружен = ЛОЖЬ
	|			ИЛИ РегистрацияИзменений.Модифицирован = ИСТИНА)
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.ГАЗНЭЗакупка)
	|				ТОГДА ИСТИНА
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭЗакупка)
	|				ТОГДА ИСТИНА
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРеализация)
	|				ТОГДА ИСТИНА
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПеремещение)
	|				ТОГДА ИСТИНА
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаПереработку)
	|				ТОГДА ИСТИНА
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПриемИзПереработки)
	|				ТОГДА ИСТИНА
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоработка)
	|				ТОГДА ИСТИНА
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРазукомплектация)
	|				ТОГДА ИСТИНА
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоукомплектация)
	|				ТОГДА ИСТИНА
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаХранение)
	|				ТОГДА ИСТИНА И РегистрацияИзменений.Документ.Договор.ЭтоАгентский = ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрацияИзменений.Документ,
	|	РегистрацияИзменений.Документ.Номер,
	|	"""",
	|	РегистрацияИзменений.Документ.Дата,
	|	ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ),
	|	РегистрацияИзменений.Документ.Холдер.Наименование,
	|	РегистрацияИзменений.Выгружен,
	|	РегистрацияИзменений.Модифицирован,
	|	""НЭОтчетАгента"",
	|	""Отчет комиссионера""
	|ИЗ
	|	РегистрСведений.ДокументыДляВыгрузкиБух КАК РегистрацияИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
	|		ПО РегистрацияИзменений.Документ.ДокРасход = ДвижениеНЭ.Регистратор И ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ.ДокРасход)=ТИП(Документ.НЭРеализация)
	|ГДЕ
	|	РегистрацияИзменений.Документ.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ)
	|	И ДвижениеНЭ.Собственник.ИНН = &ИНН
	|	И (РегистрацияИзменений.Выгружен = ЛОЖЬ
	|			ИЛИ РегистрацияИзменений.Модифицирован = ИСТИНА)
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭОтчетАгента)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РегистрацияИзменений.Документ,
	|		РегистрацияИзменений.Документ.Номер,
	|		"""",
	|		РегистрацияИзменений.Документ.Дата,
	|		ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ),
	|		РегистрацияИзменений.Документ.Холдер.Наименование,
	|		РегистрацияИзменений.Выгружен,
	|		РегистрацияИзменений.Модифицирован,
	|		""НЭСнятиеИзХранения"",
	|		""Возврат с комиссии""
	|	ИЗ
	|		РегистрСведений.ДокументыДляВыгрузкиБух КАК РегистрацияИзменений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
	|			ПО РегистрацияИзменений.Документ = ДвижениеНЭ.Регистратор
	|	ГДЕ
	|		РегистрацияИзменений.Документ.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ)
	|		И ДвижениеНЭ.Собственник.ИНН = &ИНН
	|		И (РегистрацияИзменений.Выгружен = ЛОЖЬ
	|			ИЛИ РегистрацияИзменений.Модифицирован = ИСТИНА)
	|		И ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭСнятиеИзХранения)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ";
	
	Если ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов = 1 Тогда // Все документы
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(РегистрацияИзменений.Выгружен = ЛОЖЬ
		|			ИЛИ РегистрацияИзменений.Модифицирован = ИСТИНА)", "ИСТИНА");		
	ИначеЕсли ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов =2 Тогда // Все невыгруженные
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(РегистрацияИзменений.Выгружен = ЛОЖЬ
		|			ИЛИ РегистрацияИзменений.Модифицирован = ИСТИНА)", "(РегистрацияИзменений.Выгружен = ЛОЖЬ И РегистрацияИзменений.Модифицирован = ЛОЖЬ)");	
	ИначеЕсли ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов =3 Тогда // Все выгруженные (измененные и не измененные в ОУ после последнего обмена)
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(РегистрацияИзменений.Выгружен = ЛОЖЬ
		|			ИЛИ РегистрацияИзменений.Модифицирован = ИСТИНА)", "(РегистрацияИзменений.Выгружен = ИСТИНА И РегистрацияИзменений.Модифицирован = ЛОЖЬ) ИЛИ (РегистрацияИзменений.Выгружен = ЛОЖЬ И РегистрацияИзменений.Модифицирован = ИСТИНА) ИЛИ (РегистрацияИзменений.Выгружен = ИСТИНА И РегистрацияИзменений.Модифицирован = ИСТИНА)");	
	ИначеЕсли ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов =4 Тогда // Выгруженные, но не измененные в ОУ после последнего обмена
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(РегистрацияИзменений.Выгружен = ЛОЖЬ
		|			ИЛИ РегистрацияИзменений.Модифицирован = ИСТИНА)", "(РегистрацияИзменений.Выгружен = ИСТИНА И РегистрацияИзменений.Модифицирован = ЛОЖЬ) ИЛИ (РегистрацияИзменений.Выгружен = ИСТИНА И РегистрацияИзменений.Модифицирован = ИСТИНА)");	
	ИначеЕсли ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов =5 Тогда //Выгруженные и измененные в ОУ после последнего обмена
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(РегистрацияИзменений.Выгружен = ЛОЖЬ
		|			ИЛИ РегистрацияИзменений.Модифицирован = ИСТИНА)", "(РегистрацияИзменений.Выгружен = ЛОЖЬ И РегистрацияИзменений.Модифицирован = ИСТИНА)");	
	КонецЕсли;
	
	Если НЕ ЭтаФорма.ПоказатьНЭЗакупка Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭЗакупка)
		|				ТОГДА ИСТИНА", "КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭЗакупка)
		|				ТОГДА ЛОЖЬ");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.ГАЗНЭЗакупка)
		|				ТОГДА ИСТИНА", "КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.ГАЗНЭЗакупка)
		|				ТОГДА ЛОЖЬ");
		
	КонецЕсли;
	
	Если Не ЭтаФорма.ПоказатьНЭРеализация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРеализация)
		|				ТОГДА ИСТИНА", "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРеализация)
		|				ТОГДА ЛОЖЬ");
	КонецЕсли;
	
	Если Не ЭтаФорма.ПоказатьНЭПеремещение Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПеремещение)
		|				ТОГДА ИСТИНА", "КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПеремещение)
		|				ТОГДА ЛОЖЬ");
	КонецЕсли;
	
	Если Не ЭтаФорма.ПоказатьНЭПередачаНаПереработку Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаПереработку)
		|				ТОГДА ИСТИНА", "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаПереработку)
		|				ТОГДА ЛОЖЬ");
	КонецЕсли;

	Если Не ЭтаФорма.ПоказатьНЭПриемИзПереработки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПриемИзПереработки)
	|				ТОГДА ИСТИНА", "КОГДА ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПриемИзПереработки)
	|				ТОГДА ЛОЖЬ");
	КонецЕсли;

	Если Не ЭтаФорма.ПоказатьНЭДоработка Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоработка)
	|				ТОГДА ИСТИНА", "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоработка)
	|				ТОГДА ЛОЖЬ");
	КонецЕсли;
	
	Если Не ЭтаФорма.ПоказатьНЭРазукомплектация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРазукомплектация)
	|				ТОГДА ИСТИНА", "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭРазукомплектация)
	|				ТОГДА ЛОЖЬ");
	КонецЕсли;
	
	Если Не ЭтаФорма.ПоказатьНЭДоукомплектация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоукомплектация)
	|				ТОГДА ИСТИНА", "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭДоукомплектация)
	|				ТОГДА ЛОЖЬ");
	КонецЕсли;

	Если Не ЭтаФорма.ПоказатьНЭПередачаНаХранение Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаХранение)
	|				ТОГДА ИСТИНА", "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭПередачаНаХранение)
	|				ТОГДА ЛОЖЬ");
	КонецЕсли;
	
	Если Не ЭтаФорма.ПоказатьНЭПередачаНаХранение Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭСнятиеИзХранения)
	|				ТОГДА ИСТИНА", "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭСнятиеИзХранения)
	|				ТОГДА ЛОЖЬ");
	КонецЕсли;
	
	Если Не ЭтаФорма.ПоказатьНЭОтчетАгента Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭОтчетАгента)
	|				ТОГДА ИСТИНА", "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭОтчетАгента)
	|				ТОГДА ЛОЖЬ");
	КонецЕсли;
	
	Если Не ЭтаФорма.ПоказатьНЭПриемОтХранителя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭСнятиеИзХранения)
	|					ТОГДА ИСТИНА", "ТИПЗНАЧЕНИЯ(РегистрацияИзменений.Документ) = ТИП(Документ.НЭСнятиеИзХранения)
	|				ТОГДА ЛОЖЬ");
	КонецЕсли;

	БИ_Запрос.Text = ТекстЗапроса;

	БИ_Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	БИ_Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	БИ_Запрос.УстановитьПараметр("ИНН", СокрЛП(ЭтаФорма.Объект.Организация.ИНН));
	
	БИ_РезультатЗапроса = БИ_Запрос.Выполнить();
	БИ_Выборка = БИ_РезультатЗапроса.Выбрать();
	Пока БИ_Выборка.Следующий() Цикл
		Нов									= Объект.ТЧ.Добавить();
		Нов.ВидДокумента 					= БИ_Выборка.НаименованиеВидаДокумента; // Это реквизит объекта, но не внешней обработки
		Нов.Номер 							= БИ_Выборка.Номер;
		Нов.НомерПеч 						= БИ_Выборка.НомерПеч;
		Нов.Дата 							= БИ_Выборка.Дата;
		Нов.УжеВыгружался 					= БИ_Выборка.Выгружен;
		Нов.Модифицирован 					= БИ_Выборка.Модифицирован;
		Нов.ИдВидаДокумента 				= БИ_Выборка.ТипЗначенияСсылкиДокументаИсточникаСтрокой;
		Нов.ГУИДДокументаИсточникаСтрокой 	= БИ.XMLСтрока(БИ_Выборка.Документ); 
		Нов.НавСсылка						= Объект.ВэбСервер+БИ.ПолучитьНавигационнуюСсылку(БИ_Выборка.Документ);
	КонецЦикла;
	
	Если Объект.ТЧ.Количество()>0  Тогда
		Если Объект.ЭтоУфа Тогда
			ПоказатьСписокДокументов_Сервер_ПереопределяемыйУфа(БИ);
		КонецЕсли;
	КонецЕсли; 
	
	РазорватьПодключениеБД(БИ);
КонецПроцедуры

// Показать не все перемещения, а только Уфа-Челябинск и Челябинск-Уфа
Процедура ПоказатьСписокДокументов_Сервер_ПереопределяемыйУфа(БазаИсточник)
	Уфа_УдалитьПеремещенияНеМежду_Уфа_Челябинск_Сервер(БазаИсточник);
КонецПроцедуры	

Процедура Уфа_УдалитьПеремещенияНеМежду_Уфа_Челябинск_Сервер(БазаИсточник)	
	
	Если Не ЭтаФорма.ПоказатьНЭПеремещение Тогда
		Возврат;
	КонецЕсли;	
	
	БазаИсточник_СсылкиНаДокументыИсточники = БазаИсточник.NewObject("Массив");
	Для Каждого СтрокаТЧ Из ЭтаФорма.Объект.ТЧ Цикл
			БазаИсточник_ГУИД_ДокументаИсточника = БазаИсточник.NewObject("УникальныйИдентификатор", СтрокаТЧ.ГУИДДокументаИсточникаСтрокой);
			БазаИсточник_ДокументСсылка = БазаИсточник.Документы[СтрокаТЧ.ИдВидаДокумента].ПолучитьСсылку(БазаИсточник_ГУИД_ДокументаИсточника);
			
			БазаИсточник_СсылкиНаДокументыИсточники.Добавить(БазаИсточник_ДокументСсылка); 
	КонецЦикла;
	Если БазаИсточник_СсылкиНаДокументыИсточники.Количество()= 0 Тогда
		Возврат
	КонецЕсли;
	
	БазаИсточник_Запрос = БазаИсточник.NewObject("Запрос");
	ЗапросТекст =
	 "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ДвижениеНЭ.Регистратор,
	 |	ВЫБОР
	 |		КОГДА ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	 |			ТОГДА 1
	 |		КОГДА ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	 |			ТОГДА 2
	 |	КОНЕЦ КАК ВидДвиженияЧислом,
	 |	ВЫБОР
	 |		КОГДА ДвижениеНЭ.МестоХранения.Код В (#КодСкладаЧелябинск)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК ОтправительЧелябинск
	 |ПОМЕСТИТЬ ВТ_РАСХОД
	 |ИЗ
	 |	РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
	 |ГДЕ
	 |	ДвижениеНЭ.Регистратор В(&Ссылка)
	 |	И ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	 |	И ДвижениеНЭ.Холдер.ИНН = &ИНН
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ДвижениеНЭ.Регистратор,
	 |	ВЫБОР
	 |		КОГДА ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	 |			ТОГДА 1
	 |		КОГДА ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	 |			ТОГДА 2
	 |	КОНЕЦ КАК ВидДвиженияЧислом,
	 |	ВЫБОР
	 |		КОГДА ДвижениеНЭ.МестоХранения.Код В (#КодСкладаЧелябинск)
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК ПолучательЧелябинск
	 |ПОМЕСТИТЬ ВТ_ПРИХОД
	 |ИЗ
	 |	РегистрНакопления.ДвижениеНЭ КАК ДвижениеНЭ
	 |ГДЕ
	 |	ДвижениеНЭ.Регистратор В(&Ссылка)
	 |	И ДвижениеНЭ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	 |	И ДвижениеНЭ.Холдер.ИНН = &ИНН
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ВТ_ПРИХОД.Регистратор КАК Ссылка,
	 |	ВТ_РАСХОД.ОтправительЧелябинск,
	 |	ВТ_ПРИХОД.ПолучательЧелябинск
	 |ИЗ
	 |	ВТ_ПРИХОД КАК ВТ_ПРИХОД
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РАСХОД КАК ВТ_РАСХОД
	 |		ПО (ВТ_РАСХОД.Регистратор = ВТ_ПРИХОД.Регистратор)
	 |ГДЕ 
	 |	(ВТ_РАСХОД.ОтправительЧелябинск И ВТ_ПРИХОД.ПолучательЧелябинск) 
	 |ИЛИ 
	 |	(НЕ ВТ_РАСХОД.ОтправительЧелябинск И НЕ ВТ_ПРИХОД.ПолучательЧелябинск)";


	//16.11.2016	
	//БазаИсточник_Запрос.УстановитьПараметр("КодСкладаЧелябинск", "000000040");
	//=> теперь нужно показать перемещения и по складу Агат(Челябинск)
	
	//<12.05.2017, =>, к Челябинским складам отнесем все склады, у которых адрес г. Челябинск, ул. Механическая
	//ЗапросТекст = СтрЗаменить(ЗапросТекст, "#КодСкладаЧелябинск", """000000040"" , ""000000044""");
	//=>
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "#КодСкладаЧелябинск", " ""000000066"",""000000040"" , ""000000043"", ""000000044"",  ""000000045"" ");
	//	"000000066", "Челябинск (ВТБ_Ф)"
	//	"000000040", "Челябинск"
	// 	"000000043", "Челябинск (б/у)"
	//  "000000044", "Агат (Челябинск)"
	//	"000000045", "Челябинск (доработка)"
	//</12.05.2017>
	
	//БазаИсточник_Запрос.УстановитьПараметр("КодСкладаЧелябинск", Склады);
	
	
	БазаИсточник_Запрос.УстановитьПараметр("ИНН", ЭтаФорма.Объект.Организация.ИНН);
	
	БазаИсточник_Запрос.Текст = ЗапросТекст;
	
	БазаИсточник_Запрос.УстановитьПараметр("Ссылка", БазаИсточник_СсылкиНаДокументыИсточники);
	БазаИсточник_РезультатЗапроса = БазаИсточник_Запрос.Выполнить();
	Если БазаИсточник_РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокКУдалению = Новый Массив();

	БазаИсточник_Выборка = БазаИсточник_РезультатЗапроса.Выбрать();
	
	Пока БазаИсточник_Выборка.Следующий() Цикл
		
		ГУИДДокументаИсточникаСтрокой =  БазаИсточник.XMLСтрока(БазаИсточник_Выборка.Ссылка);
		Отбор = Новый Структура("ГУИДДокументаИсточникаСтрокой", ГУИДДокументаИсточникаСтрокой);
		НайденныеСтроки = ЭтаФорма.Объект.ТЧ.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			МассивСтрокКУдалению.Добавить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	РазорватьПодключениеБД(БазаИсточник);
	
	Для Каждого СтрокаТЧ Из МассивСтрокКУдалению Цикл
		ЭтаФорма.Объект.ТЧ.Удалить(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

Процедура Уфа_УдалитьПоступлениеДопРасходовОтЛуидорГарантияУфа_Сервер()
	
КонецПроцедуры

//************** Перенести в модуль объекта ***************//
 
&НаСервере 
Функция ПолучитьПодключениеБД()       
	
	Рез = "";
	Попытка      
		Рез = ПолучитьИзВременногоХранилища("mycomconnect")
	Исключение
	КонецПопытки; 
	
	Доступно = ТипЗнч(Рез)=Тип("Структура");
	Если Доступно Тогда
		Возврат Рез.Соединение
	КонецЕсли;
	
	Если ЭтаФорма.ТестоваяОУ Тогда
		  ПараметрыСоединения = "File=""D:\ИБ_1С8x\ОУ_УФА"";Usr=""Кошелев Сергей Сергеевич"";Pwd="""";"; // для файловой базы
	Иначе
		 ПараметрыСоединения = "Srvr=""MainAPPM"";Ref=""asc_oper"";"   // для серверной базы	
	КонецЕсли;
	
	V82COMConnector = Новый COMОбъект("V83.COMConnector");
	Попытка 
		 Рез = V82COMConnector.Connect(ПараметрыСоединения);   
		 //ПоместитьВоВременноеХранилище(Новый Структура("Соединение",  Рез), "mycomconnect");		 
		 Возврат Рез;
	 Исключение
		 Сообщить ("Ошибка подключения! "+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		 Возврат Неопределено;
	 КонецПопытки;
 КонецФункции
 
&НаСервере 
Функция РазорватьПодключениеБД(КомСоединитель)
КонецФункции

 &НаСервере
 Процедура ЗагрузитьДокументы_Сервер()
	БазаИсточник = ПолучитьПодключениеБД();	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Выбор", Истина);

	//<ГАЗНЭЗакупка в ПТУ>
	ПараметрыОтбора.Вставить("ВидДокумента", "Закупка ГАЗ");
	ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	Если ВыбранныеДокументы.Количество()>0 Тогда
		//Состояние("Обработка документов Закупка ГАЗ");
		ЭтаОбработка.ГАЗНЭЗакупка_В_ПТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбранныеДокументы);
	Иначе
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = "Нет выбранных документов типа Накладная закупки ГАЗ...";
		//Сообщение.Сообщить();
	КонецЕсли;
	//</ГАЗНЭЗакупка в ПТУ>
	
	//<22.03.2019, //, Перенесено>
	//<НЭЗакупка в ПТУ>
	//ПараметрыОтбора.Вставить("ВидДокумента", "Закупка");
	//ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	//Если ВыбранныеДокументы.Количество()>0 Тогда
	//	//Состояние("Обработка документов Закупка");
	//	ЭтаОбработка.НЭЗакупка_В_ПТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбранныеДокументы);
	//Иначе
	//	//Сообщение = Новый СообщениеПользователю;
	//	//Сообщение.Текст = "Нет выбранных документов типа Закупка НЭ...";
	//	//Сообщение.Сообщить();
	//КонецЕсли;
	//</НЭЗакупка в ПТУ>
	//</22.03.2019>

	//<04.02.2019, //, Перенесено>
	//<НЭРеализация в РТУ>
	// ПараметрыОтбора.Вставить("ВидДокумента", "Реализация");
	// ВыбранныеДокументы = ЭтаФорма.Объект.ТЧ.НайтиСтроки(ПараметрыОтбора);
	// Если ВыбранныеДокументы.Количество()>0 Тогда
	//  	//Состояние("Обработка документов Реализация");
	//	    //ЭтаОбработка.НЭЗакупка_В_ПТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбранныеДокументы);
	//	 ЭтаОбработка.НЭРеализация_В_РТУ_ЗагрузитьВыбранныеДокументы(БазаИсточник, ВыбранныеДокументы);
	// Иначе
	//  	//Сообщение = Новый СообщениеПользователю;
	//	    //Сообщение.Текст = "Нет выбранных документов типа Закупка НЭ...";
	//	    //Сообщение.Сообщить();
	// КонецЕсли;
	//</НЭРеализация в РТУ>
	//</04.02.2019, //, Перенесено>

КонецПроцедуры

 &НаСервере
 Процедура ЗаполнитьТабличныйДокумент(ТабДок, ВыбЗаголовок, СписокЗнач)
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	Макет = ЭтаОбработка.ПолучитьМакет("Макет");
	_Шапка = Макет.ПолучитьОбласть("Шапка");
	_Строка = Макет.ПолучитьОбласть("Строка");
	_Шапка.Параметры.печЗаголовок = СокрЛП(выбЗаголовок);
	ТабДок.Вывести(_Шапка);
	Для Каждого ТекЭлемент Из СписокЗнач Цикл
		_Строка.Параметры.печОписание = ?(ПустаяСтрока(ТекЭлемент.Представление),СокрЛП(ТекЭлемент.Значение),СокрЛП(ТекЭлемент.Представление));
		_Строка.Параметры.печЭлемент = ТекЭлемент.Значение;
		ТабДок.Вывести(_Строка);
	КонецЦикла;
	ТабДок.ТолькоПросмотр=Истина;	 
КонецПроцедуры
	
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Сообщить("Привет");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеДокументы(Команда)
	
	Для Каждого Эл Из ЭтаФорма.Объект.ТЧ Цикл
		Если Эл.ВидДокумента="Закупка" И  ЭтаФорма.ВыбратьНЭЗакупка Тогда
			Эл.Выбор=Истина
		КонецЕсли;
		Если Эл.ВидДокумента="Реализация" И  ЭтаФорма.ВыбратьНЭРеализация Тогда
			Эл.Выбор=Истина
		КонецЕсли;
		Если Эл.ВидДокумента="Доработка" И  ЭтаФорма.ВыбратьНЭДоработка Тогда
			Эл.Выбор=Истина
		КонецЕсли;
		Если Эл.ВидДокумента="Перемещение" И  ЭтаФорма.ВыбратьНЭПеремещение Тогда
			Эл.Выбор=Истина
		КонецЕсли;
		Если Эл.ВидДокумента="Передача на переработку" И  ЭтаФорма.ВыбратьНЭПередачаНаПереработку Тогда
			Эл.Выбор=Истина
		КонецЕсли;
		Если Эл.ВидДокумента="Прием из переработки" И  ЭтаФорма.ВыбратьНЭПриемИзПереработки Тогда
			Эл.Выбор=Истина
		КонецЕсли;
		Если Эл.ВидДокумента="Разукомплектация" И  ЭтаФорма.ВыбратьНЭПриемИзПереработки Тогда
			Эл.Выбор=Истина
		КонецЕсли;

	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыборДокументов(Команда)
	Для Каждого Эл Из ЭтаФорма.Объект.ТЧ Цикл
			Эл.Выбор=Ложь
	КонецЦикла;
	ЭтаФорма.ВыбратьНЭДоработка=Ложь;
	ЭтаФорма.ВыбратьНЭЗакупка=Ложь;
	ЭтаФорма.ВыбратьНЭПередачаНаПереработку=Ложь;
	ЭтаФорма.ВыбратьНЭПеремещение=Ложь;
	ЭтаФорма.ВыбратьНЭПриемИзПереработки=Ложь;
	ЭтаФорма.ВыбратьНЭРеализация=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭРеализацияПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОчиститьВыбор()
	Для Каждого Эл Из ЭтаФорма.Объект.ТЧ Цикл
		Если Эл.ВидДокумента="Закупка ГАЗ" Тогда
			Эл.Выбор= ЭтаФорма.ВыбратьНЭЗакупка;
		КонецЕсли;
		Если Эл.ВидДокумента="Закупка" Тогда
			Эл.Выбор= ЭтаФорма.ВыбратьНЭЗакупка;
		КонецЕсли;
		Если Эл.ВидДокумента="Реализация" Тогда
			Эл.Выбор=ЭтаФорма.ВыбратьНЭРеализация
		КонецЕсли;
		Если Эл.ВидДокумента="Доработка"    Тогда
			Эл.Выбор=ЭтаФорма.ВыбратьНЭДоработка
		КонецЕсли;
		Если Эл.ВидДокумента="Перемещение"    Тогда
			Эл.Выбор=ЭтаФорма.ВыбратьНЭПеремещение
		КонецЕсли;
		Если Эл.ВидДокумента="Передача на переработку"    Тогда
			Эл.Выбор=ЭтаФорма.ВыбратьНЭПередачаНаПереработку
		КонецЕсли;
		Если Эл.ВидДокумента="Прием из переработки"    Тогда
			Эл.Выбор=ЭтаФорма.ВыбратьНЭПриемИзПереработки
		КонецЕсли;
		Если Эл.ВидДокумента = "Разукомплектация" Тогда
			Эл.Выбор=ЭтаФорма.ВыбратьНЭРазукомплектация
		КонецЕсли;
		
		Если Эл.ВидДокумента = "Передача на комиссию" Тогда
			Эл.Выбор=ЭтаФорма.ВыбратьНЭПередачаНаХранение;
		КонецЕсли;
		Если Эл.ВидДокумента = "Отчет комиссионера" Тогда
			Эл.Выбор=ЭтаФорма.ВыбратьНЭОтчетАгента;
		КонецЕсли;
		Если Эл.ВидДокумента = "Возврат с комиссии" Тогда
			Эл.Выбор=ЭтаФорма.ВыбратьНЭПриемОтХранителя;
		КонецЕсли;	
	КонецЦикла	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭЗакупкаПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭДоработкаПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭПередачаНаПереработкуПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭПриемИзПереработкиПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭПеремещениеПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭПередачаНаХранениеПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭОтчетАгентаПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭПриемОтХранителяПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК НаименованиеСправочно,
	|	ВЫБОР
	|		КОГДА Организации.Наименование ПОДОБНО &Наименование1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУфа,
	|	ВЫБОР
	|		КОГДА Организации.Наименование ПОДОБНО &Наименование2
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоМосква,
	|	ВЫБОР
	|		КОГДА Организации.Наименование ПОДОБНО &Наименование3
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКазань,
	|	ВЫБОР
	|		КОГДА Организации.Наименование ПОДОБНО &Наименование4
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТамбов,
	|	ВЫБОР
	|		КОГДА Организации.Наименование ПОДОБНО &Наименование5
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоМоскваГазконтракт,
	|	ВЫБОР
	|		КОГДА Организации.Наименование ПОДОБНО &Наименование6
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЧелябинск,
	|	ВЫБОР
	|		КОГДА Организации.Наименование ПОДОБНО &Наименование7
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЛуидорГарантияУфа
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.Наименование ПОДОБНО &Наименование1
	|			ИЛИ Организации.Наименование ПОДОБНО &Наименование2
	|			ИЛИ Организации.Наименование ПОДОБНО &Наименование3
	|			ИЛИ Организации.Наименование ПОДОБНО &Наименование4
	|			ИЛИ Организации.Наименование ПОДОБНО &Наименование5
	|			ИЛИ Организации.Наименование ПОДОБНО &Наименование6)";
	Запрос.УстановитьПараметр("Наименование1", "%Луидор-Уфа%");
	Запрос.УстановитьПараметр("Наименование2", "%ЛУИДОР-АЛЬЯНС%");
	Запрос.УстановитьПараметр("Наименование3", "%ЛУИДОР-КАЗАНЬ%");
	Запрос.УстановитьПараметр("Наименование4", "%АЗИМУТ ООО%");
	Запрос.УстановитьПараметр("Наименование5", "%ГАЗКОНТРАКТ%");
	Запрос.УстановитьПараметр("Наименование6", "%ЛУИДОРГАРАНТИЯ-ЧЕЛЯБИНСК ООО%");   
	Запрос.УстановитьПараметр("Наименование7", "%ЛуидорГарантия-Уфа%%");

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не найдена организация!");
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выгрузить();
	Если Выборка.Количество()=1 Тогда
		ЭтаФорма.Элементы.Организация.Доступность = Ложь;

		Объект.Организация 			= Выборка[0].Ссылка;
		Объект.ЭтоУфа				= Выборка[0].ЭтоУфа;
		Объект.ЭтоКазань			= Выборка[0].ЭтоКазань;
		Объект.ЭтоТамбов			= Выборка[0].ЭтоТамбов;
		Объект.ЭтоЛуидорГарантияУфа = Выборка[0].ЭтоЛуидорГарантияУфа;
	Иначе
		ЭтаФорма.Элементы.Организация.Доступность = Истина;
		
		Если ИмяПользователя()="КурносоваСА" Тогда
			Объект.ЭтоМоскваГазконтракт = Истина;
		КонецЕсли;
		
		Если ИмяПользователя()="ПетроваЮП" Тогда
			Объект.ЭтоМосква = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Спец. часть
	//Для Уфы разрешить выбор организации
	//-----------------------------------
	Если Объект.ЭтоУфа= Истина Тогда
		ЭтаФорма.Элементы.Организация.Доступность = Истина;	
	КонецЕсли;
	
	НастройкиПоУмолчанию();
КонецПроцедуры

Процедура НастройкиПоУмолчанию()              
	Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Очистить();
		
	#Region Предопределенные_значения_для_Уфы
	Если ЭтаФорма.Объект.ЭтоУфа Тогда
		ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов=1;
		
		//ЭтаФорма.Объект.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН","0273088205  ");
		ЭтаФорма.Объект.ВалютаРегламентированногоУчета 	= Константы.ВалютаРегламентированногоУчета.Получить();
		ЭтаФорма.Объект.ОсновнойСклад 					= Справочники.Склады.НайтиПоКоду("000000001");
		ЭтаФорма.Объект.ВидНоменклатуры 				= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобили");
		ЭтаФорма.Объект.ПоказатьВыгруженныеНеИзмененные	= Истина;
		
		ЭтаФорма.Объект.УчетВРазрезеСкладов				 		= Ложь;
		ЭтаФорма.Объект.ПерезаписыватьНаименованиеНоменклатуры	= Истина;
		
		
		//<Учет в разрезе подразделений>	
		ЭтаФорма.Объект.УчетВРазрезеПодразделений = Истина;
		
		#Region Поиск_обособленного_подразделения_по_ссылке
		//Поиск обособленного подразделения Челябинск Копейское шоссе по ссылке, т.к. коды в базе Бух стали не уникальны
		//---------------------------------------------------------------------------------------------------------------

		ОбособлПодрЧелябинскКопейское = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		
		que = new Query();
		que.text = 
		"SELECT
		|	ПодразделенияОрганизаций.Ссылка КАК Ref
		|FROM
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|WHERE
		|	ПодразделенияОрганизаций.ОбособленноеПодразделение = Истина";
		res = que.execute();
		cur = res.select();
		while cur.next() do
			refAsString = xmlString(cur.Ref);
			if refAsString =  "befb54a7-bb0c-11e8-80fd-00155d01270b"  then
				ОбособлПодрЧелябинскКопейское = cur.Ref;
				break;
			endif;
		enddo;	
		
		ОбособлПодрВавилово = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		que = new Query();
		que.text = 
		"SELECT
		|	ПодразделенияОрганизаций.Ссылка КАК Ref
		|FROM
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|WHERE
		|	ПодразделенияОрганизаций.ОбособленноеПодразделение = Истина";
		res = que.execute();
		cur = res.select();
		while cur.next() do
			refAsString = xmlString(cur.Ref);
			if refAsString =  "56156bd6-2dc3-11e9-8108-00155d03d40f"  then
				ОбособлПодрВавилово = cur.Ref;
				break;
			endif;
		enddo;

		
		#EndRegion
		
		ОбособлПодрЧелябинскМеханическая	= Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000009");
		
		#Область Соответстие_ТочекОформления_и_обособленных_подразделений		
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод 		= "000000008";
		НоваяСтрока.ПодразделениеПриемник 	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		НоваяСтрока.Примечание 				= "Точка оформления ""Уфа""";
				
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод 		= "000000074";
		НоваяСтрока.ПодразделениеПриемник	= ОбособлПодрВавилово;
		НоваяСтрока.Примечание 				= "Точка оформления ""Уфа-Вавилово""";
				
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод 		= "000000095";		
		НоваяСтрока.ПодразделениеПриемник 	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		НоваяСтрока.Примечание 				= "Точка оформления Уфа-Интернациональная-Эксперт";
		
		НоваяСтрока 						= Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод 		= "000000094";		
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрВавилово;
		НоваяСтрока.Примечание 				= "Уфа-Вавилово-Эксперт";

		#КонецОбласти
	
		#Область Соответствие_СкладаОУ_ОбособленномуПодразделениюБУ_Для_Уфы_Для_Поступлений
		//Это соответствие используется только при загрузке поступлений. Оно необходимо для определения
		//обособленного подразделения (напр. подразделения ВАЗ) не через точку оформления, а через склад
		
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Добавить();
		НоваяСтрока.СкладИсточникКод 		="000000105";   								
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрВавилово;
		НоваяСтрока.Примечание 				= "Склад ""Уфа Вавилово""";		
		
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Добавить();
		НоваяСтрока.СкладИсточникКод 		="000000106";   								
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрВавилово;
		НоваяСтрока.Примечание 				= "Склад ""Уфа Вавилово б/у""";			
		#КонецОбласти
		//</Учет в разрезе подразделений>

		ЭтаФорма.Объект.НоменклатураДляПТУкакДоработка = Справочники.Номенклатура.НайтиПоНаименованию("Авторабота");
		Если ЭтаФорма.Объект.НоменклатураДляПТУкакДоработка = Неопределено Тогда
			ЭтаФорма.Объект.НоменклатураДляПТУкакДоработка = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		//</Учет в разрезе автомобилей>
				
		//<Для поступления из переработки>
		ЭтаФорма.Объект.ДопСввоНомерВхДокПоступлениеИзПереработки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер вх.документа (Поступление из переработки)", Истина);
		ЭтаФорма.Объект.ДопСввоДатаВхДокПоступлениеИзПереработки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Дата вх.документа (Поступление из переработки)", Истина);
		//</Для поступления из переработки>
		
	КонецЕсли;
	
		#Область Номенклатурные_группы_Автомобилей
		Объект.НомГруппаПродажаНовыеГАЗ 	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили", 				Истина);
	    Объект.НомГруппаПродажаНовыеУАЗ 	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили УАЗ новые",		Истина);
		Объект.НомГруппаПродажаНовыеВАЗ 	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили ВАЗ новые",		Истина);
		Объект.НомГруппаПродажаНовыеФОРД 	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили ФОРД новые",		Истина);
		Объект.НомГруппаПродажаВторичные	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили вторичные", 		Истина);
		#КонецОбласти
	
	#EndRegion       
	
Если ЭтаФорма.Объект.ЭтоЛуидорГарантияУфа Тогда
		ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов=1;
		
		ЭтаФорма.Объект.ВалютаРегламентированногоУчета 			= Константы.ВалютаРегламентированногоУчета.Получить();
		ЭтаФорма.Объект.ОсновнойСклад 							= Справочники.Склады.НайтиПоКоду("000000001");
		ЭтаФорма.Объект.ВидНоменклатуры 						= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобили");
		ЭтаФорма.Объект.ПоказатьВыгруженныеНеИзмененные			= Истина;
		ЭтаФорма.Объект.УчетВРазрезеСкладов				 		= Ложь;
		ЭтаФорма.Объект.ПерезаписыватьНаименованиеНоменклатуры	= Истина;
		
		//<Учет в разрезе подразделений>	
		ЭтаФорма.Объект.УчетВРазрезеПодразделений = Истина;
		
		//Поиск обособленного подразделения Обособленное подразделение Вавилово ЛГ, т.к. коды в базе Бух стали не уникальны
		//---------------------------------------------------------------------------------------------------------------
	
		ОбособлПодрВавиловоЛГ = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Запрос = Новый Запрос("ВЫБРАТЬ Т.Ссылка КАК Ref ИЗ Справочник.ПодразделенияОрганизаций КАК Т ГДЕ Т.ОбособленноеПодразделение = ИСТИНА");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			refAsString = xmlString(Выборка.Ref);
			Если refAsString =  "307be87d-2f6a-11e9-8108-00155d03d40f"  Тогда
				ОбособлПодрВавиловоЛГ= Выборка.Ref;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
        Нов = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		Нов.ТочкаОформленияКод 		= "000000074";
		Нов.ПодразделениеПриемник	= ОбособлПодрВавиловоЛГ;    
		Нов.Примечание 				= "Точка оформления ""Уфа-Вавилово""";
	
		Нов = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		Нов.ТочкаОформленияКод 		= "000000008";
		Нов.ПодразделениеПриемник 	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Нов.Примечание 				= "Точка оформления ""Уфа""";
						
		//Это соответствие используется только при загрузке поступлений. Оно необходимо для определения
		//обособленного подразделения (напр. подразделения ВАЗ) не через точку оформления, а через склад			
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Добавить();
		НоваяСтрока.СкладИсточникКод 		= "000000134";   								
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрВавиловоЛГ;
		НоваяСтрока.Примечание 				= "КАМАЗ Уфа";		
		
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Добавить();
		НоваяСтрока.СкладИсточникКод 		= "000000128";   								
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрВавиловоЛГ;
		НоваяСтрока.Примечание 				= "КАМАЗ Челябинск";		
		//</Учет в разрезе подразделений>

		ЭтаФорма.Объект.НоменклатураДляПТУкакДоработка = Справочники.Номенклатура.НайтиПоНаименованию("Авторабота");
		Если ЭтаФорма.Объект.НоменклатураДляПТУкакДоработка = Неопределено Тогда
			ЭтаФорма.Объект.НоменклатураДляПТУкакДоработка = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
		//<Для поступления из переработки>
		ЭтаФорма.Объект.ДопСввоНомерВхДокПоступлениеИзПереработки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер вх.документа (Поступление из переработки)", Истина);
		ЭтаФорма.Объект.ДопСввоДатаВхДокПоступлениеИзПереработки = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Дата вх.документа (Поступление из переработки)", Истина);
		//</Для поступления из переработки>      
		
		//Номенклатурные_группы_Автомобилей
		Объект.НомГруппаПродажаНовыеГАЗ 	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили", 					Истина);
	    Объект.НомГруппаПродажаНовыеУАЗ 	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили УАЗ новые",			Истина);
		Объект.НомГруппаПродажаНовыеВАЗ 	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили ВАЗ новые",			Истина);
		Объект.НомГруппаПродажаНовыеФОРД 	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили ФОРД новые",			Истина);
		Объект.НомГруппаПродажаВторичные	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили вторичные", 			Истина);
		Объект.НомГруппаПродажаНовыеКАМАЗ	= Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Автомобили КАМАЗ новые", 		Истина);

	КонецЕсли;
	
	Если ЭтаФорма.Объект.ЭтоМосква Тогда
		ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов=1;
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН","7724374691");
		КонецЕсли;
	
		ЭтаФорма.Объект.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		//ЭтаФорма.Объект.ОсновнойСклад = Справочники.Склады.НайтиПоКоду("000000001");
		ЭтаФорма.Объект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобили");
		ЭтаФорма.Объект.ПоказатьВыгруженныеНеИзмененные			=	Истина;
		
		ЭтаФорма.Объект.УчетВРазрезеСкладов 					= 	Истина;
		ЭтаФорма.Объект.ПерезаписыватьНаименованиеНоменклатуры	=	Ложь;
		
		//<Учет в разрезе подразделений>	
		ЭтаФорма.Объект.УчетВРазрезеПодразделений = Истина;
		Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Очистить();
	
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод = "000000020";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("0000-0006");
		НоваяСтрока.Примечание = "Точка оформления Москва - МКАД-19";
		
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод = "000000027";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("00ЗП-0008");
		НоваяСтрока.Примечание = "Точка оформления Москва - Кунцево";

		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод = "000000012";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("0000-0008");
		НоваяСтрока.Примечание = "Точка оформления Москва - Байкальская";
		
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод = "000000016";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("0000-0007");
		НоваяСтрока.Примечание = "Точка оформления Москва - Балашиха";
		
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод = "000000019";
		//<05.12.2019, =>, изменили код подразделения>
		//НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("00ЗП-0005"); =>
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("00-000001");
		//</05.12.2019>
		НоваяСтрока.Примечание = "Точка оформления Москва - МКАД-78 (Химки)";
		
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод = "000000068";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("00ЗП-0009");
		НоваяСтрока.Примечание = "Точка оформления Москва - Реутов";

		//</Учет в разрезе подразделений>

	КонецЕсли;
	
	Если Объект.ЭтоМоскваГазконтракт Тогда
		ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов=1;
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН","5001114289");
		КонецЕсли;
		
		ЭтаФорма.Объект.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		//ЭтаФорма.Объект.ОсновнойСклад = Справочники.Склады.НайтиПоКоду("000000001");
		ЭтаФорма.Объект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобили");
		ЭтаФорма.Объект.ПоказатьВыгруженныеНеИзмененные			=	Истина;
		
		ЭтаФорма.Объект.УчетВРазрезеСкладов 					= 	Истина;
		ЭтаФорма.Объект.ПерезаписыватьНаименованиеНоменклатуры	=	Ложь;
		
		//<Учет в разрезе подразделений>	
		ЭтаФорма.Объект.УчетВРазрезеПодразделений = Истина;
		Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Очистить();

		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод = "000000016";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("БП-000001");
		НоваяСтрока.Примечание = "Точка оформления Москва - Балашиха";
		//</Учет в разрезе подразделений>

	КонецЕсли;
	
	Если ЭтаФорма.Объект.ЭтоКазань Тогда
		ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов=1;
		
		//ЭтаФорма.Объект.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН","7724374691  ");
		ЭтаФорма.Объект.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		ЭтаФорма.Объект.ОсновнойСклад = Справочники.Склады.НайтиПоКоду("000000001");
		ЭтаФорма.Объект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобили");
		ЭтаФорма.Объект.ПоказатьВыгруженныеНеИзмененные			=	Истина;
		
		ЭтаФорма.Объект.УчетВРазрезеСкладов 					= 	Ложь;
		ЭтаФорма.Объект.ПерезаписыватьНаименованиеНоменклатуры	=	Ложь;
			
		//<Учет в разрезе подразделений>	
		ЭтаФорма.Объект.УчетВРазрезеПодразделений = Истина;
		
		НоваяСтрока = ЭтаФорма.Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод 		= "000000026";
		НоваяСтрока.ПодразделениеПриемник 	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		НоваяСтрока.Примечание 				= "Точка оформления Казань Гашека";
		
		НоваяСтрока = ЭтаФорма.Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод		= "000000021";
		НоваяСтрока.ПодразделениеПриемник	= Справочники.ПодразделенияОрганизаций.НайтиПоКоду("ЛКЗК-0011"); 
		НоваяСтрока.Примечание 				= "Точка оформления Казань Сибирский Тракт";
		//</Учет в разрезе подразделений>
	
	КонецЕсли;
	
	Если ЭтаФорма.Объект.ЭтоТамбов Тогда
		ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов=1;
		
		ЭтаФорма.Объект.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		ЭтаФорма.Объект.ОсновнойСклад 		= Справочники.Склады.НайтиПоКоду("БП-000002");
		ЭтаФорма.Объект.ВидНоменклатуры 	= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобили");
		ЭтаФорма.Объект.ПоказатьВыгруженныеНеИзмененные			=	Истина;
		
		ЭтаФорма.Объект.УчетВРазрезеСкладов 					= 	Ложь;
		ЭтаФорма.Объект.ПерезаписыватьНаименованиеНоменклатуры	=	Ложь;		

		//<Учет в разрезе подразделений>	
		ЭтаФорма.Объект.УчетВРазрезеПодразделений = Ложь;
		
	КонецЕсли;
	
	Если ЭтаФорма.Объект.ЭтоЧелябинск Тогда
		
		ЭтаФорма.Объект.ВыбранныйФильтрОтображенияДокументов=1;
		
		//ЭтаФорма.Объект.Организация = Справочники.Организации.НайтиПоРеквизиту("ИНН","0273088205  ");
		ЭтаФорма.Объект.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		ЭтаФорма.Объект.ОсновнойСклад = Справочники.Склады.НайтиПоКоду("000000001");
		ЭтаФорма.Объект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Автомобили");
		ЭтаФорма.Объект.ПоказатьВыгруженныеНеИзмененные=Истина;
		
		ЭтаФорма.Объект.УчетВРазрезеСкладов = Ложь;
		ЭтаФорма.Объект.ПерезаписыватьНаименованиеНоменклатуры=Истина;
		
		
		//<Учет в разрезе подразделений>	
		ЭтаФорма.Объект.УчетВРазрезеПодразделений = Истина;
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ОбособленноеПодразделение = ИСТИНА
		|	И ПодразделенияОрганизаций.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", "744745001");
		РезультатЗапроса = Запрос.Выполнить().Выгрузить()[0][0];	
		ОбособлПодрЧелябинскМеханическая	= Запрос.Выполнить().Выгрузить()[0][0];
		
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод 		= "000000018";
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрЧелябинскМеханическая;
		НоваяСтрока.Примечание 				= "Точка оформления ""Челябинск - Механическая""";
		
		НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		НоваяСтрока.ТочкаОформленияКод 		= "000000028";
		НоваяСтрока.ПодразделениеПриемник 	= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		НоваяСтрока.Примечание				 = "Точка оформления ""Челябинск - Копейское шоссе""";
		
		//НоваяСтрока = Объект.СоответствиеТочкиОформленияПодразделениюПриемника.Добавить();
		//НоваяСтрока.ТочкаОформленияКод 		= "000000072";		
		//НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрЧелябинскМеханическая;
		//НоваяСтрока.Примечание 				= "Челябинск-Торговый центр ""КС""";

		//#КонецОбласти
	
		//#Область Соответствие_СкладаОУ_ПодразделениюБУ_Для_Уфы_Для_Перемещений
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемника.Добавить();
		НоваяСтрока.СкладИсточникКод ="000000040";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000009");
		НоваяСтрока.Примечание = "Склад ""Челябинск""";
		
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемника.Добавить();
		НоваяСтрока.СкладИсточникКод ="000000043";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000009");
		НоваяСтрока.Примечание = "Склад ""Челябинск (б/у)""";
		
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемника.Добавить();
		НоваяСтрока.СкладИсточникКод ="000000044";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000009");
		НоваяСтрока.Примечание = "Склад ""Агат (Челябинск)""";
		
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемника.Добавить();
		НоваяСтрока.СкладИсточникКод ="000000045";
		НоваяСтрока.ПодразделениеПриемник = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000009");
		НоваяСтрока.Примечание = "Склад ""Челябинск (доработка)""";
		
		ПодразделениеВАЗ = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000012");	
		НоваяСтрока = ЭтаФорма.Объект.СоответствиеСкладаИсточникаПодразделениюПриемника.Добавить();
		НоваяСтрока.СкладИсточникКод ="000000050";
		НоваяСтрока.ПодразделениеПриемник = ПодразделениеВАЗ;
		НоваяСтрока.Примечание = "Склад ""УФА ВАЗ""";
		
		НоваяСтрока = ЭтаФорма.Объект.СоответствиеСкладаИсточникаПодразделениюПриемника.Добавить();
		НоваяСтрока.СкладИсточникКод ="000000053";
		НоваяСтрока.ПодразделениеПриемник = ПодразделениеВАЗ;
		НоваяСтрока.Примечание = "Склад ""УФА ВАЗ Б/У""";
		//#КонецОбласти
		
		#Область Соответствие_СкладаОУ_ОбособленномуПодразделениюБУ_Для_Уфы_Для_Поступлений
		//Это соответствие используется только при загрузке поступлений. Оно необходимо для определения
		//обособленного подразделения (напр. подразделения ВАЗ) не через точку оформления, а через склад
					
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Добавить();
		НоваяСтрока.СкладИсточникКод 		="000000102";
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрЧелябинскКопейское;
		НоваяСтрока.Примечание 				= "Склад ""Челябинск  Копейское шоссе 27/Ж""";	
		
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Добавить();
		НоваяСтрока.СкладИсточникКод 		="000000104";
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрЧелябинскКопейское;
		НоваяСтрока.Примечание 				= "Склад ""Челябинск Копейское б/у""";	

		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Добавить();
		НоваяСтрока.СкладИсточникКод 		="000000105";   								
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрВавилово;
		НоваяСтрока.Примечание 				= "Склад ""Уфа Вавилово""";		
		
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Добавить();
		НоваяСтрока.СкладИсточникКод 		="000000106";   								
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрВавилово;
		НоваяСтрока.Примечание 				= "Склад ""Уфа Вавилово б/у""";	
		
		НоваяСтрока = Объект.СоответствиеСкладаИсточникаПодразделениюПриемникаДляПТУ.Добавить();
		НоваяСтрока.СкладИсточникКод 		="000000109";   								
		НоваяСтрока.ПодразделениеПриемник 	= ОбособлПодрЧелябинскМеханическая;
		НоваяСтрока.Примечание 				= "Челябинск ТЦ-КС (с пробегом)";	
		#КонецОбласти
	КонецЕсли;

	ЭтаФорма.Объект.СоздаватьКонтрагентов 	= Истина;
	ЭтаФорма.ТестоваяОУ 					= Ложь;
    Объект.ВэбСервер						= "https://mainiis/asc_oper#";
КонецПроцедуры

&НаКлиенте
Процедура ТЧВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Тек = Элемент.ТекущиеДанные;
	Доступно = Тек <> Неопределено И ЗначениеЗаполнено(Тек.НавСсылка);
	Если Доступно Тогда
		ПерейтиПоНавигационнойСсылке(Тек.НавСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНЭРазукомплектацияПриИзменении(Элемент)
	ВыбратьОчиститьВыбор()
КонецПроцедуры

#Region ОрганизацияПриИзменении
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Объект.ТЧ.Очистить();
	Если СокрЛП(Объект.Организация.ИНН) =  "7724374691" Тогда
		Объект.ЭтоМосква = Истина;
	КонецЕсли;
	Если СокрЛП(Объект.Организация.ИНН) =  "5001114289" Тогда
		Объект.ЭтоМоскваГазконтракт = Истина;
	КонецЕсли;
	Если СокрЛП(Объект.Организация.ИНН) = "0273088205" Тогда
		Объект.ЭтоУфа = Истина;
	КонецЕсли;
	Если СокрЛП(Объект.Организация.ИНН) = "7447279002" Тогда
		Объект.ЭтоЧелябинск = Истина;
	КонецЕсли;   
	Если СокрЛП(Объект.Организация.ИНН) = "0273088220" Тогда
		Объект.ЭтоЛуидорГарантияУфа = Истина;
	КонецЕсли;   

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
	НастройкиПоУмолчанию();
КонецПроцедуры


&НаКлиенте
Процедура ТЧНавСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Сообщить("привет");
КонецПроцедуры


&НаКлиенте
Процедура ТЧНавСсылкаНажатие(Элемент, СтандартнаяОбработка)
	Сообщить("привет2");
КонецПроцедуры
#EndRegion
