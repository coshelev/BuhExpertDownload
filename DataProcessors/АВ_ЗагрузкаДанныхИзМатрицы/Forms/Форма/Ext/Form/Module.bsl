//--------------------------------------------------------------------------------------------------------------------
Перем База экспорт;
Перем ДопРеквизит_ОбособленноеПодразделение Экспорт;
Перем ДопРеквизит_УИДПеремещения Экспорт;
Перем ДопРеквизит_ЗНРазвернуто Экспорт; 
Перем ВидНоменклатуры_Малоценка Экспорт;
&НаСервере
Функция ПодключитьИБ()
	// получаем COM соединение из кэша, если не подключено - подключаем
	                                                                   
		ТестоваяБаза  = СтрНайти(ВРЕГ(СтрокаСоединенияИнформационнойБазы()),"TEST1C");
		
		Если ТестоваяБаза=0 Тогда
			СтрокаПодключения = "Srvr='MainAppM';Ref='asc_oper';";
			//СтрокаПодключения = "Srvr='MainDev';Ref='ad_sto_matrix';";
		Иначе	
			СтрокаПодключения = "Srvr='MainAppM';Ref='asc_oper';";
		//	СтрокаПодключения = "Srvr='Test1C';Ref='sto_oper';";
		КонецЕсли;
		
		V8COMConnector= Новый COMОбъект("V83.COMConnector");
		Попытка
			База = V8COMConnector.Connect(СтрокаПодключения);
		Исключение
			Сообщить("Ошибка подключения ИБ: "+ОписаниеОшибки());		
			База = Неопределено;
		КонецПопытки;
		//Если База=Неопределено Тогда
		//	Объект.ХранилищеОбъекта     = Неопределено;
		//Иначе
		//	Структура               = New Структура("Объект", База);
		//	Объект.ХранилищеОбъекта     = ПоместитьВоВременноеХранилище(Структура, Объект.ХранилищеОбъекта);
		//КонецЕсли; 
	//КонецЕсли;
	
	Возврат База;
	
КонецФункции

&НаСервере
Процедура ОтключитьИБ()
	
	Объект.ХранилищеОбъекта = Неопределено;
	
КонецПроцедуры


//*******************************************************
//ГЛАВНАЯ ПРОЦЕДУРА!!!
//*******************************************************
&НаСервере
Функция ЗаполнитьДокументыНаСервере() 
	ЕстьОшибки = Ложь;
	
	//ПроверитьЗаполнениеОбязательныхРеквизитов();
	
	База = ПодключитьИБ();
	//НУЖНО ДОБАВИТЬ ПРОВЕРКУ!!!! В базе есть константа с датой актуальности распределения - обращай на неё внимание при выгрузке
	
	
	//Очищаем таблицы
	ОчищаемТаблицы();
	
	ВидыДокументовДляВыгрузки = база.NewObject("Массив");               
	ВидыДокументовДляВыгрузки_Доп = база.NewObject("Массив");               
	
	Если СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()),"UFA")<>0 Тогда
		КодОбмена = "БУХ_УФА";
	ИначеЕсли СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()),"AD_TEST")<>0 Тогда
		КодОбмена = "БУХ_УФА";
	ИначеЕсли СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()),"KZN")<>0 Тогда	
		КодОбмена = "БУХ_КЗН";
	ИначеЕсли СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()),"RM_")<>0 Тогда	
		КодОбмена = "БУХ_САРАНС";
	ИначеЕсли СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()),"CHEB_")<>0 Тогда	
		КодОбмена = "БУХ_ЧЕБ";
	ИначеЕсли СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()),"ALC")<>0 Тогда	
		КодОбмена = "AA_MOSCOW";
	ИначеЕсли СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы()),"TAMBOV_")<>0 Тогда	
		КодОбмена = "НЕТ КОДА";
	Иначе
		КодОбмена="НЕТ КОДА";
	КонецЕсли;	
		
	ЗаполнятьМежхолдер = Ложь;
	Для каждого текЭлемент Из ВидыДокументов Цикл
		Если текЭлемент.Пометка Тогда
			Если текЭлемент.Значение = "ЗаказНарядПокупатель" Тогда
				ВидыДокументовДляВыгрузки_Доп.Добавить("ЗаказНаряд");
			ИначеЕсли текЭлемент.Значение = "НЭОтчетАгентаВходящий" тогда
				ВидыДокументовДляВыгрузки_Доп.Добавить("НЭОтчетАгента");
			Иначе
				ВидыДокументовДляВыгрузки.Добавить(текЭлемент.Значение);
				Если текЭлемент.Значение = "НЭЗакупка" Тогда
					ВидыДокументовДляВыгрузки.Добавить("ГАЗНЭЗакупка");
				КонецЕсли;	
			
				Если ТекЭлемент.Значение = "МЕЖХОЛДЕР" Тогда
					ЗаполнятьМежхолдер = Истина;    // Особенность в том, что межхолдерные движения в Матрице заполняются всегда
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	Стр = Новый Структура();	
	Стр.Вставить("ВидыДокументовДляВыгрузки", видыДокументовДляВыгрузки);
	
	Если ВидыДокументовДляВыгрузки.Количество()>0 Тогда
		ДеревоДокументов_Источник = База.Интеграция.ВыгрузитьДокументы_Партии(_Период.ДатаНачала, _Период.ДатаОкончания, Объект.Организация.ИНН,ВидыДокументовДляВыгрузки,КодОбмена);
	КонецЕсли; 
	
	
	Если ВидыДокументовДляВыгрузки_Доп.Количество()>0 Тогда
		ДеревоДокументов_Источник_Доп = База.Интеграция.ВыгрузитьДокументы_Партии(_Период.ДатаНачала, _Период.ДатаОкончания,"" ,ВидыДокументовДляВыгрузки_Доп,КодОбмена, Объект.Организация.ИНН);
	КонецЕсли; 
	
	Если ВидыДокументовДляВыгрузки.Количество()>0 Тогда
	
		Для каждого текЭлемент Из ДеревоДокументов_Источник Цикл
			Если ТекЭлемент.Значение = неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТекЭлемент.Ключ  = "Номенклатура" Тогда
				Для Каждого СтрокаНоменклатуры из текЭлемент.Значение Цикл
					НоваяСтрокаНоменклатуры = ПереченьНоменклатуры.Добавить();
					НоваяСтрокаНоменклатуры.УИДНоменклатуры = СтрокаНоменклатуры.ИД;
					НоваяСтрокаНоменклатуры.КодОбмена = СтрокаНоменклатуры.КодОбмена;
					НоваяСтрокаНоменклатуры.Наименование = СтрокаНоменклатуры.Наименование;
					НоваяСтрокаНоменклатуры.КодЕИПоОКЕИ = СтрокаНоменклатуры.КодЕдиницыИзмерения;  
					НоваяСтрокаНоменклатуры.ВидНоменклатуры = ?(СтрокаНоменклатуры.НоменклатурнаяГруппа = "Инструменты","Инвентарь","Запчасти");
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
			
		Для каждого текЭлемент Из ДеревоДокументов_Источник Цикл
			Если ТекЭлемент.Значение = неопределено Тогда
				Продолжить;
			КонецЕсли;
	
		#Область ПОСТУПЛЕНИЕ_ТиУ //ДОКУМЕНТ "Поступление товаров и услуг"	
		//*************************************************************************************
		//Документ Поступление товаров и услуг
		//*************************************************************************************
		
		Если текЭлемент.Ключ = "ПоступлениеТоваров" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				НоваяСтрока_ПТиУ = ПоступлениеТоваровУслуг.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
				
				НоваяСтрока_ПТиУ.УИД  = УИД_Строка;
				НоваяСтрока_ПТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_ПТиУ.НомерВходящегоДокумента = ТекущийДокумент.ДополнительныеРеквизиты.НомерВходящегоДокумента;
				НоваяСтрока_ПТиУ.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ДатаВходящегоДокумента;
				НоваяСтрока_ПТиУ.СчетФактураДата  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураДата;
				НоваяСтрока_ПТиУ.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				
				НоваяСтрока_ПТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;;
				НоваяСтрока_ПТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;;
				НоваяСтрока_ПТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				НоваяСтрока_ПТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				//Ном = База.Перечисления.ФормыСобственности.Индекс(ТекущийДокумент.Документ.Контрагент.ФормаСобственности);
				//Имя = База.Метаданные().Перечисления.ФормыСобственности.EnumValues.Get(Ном).Name;
				
				//НоваяСтрока_ПТиУ.КонтрагентТип  = Имя;
				НоваяСтрока_ПТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				
				НоваяСтрока_ПТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				
				Если НоваяСтрока_ПТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ПТиУ.ДоговорУИД = "" Тогда
					НоваяСтрока_ПТиУ.ДоговорУИД  = "";
				Иначе
					НоваяСтрока_ПТиУ.ДоговорНомер   = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
					НоваяСтрока_ПТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				КонецЕсли;	
				
				
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_ПТиУ.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_ПТиУ.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					
					НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_ПТиУ.УИД,НоваяСтрока_ПТиУ, НовТовар.Сумма, НовТовар.СуммаНДС);
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Поступление товаров и услуг"
		
		#Область ПОСТУПЛЕНИЕ_ТиУ_Материалы //ДОКУМЕНТ "Поступление товаров и услуг"	
		//*************************************************************************************
		//Документ Поступление товаров и услуг
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "МТЗакупка" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				Если ТекущийДокумент.Товары.количество()=0  Тогда
					продолжить;
				КонецЕсли;
				НоваяСтрока_ПТиУ = ПоступлениеМатериалов.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
				
				НоваяСтрока_ПТиУ.УИД  = УИД_Строка;
				НоваяСтрока_ПТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_ПТиУ.НомерВходящегоДокумента = ТекущийДокумент.ДополнительныеРеквизиты.НомерВходящегоДокумента;
				НоваяСтрока_ПТиУ.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ДатаВходящегоДокумента;
				НоваяСтрока_ПТиУ.СчетФактураДата  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураДата;
				НоваяСтрока_ПТиУ.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				
				НоваяСтрока_ПТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;;
				НоваяСтрока_ПТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;;
				НоваяСтрока_ПТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				НоваяСтрока_ПТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				//Ном = База.Перечисления.ФормыСобственности.Индекс(ТекущийДокумент.Документ.Контрагент.ФормаСобственности);
				//Имя = База.Метаданные().Перечисления.ФормыСобственности.EnumValues.Get(Ном).Name;
				
				//НоваяСтрока_ПТиУ.КонтрагентТип  = Имя;
				НоваяСтрока_ПТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				
				//НоваяСтрока_ПТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				//
				//Если НоваяСтрока_ПТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ПТиУ.ДоговорУИД = "" Тогда
				//	НоваяСтрока_ПТиУ.ДоговорУИД  = "";
				//Иначе
				//	НоваяСтрока_ПТиУ.ДоговорНомер   = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
				//	НоваяСтрока_ПТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				//КонецЕсли;	
				
				
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_ПТиУ.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_ПТиУ.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					
					НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_ПТиУ.УИД,НоваяСтрока_ПТиУ, НовТовар.Сумма, НовТовар.СуммаНДС);
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					НовТовар.Наименование = СтрокаТЧ.Номенклатура;
					
					// Временно
					УстановитьПризнакМатериал(СтрокаТЧ.НоменклатураУИД);
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Поступление товаров и услуг"
		
		#Область ВозвратПоставщику //ДОКУМЕНТ "Возврат поставщику"	
		//*************************************************************************************
		//Документ Возврат поставщику
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "ВозвратПоставщику" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				НоваяСтрока_ВП = ВозвратТоваровПоставщику.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				
				НоваяСтрока_ВП.УИД  = ТекущийДокумент.УИД;
				НоваяСтрока_ВП.ДокументОснованиеУИД  = ТекущийДокумент.ДополнительныеРеквизиты.ДокументОснованиеУИД;
				НоваяСтрока_ВП.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_ВП.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_ВП.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ВхДата;
				НоваяСтрока_ВП.НомерВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ВхНомер;
				
				НоваяСтрока_ВП.НомерСфВх  = ТекущийДокумент.ДополнительныеРеквизиты.ВхСчетФактураНомер;
				НоваяСтрока_ВП.ДатаСфВх = ТекущийДокумент.ДополнительныеРеквизиты.ВхСчетФактураДата;
				
				НоваяСтрока_ВП.СчетФактураДата  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураДата;
				НоваяСтрока_ВП.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				
				НоваяСтрока_ВП.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;
				НоваяСтрока_ВП.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;
				НоваяСтрока_ВП.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				НоваяСтрока_ВП.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				//Ном = База.Перечисления.ФормыСобственности.Индекс(ТекущийДокумент.Документ.Контрагент.ФормаСобственности);
				//Имя = База.Метаданные().Перечисления.ФормыСобственности.EnumValues.Get(Ном).Name;
				
				//НоваяСтрока_ПТиУ.КонтрагентТип  = Имя;
				НоваяСтрока_ВП.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				
				НоваяСтрока_ВП.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				
				Если НоваяСтрока_ВП.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ВП.ДоговорУИД = "" Тогда
					НоваяСтрока_ВП.ДоговорУИД  = "";
				Иначе
					НоваяСтрока_ВП.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
					НоваяСтрока_ВП.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				КонецЕсли;	
				
				
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_ВП.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_ВП.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					
					НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_ВП.УИД,НоваяСтрока_ВП);
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Возврат товаров поставщику"
		
		#Область АВАНСОВЫЙ_ОТЧЕТ //ДОКУМЕНТ "Авансовый отчет"	
		//*************************************************************************************
		//Документ Поступление товаров и услуг
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "АвансовыйОтчет" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				НоваяСтрока_АО = АвансовыйОтчет.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_АО.УИД  = УИД_Строка;
				НоваяСтрока_АО.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_АО.СуммаДокумента = ТекущийДокумент.ДополнительныеРеквизиты.СуммаДокумента;
				
				НоваяСтрока_АО.ФизЛицоНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.СотрудникОтчитывающийся;
				НоваяСтрока_АО.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_АО.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_АО.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Авановый отчет"
		
		#Область СПИСАНИЕ_ТОВАРОВ //ДОКУМЕНТ "Списание товаров"	
		//*************************************************************************************
		//Документ Списание товаров 
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "СписаниеТоваров" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				НоваяСтрока_Списание = СписаниеТоваров.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_Списание.УИД  = УИД_Строка;
				НоваяСтрока_Списание.Номер  = ТекущийДокумент.Номер;
				НоваяСтрока_Списание.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_Списание.СуммаДокумента = ТекущийДокумент.ДополнительныеРеквизиты.СуммаДокумента;
				
				НоваяСтрока_Списание.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_Списание.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_Списание.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
				
			КонецЦикла;
		#КонецОбласти //Документ "Списание товаров"
		
		#Область Доукомплектация_Автомобилей //ДОКУМЕНТ "Требование-накладная"	
		//*************************************************************************************
		//Документ Списание товаров 
		//*************************************************************************************
		
	ИначеЕсли текЭлемент.Ключ = "НЭДоукомплектация" Тогда

			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				
				НоваяСтрока_ДУА = ДоукомплектацияАвтомобилей.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_ДУА.УИД  = УИД_Строка;
				НоваяСтрока_ДУА.Номер  = ТекущийДокумент.Номер;
				НоваяСтрока_ДУА.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_ДУА.АвтомобильВИН = ТекущийДокумент.ДополнительныеРеквизиты.АвтомобильВИН;
				НоваяСтрока_ДУА.АвтомобильНаименование = ТекущийДокумент.ДополнительныеРеквизиты.Автомобиль;
				
				НоваяСтрока_ДУА.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_ДУА.Материалы.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_ДУА.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
				
			КонецЦикла;
		#КонецОбласти //Документ "Списание товаров"
		
		#Область ОПРИХОДОВАНИЕ_ТОВАРОВ //ДОКУМЕНТ "Оприходование товаров"	
		//*************************************************************************************
		//Документ Оприходование товаров 
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "ОприходованиеТоваров" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				НоваяСтрока_Оприходование = ОприходованиеТоваров.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_Оприходование.УИД  = УИД_Строка;
				НоваяСтрока_Оприходование.Номер  = ТекущийДокумент.Номер;
				НоваяСтрока_Оприходование.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_Оприходование.СуммаДокумента = ТекущийДокумент.ДополнительныеРеквизиты.СуммаДокумента;
				
				НоваяСтрока_Оприходование.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_Оприходование.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_Оприходование.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена  = СтрокаТЧ.ЦенаЗакупочная;
					НовТовар.Сумма  = СтрокаТЧ.СуммаЗакупочная;
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
				
			КонецЦикла;
		#КонецОбласти //Документ "Оприходование товаров"
		
		#Область КОМПЛЕКТАЦИЯ_ТОВАРОВ //ДОКУМЕНТ "Комплектация"	
		//*************************************************************************************
		//Документ Комплектация товаров 
		//*************************************************************************************
		
	ИначеЕсли текЭлемент.Ключ = "КомплектацияТоваров" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				НоваяСтрока_Комплектация = Комплектация.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_Комплектация.УИД  = УИД_Строка;
				НоваяСтрока_Комплектация.Номер  = ТекущийДокумент.Номер;
				НоваяСтрока_Комплектация.Дата = ТекущийДокумент.Дата;
				
				НоваяСтрока_Комплектация.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
				// Заполняем табличную часть "Комплектующие"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.ТоварыСписание Цикл
					НовТовар = НоваяСтрока_Комплектация.Комплектующие.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_Комплектация.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					//НовТовар.Цена  = СтрокаТЧ.Цена;
					//НовТовар.Сумма  = СтрокаТЧ.Сумма;
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
				
				// Заполняем табличную часть "Комплектующие"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.ТоварыОприходование Цикл
					НовТовар = НоваяСтрока_Комплектация.Комплект.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_Комплектация.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена  = СтрокаТЧ.Цена;
					НовТовар.Сумма  = СтрокаТЧ.Сумма;
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Оприходование товаров"
		
		#Область ПЕРЕМЕЩЕНИЕ_ТОВАРОВ //ДОКУМЕНТ "Перемещение товаров"	
		//*************************************************************************************
		//Документ Списание товаров 
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "ПеремещениеТоваров" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				
				НоваяСтрока_Перемещение = Перемещения.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				
				НоваяСтрока_Перемещение.УИД  = ТекущийДокумент.УИД;
				НоваяСтрока_Перемещение.Номер  = ТекущийДокумент.Номер;
				НоваяСтрока_Перемещение.Дата = ТекущийДокумент.Дата;
				
				НоваяСтрока_Перемещение.ТочкаОформленияОтправительНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформленияОтправитель;
				НоваяСтрока_Перемещение.ТочкаОформленияПолучательНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформленияПолучатель;
				
				
				
				Для Каждого СтрокаНоменклатуры из ТекущийДокумент.Товары Цикл
					
					Если СтрокаНоменклатуры.ВладелецИНН<>Объект.Организация.ИНН Тогда
						Продолжить;
					КонецЕсли;
					
		
					НоваяСтрока = НоваяСтрока_Перемещение.Товары.Добавить();
		
					НоваяСтрока.УидНоменклатуры = СтрокаНоменклатуры.НоменклатураУИД;
					НоваяСтрока.УидДокумента = НоваяСтрока_Перемещение.УИД;
			
			
	    			НоваяСтрока.Количество = СтрокаНоменклатуры.Количество;
				КонецЦикла;	
				Если НоваяСтрока_Перемещение.товары.Количество()=0 Тогда
					Перемещения.Удалить(НоваяСтрока_Перемещение);
				КонецЕсли;
				
			КонецЦикла;
		
		#КонецОбласти //Документ "Перемещение товаров"
		
		#Область РЕАЛИЗАЦИЯ_ТиУ //ДОКУМЕНТ "Реализация товаров и услуг"	
		//*************************************************************************************
		//Документ Реализация товаров и услуг
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "РеализацияТоваров" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				
				Если ТекущийДокумент.Товары.Количество()=0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока_РТиУ = РеализацияТиУ.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_РТиУ.УИД  = УИД_Строка;
				НоваяСтрока_РТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_РТиУ.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_РТиУ.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				
				НоваяСтрока_РТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;
				НоваяСтрока_РТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;
				НоваяСтрока_РТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				
				НоваяСтрока_РТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				НоваяСтрока_РТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
				НоваяСтрока_РТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				Если НоваяСтрока_РТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_РТиУ.ДоговорУИД = "" Тогда
					НоваяСтрока_РТиУ.ДоговорУИД  = "";
				Иначе	
					НоваяСтрока_РТиУ.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
					НоваяСтрока_РТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				КонецЕсли;	
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_РТиУ.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_РТиУ.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					
					НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_РТиУ.УИД, НоваяСтрока_РТиУ);
					НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					//УчетНДСКлиентСервер.РассчитатьСуммуНДС(НовТовар.сумма,Истина,УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НовТовар.СтавкаНДС, Ложь));					
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
				
				
				
			КонецЦикла;
		#КонецОбласти //Документ "Реализация товаров и услуг"
		
		#Область РЕАЛИЗАЦИЯ_МАТЕРИАЛОВ //ДОКУМЕНТ "Реализация товаров и услуг"	
		//*************************************************************************************
		//Документ Реализация товаров и услуг
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "МТРеализация" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				
				Если ТекущийДокумент.Товары.Количество()=0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока_РТиУ = РеализацияМатериалов.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_РТиУ.УИД  = УИД_Строка;
				НоваяСтрока_РТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_РТиУ.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_РТиУ.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				
				НоваяСтрока_РТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;
				НоваяСтрока_РТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;
				НоваяСтрока_РТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				
				НоваяСтрока_РТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				НоваяСтрока_РТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
				НоваяСтрока_РТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				Если НоваяСтрока_РТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_РТиУ.ДоговорУИД = "" Тогда
					НоваяСтрока_РТиУ.ДоговорУИД  = "";
				Иначе	
					НоваяСтрока_РТиУ.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
					НоваяСтрока_РТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				КонецЕсли;	
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_РТиУ.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_РТиУ.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					
					НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_РТиУ.УИД, НоваяСтрока_РТиУ);
					НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					УчетНДСКлиентСервер.РассчитатьСуммуНДС(НовТовар.сумма,Истина,УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НовТовар.СтавкаНДС, Ложь));					
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					НовТовар.Наименование = СтрокаТЧ.Номенклатура;
					
					// Временно
					УстановитьПризнакМатериал(СтрокаТЧ.НоменклатураУИД);
				КонецЦикла;
				
				
				
			КонецЦикла;
		#КонецОбласти //Документ "Реализация товаров и услуг"
		
		
		#Область РЕАЛИЗАЦИЯ_Услуг //ДОКУМЕНТ "Реализация товаров и услуг"	
		//*************************************************************************************
		//Документ Реализация товаров и услуг
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "РеализацияУслуг" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				
				Если ТекущийДокумент.Товары.Количество()=0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока_РТиУ = РеализацияУслуг.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_РТиУ.УИД  = УИД_Строка;
				НоваяСтрока_РТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_РТиУ.Номер = ТекущийДокумент.Номер;
				//НоваяСтрока_РТиУ.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				
				НоваяСтрока_РТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;
				НоваяСтрока_РТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;
				НоваяСтрока_РТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				
				НоваяСтрока_РТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				НоваяСтрока_РТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
//				НоваяСтрока_РТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				Если НоваяСтрока_РТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_РТиУ.ДоговорУИД = "" Тогда
					НоваяСтрока_РТиУ.ДоговорУИД  = "";
				Иначе	
					НоваяСтрока_РТиУ.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
					НоваяСтрока_РТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				КонецЕсли;	
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_РТиУ.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_РТиУ.УИД;
					//НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Наименование  = СтрокаТЧ.Номенклатура;
					//НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					// Пока в документе оперучета нет ставки НДС - ставлю без НДС
					
					//НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_РТиУ.УИД, НоваяСтрока_РТиУ);
					НовТовар.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					//НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					УчетНДСКлиентСервер.РассчитатьСуммуНДС(НовТовар.сумма,Истина,УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НовТовар.СтавкаНДС, Ложь));					
					
			КонецЦикла;
				
				
				
			КонецЦикла;
		#КонецОбласти //Документ "Реализация товаров и услуг"
		
		#Область ВозвратПокупателя //ДОКУМЕНТ "Возврат товаров покупателя"	
		//*************************************************************************************
		//Документ Возврат покупателя
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "ВозвратПокупателя" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				НоваяСтрока_ВП = ВозвратПокупателя.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				
				НоваяСтрока_ВП.УИД  = ТекущийДокумент.УИД;
				НоваяСтрока_ВП.ДокументОснованиеУИД  = ТекущийДокумент.ДополнительныеРеквизиты.ДокументОснованиеУИД;
				
				НоваяСтрока_ВП.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_ВП.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_ВП.НомерВходящегоДокумента = ТекущийДокумент.ДополнительныеРеквизиты.НомерВходящегоДокумента;
				НоваяСтрока_ВП.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ДатаВходящегоДокумента;
				НоваяСтрока_ВП.СчетФактураДата  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураДата;
				НоваяСтрока_ВП.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				НоваяСтрока_ВП.СчетФактураНомерКорр  = ТекущийДокумент.ДополнительныеРеквизиты.КоррСчетФактураНомер;
				НоваяСтрока_ВП.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ДатаВходящегоДокумента;
				
				НоваяСтрока_ВП.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;
				НоваяСтрока_ВП.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;
				НоваяСтрока_ВП.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				НоваяСтрока_ВП.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				//Ном = База.Перечисления.ФормыСобственности.Индекс(ТекущийДокумент.Документ.Контрагент.ФормаСобственности);
				//Имя = База.Метаданные().Перечисления.ФормыСобственности.EnumValues.Get(Ном).Name;
				
				//НоваяСтрока_ПТиУ.КонтрагентТип  = Имя;
				НоваяСтрока_ВП.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				
				НоваяСтрока_ВП.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				
				Если НоваяСтрока_ВП.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ВП.ДоговорУИД = "" Тогда
					НоваяСтрока_ВП.ДоговорУИД  = "";
				Иначе
					НоваяСтрока_ВП.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
					НоваяСтрока_ВП.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				КонецЕсли;	
				
				
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_ВП.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_ВП.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					
					НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_ВП.УИД, НоваяСтрока_ВП);
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Возврат покупателя"
		
		#Область ЗАКАЗ_НАРЯД // Документы "Оказание услуг" и "Требование-накладная"
		//*************************************************************************************
		//Документы Оказание услуг и Требования-накладные
		// Внимание:
		// Если ИНН контрагента и ИНН организации совпадают - то документ Оказание услуг не формируем
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "ЗаказНаряд" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				
				НоваяСтрока_ЗН = ЗаказНаряды.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				НоваяСтрока_ЗН.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				НоваяСтрока_ЗН.УИД   = УИД_Строка;
				НоваяСтрока_ЗН.Дата  = ТекущийДокумент.ДополнительныеРеквизиты.ДатаЗакрытия;
				НоваяСтрока_ЗН.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_ЗН.НомерСЧФ = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				НоваяСтрока_ЗН.АвтомобильВИН = ТекущийДокумент.ДополнительныеРеквизиты.АвтомобильВИН;
				НоваяСтрока_ЗН.АвтомобильУИД = ТекущийДокумент.ДополнительныеРеквизиты.АвтомобильУИД;
				НоваяСтрока_ЗН.АвтомобильНаименование = ТекущийДокумент.ДополнительныеРеквизиты.Автомобиль;
				НоваяСтрока_ЗН.ВидРемонтаНаименование = ТекущийДокумент.ДополнительныеРеквизиты.ВидРемонта;
				НоваяСтрока_ЗН.ВидРемонтаУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ВидРемонтаУИД;
				
				НоваяСтрока_ЗН.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;
				НоваяСтрока_ЗН.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;
				НоваяСтрока_ЗН.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				
				Если НоваяСтрока_ЗН.КонтрагентИНН = Объект.Организация.ИНН Тогда
					НоваяСтрока_ЗН.ОказаниеУслугНеТребуется = Истина;
				КонецЕсли;
				
				Если не НоваяСтрока_ЗН.ОказаниеУслугНеТребуется Тогда
					
					НоваяСтрока_ЗН.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
					
					
					НоваяСтрока_ЗН.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
					Если НоваяСтрока_ЗН.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ЗН.ДоговорУИД = "" Тогда
						НоваяСтрока_ЗН.ДоговорУИД  = "";
					Иначе
						НоваяСтрока_ЗН.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
						НоваяСтрока_ЗН.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
					КонецЕсли;	
					
					
					НоваяСтрока_ЗН.СуммаДокумента = ТекущийДокумент.ДополнительныеРеквизиты.СуммаДокумента;
					НоваяСтрока_ЗН.СтавкаНДС      = НайтиСтавкуНДС(ТекущийДокумент.ДополнительныеРеквизиты.ПредставлениеНДС,НоваяСтрока_ЗН.УИД, НоваяСтрока_ЗН);
					НоваяСтрока_ЗН.СуммаНДС       = ТекущийДокумент.ДополнительныеРеквизиты.СуммаНДС;
					
					Если НоваяСтрока_ЗН.СуммаДокумента = 0 Тогда
						НоваяСтрока_ЗН.ОказаниеУслугНеТребуется = Истина;
					КонецЕсли;
				КонецЕсли;	
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					Если СтрокаТЧ.Цена>0 Тогда
						НовТовар = НоваяСтрока_ЗН.Товары.Добавить();
						НовТовар.УИДДокумента = НоваяСтрока_ЗН.УИД;
						НовТовар.Количество  = СтрокаТЧ.Количество;
						НовТовар.Цена = СтрокаТЧ.Цена;
						НовТовар.Сумма = СтрокаТЧ.Сумма; 
						НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					КонецЕсли;	
					
					//НовТовар.СуммаНДС = ПолучитьСуммуНДС(СтрокаТЧ.СуммаНДС,СтрокаТЧ.СтавкаНДС);
					
					
					// Ищем номенклатуру
					//-----------------------------------------
					
				КонецЦикла;
				Если НоваяСтрока_ЗН.Товары.Количество() = 0 Тогда
					
					НоваяСтрока_ЗН.ТННеТребуется = Истина;
				КонецЕсли;
				
				
				Для Каждого СтрокаТЧ из ТекущийДокумент.Работы Цикл
					
						НовТовар = НоваяСтрока_ЗН.Услуги.Добавить();
						НовТовар.УИДДокумента = НоваяСтрока_ЗН.УИД;
						НовТовар.Количество  = СтрокаТЧ.Количество;
						НовТовар.Цена = СтрокаТЧ.Цена;
						НовТовар.Сумма = СтрокаТЧ.Сумма; 
						НовТовар.Номенклатура = СтрокаТЧ.Работа;
					
				КонецЦикла;
				
				Для Каждого СтрокаТЧ из ТекущийДокумент.Подряды Цикл
					
						НовТовар = НоваяСтрока_ЗН.услуги.Добавить();
						НовТовар.УИДДокумента = НоваяСтрока_ЗН.УИД;
						НовТовар.Количество  = СтрокаТЧ.Количество;
						НовТовар.Цена = СтрокаТЧ.Цена;
						НовТовар.Сумма = СтрокаТЧ.Сумма; 
						НовТовар.Номенклатура = СтрокаТЧ.Работа;
					
				КонецЦикла;
			КонецЦикла;
			
		#КонецОбласти
		
		#Область Услуги_производства // Документы "Оказание услуг" и "Требование-накладная"
		//*************************************************************************************
		//Документы Оказание услуг и Требования-накладные
		// Внимание:
		// Если ИНН контрагента и ИНН организации совпадают - то документ Оказание услуг не формируем
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "УслугиПроизводства" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				
				НоваяСтрока_ЗН = УслугиПроизводства.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				НоваяСтрока_ЗН.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				НоваяСтрока_ЗН.УИД   = УИД_Строка;
				НоваяСтрока_ЗН.Дата  = ТекущийДокумент.ДополнительныеРеквизиты.ДатаЗакрытия;
				НоваяСтрока_ЗН.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_ЗН.НомерСЧФ = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				НоваяСтрока_ЗН.АвтомобильВИН = ТекущийДокумент.ДополнительныеРеквизиты.АвтомобильВИН;
				НоваяСтрока_ЗН.АвтомобильУИД = ТекущийДокумент.ДополнительныеРеквизиты.АвтомобильУИД;
				НоваяСтрока_ЗН.АвтомобильНаименование = ТекущийДокумент.ДополнительныеРеквизиты.Автомобиль;
				НоваяСтрока_ЗН.ВидРемонтаНаименование = ТекущийДокумент.ДополнительныеРеквизиты.ВидРемонта;
				НоваяСтрока_ЗН.ВидРемонтаУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ВидРемонтаУИД;
				
				НоваяСтрока_ЗН.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;
				НоваяСтрока_ЗН.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;
				НоваяСтрока_ЗН.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				
				Если НоваяСтрока_ЗН.КонтрагентИНН = Объект.Организация.ИНН Тогда
					НоваяСтрока_ЗН.ОказаниеУслугНеТребуется = Истина;
				КонецЕсли;
				
				Если не НоваяСтрока_ЗН.ОказаниеУслугНеТребуется Тогда
					
					НоваяСтрока_ЗН.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
					
					
					НоваяСтрока_ЗН.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
					Если НоваяСтрока_ЗН.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ЗН.ДоговорУИД = "" Тогда
						НоваяСтрока_ЗН.ДоговорУИД  = "";
					Иначе
						НоваяСтрока_ЗН.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
						НоваяСтрока_ЗН.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
					КонецЕсли;	
					
					
					НоваяСтрока_ЗН.СуммаДокумента = ТекущийДокумент.ДополнительныеРеквизиты.СуммаДокумента;
					НоваяСтрока_ЗН.СтавкаНДС      = НайтиСтавкуНДС(ТекущийДокумент.ДополнительныеРеквизиты.ПредставлениеНДС,НоваяСтрока_ЗН.УИД, НоваяСтрока_ЗН);
					НоваяСтрока_ЗН.СуммаНДС       = ТекущийДокумент.ДополнительныеРеквизиты.СуммаНДС;
					
				КонецЕсли;	
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					Если СтрокаТЧ.Цена>0 Тогда
						НовТовар = НоваяСтрока_ЗН.Товары.Добавить();
						НовТовар.УИДДокумента = НоваяСтрока_ЗН.УИД;
						НовТовар.Количество  = СтрокаТЧ.Количество;
						НовТовар.Цена = СтрокаТЧ.Цена;
						НовТовар.Сумма = СтрокаТЧ.Сумма; 
						НовТовар.УидНоменклатуры = СтрокаТЧ.НоменклатураУИД;
					КонецЕсли;	
					
					//НовТовар.СуммаНДС = ПолучитьСуммуНДС(СтрокаТЧ.СуммаНДС,СтрокаТЧ.СтавкаНДС);
					
					
					// Ищем номенклатуру
					//-----------------------------------------
					
				КонецЦикла;
				Если НоваяСтрока_ЗН.Товары.Количество() = 0 Тогда
					НоваяСтрока_ЗН.ТННеТребуется = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		#КонецОбласти
		
		#Область МЕЖХОЛДЕР // Документы "Поступление товаров и услуг" и "Реализация товаров и услуг"
		//*************************************************************************************
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "МежхолдерныеДвижения" и ЗаполнятьМежхолдер Тогда
			Для Каждого МХД из текЭлемент.Значение Цикл
				НоваяСтрока = Межхолдер_Товары.Добавить();
				НоваяСтрока.Дата = МХД.ДатаДокумента;
				НоваяСтрока.ОписаниеДокументаИсточника = МХД.Регистратор;
				
				НоваяСтрока.УидНоменклатуры = МХД.НоменклатураУИД;
				НоваяСтрока.СтавкаНДС = НайтиСтавкуНДС(МХД.ПредставлениеНДС,,НоваяСтрока);
				
				Если МХД.ОрганизацияПолучательИНН = Объект.Организация.ИНН Тогда
					
					НоваяСтрока.ИннПокупателя = МХД.ОрганизацияПолучательИНН;
					НоваяСтрока.КПППокупателя = МХД.ОрганизацияПолучательКПП;
					
					НоваяСтрока.ИннПродавца = МХД.ОрганизацияОтправительИНН;
					НоваяСтрока.КПППродавца = МХД.ОрганизацияОтправительКПП;
					
					НоваяСтрока.Количество = МХД.КоличествоРасход;
					НоваяСтрока.Себестоимость = МХД.СебестоимостьРасход;
				Иначе	
					НоваяСтрока.ИннПродавца = МХД.ОрганизацияПолучательИНН;
					НоваяСтрока.КПППродавца = МХД.ОрганизацияПолучательКПП;
					
					НоваяСтрока.ИннПокупателя  = МХД.ОрганизацияОтправительИНН;
					НоваяСтрока.КПППокупателя  = МХД.ОрганизацияОтправительКПП;
					
					НоваяСтрока.Количество = -1*МХД.КоличествоРасход;
					НоваяСтрока.Себестоимость = -1*МХД.СебестоимостьРасход;
				КонецЕсли;
				НоваяСтрока.ТочкаОформленияНаименование  = МХД.ТочкаОформления;
				
			КонецЦикла;
		#КонецОбласти //Документ "Межхолдерные движения"
		
//==========================================================================
// Раздел "Учет автомобилей"
//--------------------------------------------------------------------------
		#Область ПОСТУПЛЕНИЕ_АВТОМОБИЛЕЙ //ДОКУМЕНТ "Поступление товаров и услуг"	
		//*************************************************************************************
		//Документ Поступление товаров и услуг
		//*************************************************************************************
		
	ИначеЕсли текЭлемент.Ключ = "НЭЗакупка" или текЭлемент.Ключ = "ГАЗНЭЗакупка" Тогда
		
		Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
			Если ТекущийДокумент.Товары.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
				НоваяСтрока_ПТиУ = ПоступлениеАвтомобилей.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
				
				НоваяСтрока_ПТиУ.УИД  = УИД_Строка;
				НоваяСтрока_ПТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_ПТиУ.НомерВходящегоДокумента = ТекущийДокумент.ДополнительныеРеквизиты.НомерВходящегоДокумента;
				НоваяСтрока_ПТиУ.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ДатаВходящегоДокумента;
				НоваяСтрока_ПТиУ.СчетФактураДата  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураДата;
				НоваяСтрока_ПТиУ.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				
				НоваяСтрока_ПТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;;
				НоваяСтрока_ПТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;;
				НоваяСтрока_ПТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				НоваяСтрока_ПТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				НоваяСтрока_ПТиУ.СкладНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.МестоХранения;
				НоваяСтрока_ПТиУ.СкладУИД  = ТекущийДокумент.ДополнительныеРеквизиты.МестоХраненияУИД;
				
				//Ном = База.Перечисления.ФормыСобственности.Индекс(ТекущийДокумент.Документ.Контрагент.ФормаСобственности);
				//Имя = База.Метаданные().Перечисления.ФормыСобственности.EnumValues.Get(Ном).Name;
				
				//НоваяСтрока_ПТиУ.КонтрагентТип  = Имя;
				НоваяСтрока_ПТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				
				
				Если ТекущийДокумент.ДополнительныеРеквизиты.ОснованиеТип = "Сделка по выкупу" тогда
					НоваяСтрока_ПТиУ.ДоговорНомер   = ТекущийДокумент.Номер;
					//НоваяСтрока_ПТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
					НоваяСтрока_ПТиУ.ДоговорДата    = ТекущийДокумент.Дата;
				Иначе
					НоваяСтрока_ПТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
					Если НоваяСтрока_ПТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ПТиУ.ДоговорУИД = "" Тогда
						НоваяСтрока_ПТиУ.ДоговорУИД  = "";
					Иначе
						НоваяСтрока_ПТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
						НоваяСтрока_ПТиУ.ДоговорНомер   = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
					КонецЕсли;
				КонецЕсли;	
				
					
				
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_ПТиУ.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_ПТиУ.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					
					НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_ПТиУ.УИД,НоваяСтрока_ПТиУ, НовТовар.Сумма, НовТовар.СуммаНДС);
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.АвтомобильУИД = СтрокаТЧ.НоменклатураУИД;
					НовТовар.АвтомобильВИН = СтрокаТЧ.НоменклатураВИН;
					НовТовар.АвтомобильНаименование = СтрокаТЧ.Номенклатура;
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Поступление автомобилей"
		
		#Область АКТЫ_ДОРАБОТКИ //ДОКУМЕНТ "Поступление товаров и услуг"	
		//*************************************************************************************
		//Документ Поступление товаров и услуг
		//*************************************************************************************
		
	ИначеЕсли текЭлемент.Ключ = "НЭДоработка" Тогда
		
		Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
			Если ТекущийДокумент.Товары.Количество()=0 или ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН = Объект.Организация.ИНН Тогда
				Продолжить;
			КонецЕсли;
				НоваяСтрока_ПТиУ = АктДоработки.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
				
				НоваяСтрока_ПТиУ.УИД  = УИД_Строка;
				НоваяСтрока_ПТиУ.Дата = ТекущийДокумент.ДополнительныеРеквизиты.АктДата;
				НоваяСтрока_ПТиУ.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_ПТиУ.НомерВходящегоДокумента = ТекущийДокумент.ДополнительныеРеквизиты.АктНомер;
				НоваяСтрока_ПТиУ.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.АктДата;
				НоваяСтрока_ПТиУ.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				НоваяСтрока_ПТиУ.СчетФактураДата  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураДата;
				
				НоваяСтрока_ПТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;
				НоваяСтрока_ПТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;
				НоваяСтрока_ПТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				НоваяСтрока_ПТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				//НоваяСтрока_ПТиУ.СкладНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.МестоХранения;
				//НоваяСтрока_ПТиУ.СкладУИД  = ТекущийДокумент.ДополнительныеРеквизиты.МестоХраненияУИД;
				
				//Ном = База.Перечисления.ФормыСобственности.Индекс(ТекущийДокумент.Документ.Контрагент.ФормаСобственности);
				//Имя = База.Метаданные().Перечисления.ФормыСобственности.EnumValues.Get(Ном).Name;
				
				//НоваяСтрока_ПТиУ.КонтрагентТип  = Имя;
				НоваяСтрока_ПТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				
				//НоваяСтрока_ПТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				
				//Если НоваяСтрока_ПТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ПТиУ.ДоговорУИД = "" Тогда
				//	НоваяСтрока_ПТиУ.ДоговорУИД  = "";
				//Иначе
				//	НоваяСтрока_ПТиУ.ДоговорНомер   = ТекущийДокумент.Номер;
				//	НоваяСтрока_ПТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				//КонецЕсли;	
				
				
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_ПТиУ.Товары.Добавить();
					НовТовар.Количество  = 1;
					НовТовар.Цена = СтрокаТЧ.Сумма;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					
					НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_ПТиУ.УИД,НоваяСтрока_ПТиУ, НовТовар.Сумма, НовТовар.СуммаНДС);
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.АвтомобильУИД = СтрокаТЧ.НоменклатураУИД;
					НовТовар.АвтомобильВИН = СтрокаТЧ.НоменклатураВИН;
					НовТовар.АвтомобильНаименование = СтрокаТЧ.Номенклатура;
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Поступление автомобилей"
		
		#Область НЭПередачаНаПереработку //ДОКУМЕНТ "Передача товаров"	
		//*************************************************************************************
		//Документ Передача в переработку
		//*************************************************************************************
		
	ИначеЕсли текЭлемент.Ключ = "НЭПередачаНаПереработку" Тогда
		
		Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
			Если ТекущийДокумент.Товары.Количество()=0 или ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН = Объект.Организация.ИНН Тогда
				Продолжить;
			КонецЕсли;
				НоваяСтрока_ПТиУ = ПередачаВПереработку.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
				
				НоваяСтрока_ПТиУ.УИД  = УИД_Строка;
				НоваяСтрока_ПТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_ПТиУ.Номер = ТекущийДокумент.Номер;
				
				НоваяСтрока_ПТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;;
				НоваяСтрока_ПТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;;
				НоваяСтрока_ПТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				НоваяСтрока_ПТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				НоваяСтрока_ПТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				
				НоваяСтрока_ПТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				Если НоваяСтрока_ПТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ПТиУ.ДоговорУИД = "" Тогда
					НоваяСтрока_ПТиУ.ДоговорУИД  = "";
				Иначе	
					НоваяСтрока_ПТиУ.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
					НоваяСтрока_ПТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				КонецЕсли;	
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_ПТиУ.Товары.Добавить();
					НовТовар.Количество  = 1;
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.АвтомобильУИД = СтрокаТЧ.АвтомобильУИД;
					НовТовар.АвтомобильВИН = СтрокаТЧ.АвтомобильВИН;
					НовТовар.АвтомобильНаименование = СтрокаТЧ.Автомобиль;
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Передача в переработку"

		#Область НЭПриемИзПереработки //ДОКУМЕНТ "Поступление из переработки"	
		//*************************************************************************************
		//Документ Поступление из переработки
		//*************************************************************************************
		
	ИначеЕсли текЭлемент.Ключ = "НЭПриемИзПереработки" Тогда
		
		Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
			Если ТекущийДокумент.Товары.Количество()=0 или ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН = Объект.Организация.ИНН Тогда
				Продолжить;
			КонецЕсли;
				НоваяСтрока_ПТиУ = ВозвратИзПереработки.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
				
				НоваяСтрока_ПТиУ.УИД  = УИД_Строка;
				НоваяСтрока_ПТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_ПТиУ.Номер = ТекущийДокумент.Номер;
				
				НоваяСтрока_ПТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;;
				НоваяСтрока_ПТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;;
				НоваяСтрока_ПТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				НоваяСтрока_ПТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				НоваяСтрока_ПТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				
				НоваяСтрока_ПТиУ.НомерВходящегоДокумента = ТекущийДокумент.ДополнительныеРеквизиты.НомерВходящегоДокумента;
				НоваяСтрока_ПТиУ.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ДатаВходящегоДокумента;
				НоваяСтрока_ПТиУ.СчетФактураДата  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураДата;
				НоваяСтрока_ПТиУ.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_ПТиУ.Товары.Добавить();
					НовТовар.Количество  = 1;
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.АвтомобильУИД = СтрокаТЧ.АвтомобильУИД;
					НовТовар.АвтомобильВИН = СтрокаТЧ.АвтомобильВИН;
					НовТовар.АвтомобильНаименование = СтрокаТЧ.АВтомобиль;
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.БазовыйАвтомобильУИД = СтрокаТЧ.БазовыйАвтомобильУИД;
					НовТовар.БазовыйАвтомобильВИН = СтрокаТЧ.БазовыйАвтомобильВИН;
					НовТовар.БазовыйАвтомобильНаименование = СтрокаТЧ.БазовыйАВтомобиль;
					НовТовар.СуммаУслуг = СтрокаТЧ.ВсегоСНДС;
					
					НоваяСтрока_ПТиУ.ДоговорУИД     = СтрокаТЧ.ДоговорУИД;
					Если НоваяСтрока_ПТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ПТиУ.ДоговорУИД = "" Тогда
						НоваяСтрока_ПТиУ.ДоговорУИД  = "";
					Иначе	
						НоваяСтрока_ПТиУ.ДоговорНомер   =СтрокаТЧ.ДоговорНомер;
						НоваяСтрока_ПТиУ.ДоговорДата    = СтрокаТЧ.ДоговорДата;
					КонецЕсли;	
					
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Поступление автомобилей"

		#Область ПЕРЕМЕЩЕНИЕ_АВТОМОБИЛЕЙ //ДОКУМЕНТ "Перемещение товаров"	
		//*************************************************************************************
		//Документ Перемещение товаров
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "НЭПеремещение" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				НоваяСтрока_ПТиУ = ПеремещенияАвтомобилей.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
				
				НоваяСтрока_ПТиУ.УИД  = УИД_Строка;
				НоваяСтрока_ПТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_ПТиУ.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_ПТиУ.СкладПолучательУИД = ТекущийДокумент.ДополнительныеРеквизиты.СкладПолучательУИД;
				НоваяСтрока_ПТиУ.складПолучательНаименование = ТекущийДокумент.ДополнительныеРеквизиты.СкладПолучатель;
				НоваяСтрока_ПТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				ДокиПеремещения = Новый Соответствие;
				
				
				
				
				// Заполняем табличную часть "Склады-отправители" и "товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					УИДСклада= СтрокаТЧ.СкладОтправительУИД;
					НовСклад = ДокиПеремещения.Получить(УидСклада);
					Если НовСклад = неопределено Тогда
						НовСклад = НоваяСтрока_ПТиУ.СкладыОтправители.добавить();
						НовСклад.СкладОтправительУИД = УИДСклада;
						НовСклад.СкладОтправительНаименование = СтрокаТЧ.СкладОтправитель;
						ДокиПеремещения.Вставить(УИДСклада, НовСклад);
					КонецЕсли;	
					
					НовТовар = НовСклад.Товары.Добавить();
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.АвтомобильУИД = СтрокаТЧ.НоменклатураУИД;
					НовТовар.АвтомобильВИН = СтрокаТЧ.НоменклатураВИН;
					НовТовар.АвтомобильНаименование = СтрокаТЧ.Номенклатура;
					НовТовар.Агентский = не (СтрокаТЧ.СобственникИНН = Объект.Организация.ИНН);
					
				КонецЦикла;
			КонецЦикла;
		#КонецОбласти //Документ "Поступление автомобилей"
		
		#Область РЕАЛИЗАЦИЯ_АВТОМОБИЛЕЙ //ДОКУМЕНТ "Реализация товаров и услуг"	
		//*************************************************************************************
		//Документ Реализация товаров и услуг
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "НЭРеализация" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				Если ЗначениеЗаполнено(ТекущийДокумент.ДополнительныеРеквизиты.ОтчетАгента) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока_РТиУ = РеализацияАвтомобилей.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_РТиУ.УИД  = УИД_Строка;
				НоваяСтрока_РТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_РТиУ.СчетФактураНомер  = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				
				НоваяСтрока_РТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;
				НоваяСтрока_РТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;
				НоваяСтрока_РТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
				
				НоваяСтрока_РТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
				НоваяСтрока_РТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
				НоваяСтрока_РТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ОснованиеУИД;
				Если НоваяСтрока_РТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_РТиУ.ДоговорУИД = "" Тогда
					НоваяСтрока_РТиУ.ДоговорУИД  = "";
				Иначе	
					НоваяСтрока_РТиУ.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ОснованиеНомер;
					НоваяСтрока_РТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ОснованиеДата;
					НоваяСтрока_РТиУ.ДоговорТип    = ТекущийДокумент.ДополнительныеРеквизиты.Основание;
				КонецЕсли;	
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					НовТовар = НоваяСтрока_РТиУ.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_РТиУ.УИД;
					НовТовар.Количество  = СтрокаТЧ.Количество;
					НовТовар.Цена = СтрокаТЧ.Цена;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					
					НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_РТиУ.УИД, НоваяСтрока_РТиУ);
					НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					
					НоваяСтрока_РТиУ.СкладУИД = СтрокаТЧ.МестоХраненияУИД;
					НоваяСтрока_РТиУ.складНаименование =  СтрокаТЧ.МестоХранения;
					
					//УчетНДСКлиентСервер.РассчитатьСуммуНДС(НовТовар.сумма,Истина,УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НовТовар.СтавкаНДС, Ложь));					
					
					// Ищем номенклатуру
					//-----------------------------------------
					НовТовар.АвтомобильУИД = СтрокаТЧ.НоменклатураУИД;
					НовТовар.АвтомобильВИН = СтрокаТЧ.НоменклатураВИН;
					НовТовар.АвтомобильНаименование = СтрокаТЧ.Номенклатура;
					
				КонецЦикла;
				
				
				
			КонецЦикла;
		#КонецОбласти //Документ "Реализация автомобилей"
	
		
			#Область ПРИЕМ_АГЕНТОМ //ДОКУМЕНТ "Поступление товаров и услуг"	
			//*************************************************************************************
			//Документ Поступление товаров и услуг
			//*************************************************************************************
			
		ИначеЕсли текЭлемент.Ключ = "НЭПриемНаХранение" Тогда
				Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
					НоваяСтрока_ПТиУ = ПриемАгентом.Добавить();
					
					// Поиск документа
					// Ищем по УИДу, если не нашли - сохраняем уид
					УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
					
					НоваяСтрока_ПТиУ.УИД  = УИД_Строка;
					НоваяСтрока_ПТиУ.Дата = ТекущийДокумент.Дата;
					НоваяСтрока_ПТиУ.НомерВходящегоДокумента = ТекущийДокумент.ДополнительныеРеквизиты.ОснованиеНомер;
					НоваяСтрока_ПТиУ.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ОснованиеДата;
					
					НоваяСтрока_ПТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;;
					НоваяСтрока_ПТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;;
					НоваяСтрока_ПТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
					НоваяСтрока_ПТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
					
					
					НоваяСтрока_ПТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
					
					НоваяСтрока_ПТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
					
					Если НоваяСтрока_ПТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ПТиУ.ДоговорУИД = "" Тогда
						НоваяСтрока_ПТиУ.ДоговорУИД  = "";
					Иначе
						НоваяСтрока_ПТиУ.ДоговорНомер   = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
						НоваяСтрока_ПТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
					КонецЕсли;	
					
					НоваяСтрока_ПТиУ.СкладНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.МестоХранения;
					НоваяСтрока_ПТиУ.СкладУИД  = ТекущийДокумент.ДополнительныеРеквизиты.МестоХраненияУИД;
					
					
					
					// Заполняем табличную часть "Товары"
					//*********************************************
					Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
						НовТовар = НоваяСтрока_ПТиУ.Товары.Добавить();
						НовТовар.УИДДокумента = НоваяСтрока_ПТиУ.УИД;
						НовТовар.ОценкаСтоимости  = СтрокаТЧ.ОценкаСтоимости;
						
						// Ищем номенклатуру
						//-----------------------------------------
						НовТовар.АвтомобильУИД = СтрокаТЧ.НоменклатураУИД;
						НовТовар.АвтомобильВИН = СтрокаТЧ.НоменклатураВИН;
						НовТовар.АвтомобильНаименование = СтрокаТЧ.Номенклатура;
						
					КонецЦикла;
				КонецЦикла;	
				
			//КонецЕсли;
			#КонецОбласти //Документ "Поступление товаров и услуг"
		
			#Область ПЕРЕДАЧА_АГЕНТУ //ДОКУМЕНТ "Реализация товаров и услуг"	
			//*************************************************************************************
			//Документ Реализация товаров и услуг
			//*************************************************************************************
			
		ИначеЕсли текЭлемент.Ключ = "НЭПередачаНаХранение" Тогда
				Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
					НоваяСтрока_ПТиУ = ПередачаАгенту.Добавить();
					
					// Поиск документа
					// Ищем по УИДу, если не нашли - сохраняем уид
					УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
					
					НоваяСтрока_ПТиУ.УИД  = УИД_Строка;
					НоваяСтрока_ПТиУ.Дата = ТекущийДокумент.Дата;
					НоваяСтрока_ПТиУ.НомерВходящегоДокумента = ТекущийДокумент.ДополнительныеРеквизиты.ОснованиеНомер;
					НоваяСтрока_ПТиУ.ДатаВходящегоДокумента  = ТекущийДокумент.ДополнительныеРеквизиты.ОснованиеДата;
					
					НоваяСтрока_ПТиУ.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;;
					НоваяСтрока_ПТиУ.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;;
					НоваяСтрока_ПТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
					НоваяСтрока_ПТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
					
					
					НоваяСтрока_ПТиУ.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
					
					НоваяСтрока_ПТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
					
					Если НоваяСтрока_ПТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ПТиУ.ДоговорУИД = "" Тогда
						НоваяСтрока_ПТиУ.ДоговорУИД  = "";
					Иначе
						НоваяСтрока_ПТиУ.ДоговорНомер   = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
						НоваяСтрока_ПТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
					КонецЕсли;	
					
					
					
					
					
					// Заполняем табличную часть "Товары"
					//*********************************************
					Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
						
						НоваяСтрока_ПТиУ.СкладНаименование  = СтрокаТЧ.МестоХранения;
						НоваяСтрока_ПТиУ.СкладУИД  = СтрокаТЧ.МестоХраненияУИД;
						
						НовТовар = НоваяСтрока_ПТиУ.Товары.Добавить();
						НовТовар.УИДДокумента = НоваяСтрока_ПТиУ.УИД;
						НовТовар.ОценкаСтоимости  = СтрокаТЧ.ОценкаСтоимости;
						
						// Ищем номенклатуру
						//-----------------------------------------
						НовТовар.АвтомобильУИД = СтрокаТЧ.НоменклатураУИД;
						НовТовар.АвтомобильВИН = СтрокаТЧ.НоменклатураВИН;
						НовТовар.АвтомобильНаименование = СтрокаТЧ.Номенклатура;
						
					КонецЦикла;
				КонецЦикла;	
				
			//КонецЕсли;
			#КонецОбласти //Документ "Поступление товаров и услуг"
		
			#Область ОТЧЕТ_КОМИТЕНТУ //ДОКУМЕНТ "Отчет комитенту"	
			//*************************************************************************************
			//Документ Поступление товаров и услуг
			//*************************************************************************************
			
			ИначеЕсли текЭлемент.Ключ = "НЭОтчетАгента" Тогда
				Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
					
					Если ТекущийДокумент.ДОполнительныеРеквизиты.состояние = "АГЕНТИРОВАНИЕ" тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока_ОК = ОтчетКомитенту.Добавить();
					
					НоваяСтрока_ОК.Состояние = ТекущийДокумент.ДОполнительныеРеквизиты.состояние;
					// Поиск документа
					// Ищем по УИДу, если не нашли - сохраняем уид
					//УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
					
					НоваяСтрока_ОК.УИД  = ТекущийДокумент.ДополнительныеРеквизиты.ДокРасходУИД;
					НоваяСтрока_ОК.Дата = ТекущийДокумент.Дата;
					НоваяСтрока_ОК.Номер = ТекущийДокумент.Номер;
					
					НоваяСтрока_ОК.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентИНН;;
					НоваяСтрока_ОК.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентКПП;;
					НоваяСтрока_ОК.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
					НоваяСтрока_ОК.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформленияРасход;
					
					
					НоваяСтрока_ОК.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
					
					НоваяСтрока_ОК.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
					
					НоваяСтрока_ОК.ДокументПередачи_УИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДокПриходУИД;
					
					Если НоваяСтрока_ОК.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ОК.ДоговорУИД = "" Тогда
						НоваяСтрока_ОК.ДоговорУИД  = "";
					Иначе
						НоваяСтрока_ОК.ДоговорНомер   = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
						НоваяСтрока_ОК.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
					КонецЕсли;	
					
					
					
					
					// Заполняем табличную часть "Товары"
					//*********************************************
					Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
						НовТовар = НоваяСтрока_ОК.Товары.Добавить();
						НовТовар.УИДДокумента = НоваяСтрока_ОК.УИД;
						НовТовар.ОценкаСтоимости  = СтрокаТЧ.МинимальнаяЦенаПродажи;      
						НоваяСтрока_ОК.СкладНаименование  = СтрокаТЧ.МестоХранения;
						НоваяСтрока_ОК.СкладУИД  = СтрокаТЧ.МестоХраненияУИД;
						
						Если НоваяСтрока_ОК.Состояние = "РЕАЛИЗАЦИЯ" Тогда
							НовТовар.Сумма  = СтрокаТЧ.ЦенаРеализации;
							НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_ОК.УИД,НоваяСтрока_ОК);
							НовТовар.СуммаНДС  = СтрокаТЧ.СуммаНДС;
						
							НовТовар.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.ПокупательИНН;;
							НовТовар.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.ПокупательКПП;;
							НовТовар.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Покупатель;
							НовТовар.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.ПОкупательУИД;
							
							Если ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорУИД = "00000000-0000-0000-0000-000000000000" или ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорУИД = "" Тогда
								НовТовар.ДоговорУИД  = "";
							Иначе
								НовТовар.ДоговорНомер   = ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорНомер;
								НовТовар.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорДата;
								НовТовар.ДоговорУИД    	= ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорУИД;
								НовТовар.ДоговорТип    	= ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорТип;
							КонецЕсли;	
							
							
						КонецЕсли;	
					
						
						// Ищем номенклатуру
						//-----------------------------------------
						НовТовар.АвтомобильУИД = СтрокаТЧ.НоменклатураУИД;
						НовТовар.АвтомобильВИН = СтрокаТЧ.НоменклатураВИН;
						НовТовар.АвтомобильНаименование = СтрокаТЧ.Номенклатура;
						
					КонецЦикла;
				КонецЦикла;	
				
		//КонецЕсли;
			#КонецОбласти //Документ "Отчет агента"
		
		#Область ДоговорыТЭФЛ //ДОКУМЕНТ "Операция,введенная вручную"	
		//*************************************************************************************
		//Документ Передача в переработку
		//*************************************************************************************
		
	ИначеЕсли текЭлемент.Ключ = "ДоговорТЭФЛ" Тогда
		
		
		Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Дата", НачалоДня(ТекущийДокумент.ДополнительныеРеквизиты.датаЗакрытия));
			
			Выборка = ДоговорыТЭФЛ.НайтиСтроки(Отбор);
			Если Выборка.Количество() =0   Тогда
				НС = ДоговорыТЭФЛ.Добавить();
				НС.Дата = ТекущийДокумент.ДополнительныеРеквизиты.ДатаЗакрытия;
			Иначе
				НС = Выборка[0];
			КонецЕсли;
			
			НовыйДоговор = НС.Исполнители.Добавить();
			НовыйДоговор.КонтрагентНаименование = ТекущийДокумент.ДополнительныеРеквизиты.Контрагент;
			НовыйДоговор.КонтрагентИНН = ТекущийДокумент.ДополнительныеРеквизиты.ИНН;
			НовыйДоговор.АвтомобильСправочно = ТекущийДокумент.ДополнительныеРеквизиты.Автомобиль;
			НовыйДоговор.Сумма = ТекущийДокумент.ДополнительныеРеквизиты.Суммазатрат;
		КонецЦикла;			
		
		ДоговорыТЭФЛ.Сортировать("Дата");
		#КонецОбласти //Документ "Операция, введенная вручную"
			
//==========================================================================
// Раздел "КСО
//--------------------------------------------------------------------------
		#Область СТРАХОВЫЕ_СДЕЛКИ //ДОКУМЕНТ "Реализация товаров и услуг"	
		//*************************************************************************************
		//Документ Реализация товаров и услуг
		//*************************************************************************************
		
		ИначеЕсли текЭлемент.Ключ = "КСОСделкаСтрахование" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				
				
				//Если ТекущийДокумент.Товары.Количество()=0 Тогда
				//	Продолжить;
				//КонецЕсли;
				
				// Проверим необходимость заполнения
				Пропустить = Истина;
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					Если не СтрокаТЧ.ФормаОплаты="БезналСтраховая" Тогда
						Пропустить = Ложь;
						Прервать;
					КОнецЕсли;
				КонецЦикла;
				Если Пропустить Тогда   //Если нет ни одной строки с оплатой нам - пропускаем 
					Продолжить;
				КонецЕсли;
					

				НоваяСтрока_РТиУ = СтраховыеСделки.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				
				НоваяСтрока_РТиУ.УИД  = УИД_Строка;
				НоваяСтрока_РТиУ.Дата = ТекущийДокумент.Дата;
				НоваяСтрока_РТиУ.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_РТиУ.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентНаименование;
				
				НоваяСтрока_РТиУ.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				
				//НоваяСтрока_РТиУ.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				//Если НоваяСтрока_РТиУ.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_РТиУ.ДоговорУИД = "" Тогда
				//	НоваяСтрока_РТиУ.ДоговорУИД  = "";
				//Иначе	
				//	НоваяСтрока_РТиУ.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
				//	НоваяСтрока_РТиУ.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				//КонецЕсли;	
				
				
				// Заполняем табличную часть "Товары"
				//*********************************************
				Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
					Если СтрокаТЧ.ФормаОплаты="БезналСтраховая" Тогда
							Продолжить;
					КОнецЕсли;
					НовТовар = НоваяСтрока_РТиУ.Товары.Добавить();
					НовТовар.УИДДокумента = НоваяСтрока_РТиУ.УИД;
					НовТовар.Количество  = 1;
					НовТовар.Цена = СтрокаТЧ.Сумма;
					НовТовар.Сумма = СтрокаТЧ.Сумма;
					Если не ЗначениеЗаполнено(СтрокаТЧ.КонтрагентИНН) Тогда
						НовТовар.Страховая_КонтрагентНаименование = СтрокаТЧ.СтраховаяКомпания;
					Иначе	
						НовТовар.Страховая_КонтрагентУИД = СтрокаТЧ.КонтрагентУИД;
						НовТовар.Страховая_КонтрагентИНН = СтрокаТЧ.КонтрагентИНН;
						НовТовар.Страховая_КонтрагентКПП = СтрокаТЧ.КонтрагентКПП;
						НовТовар.Страховая_КонтрагентНаименование = СтрокаТЧ.Контрагент;
					КонецЕсли;	
					НовТовар.Номенклатура_Бланк  = СтрокаТЧ.Бланк;
					НовТовар.Номенклатура_ТипБланка = СтрокаТЧ.ТипБланка;
					НовТовар.Страховая_ДоговорДата = СтрокаТЧ.ДоговорДата;
					НовТовар.Страховая_ДоговорНомер = СтрокаТЧ.ДоговорНомер;
					
					//НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_РТиУ.УИД, НоваяСтрока_РТиУ);
					//НовТовар.СуммаНДС = СтрокаТЧ.СуммаНДС;
					//УчетНДСКлиентСервер.РассчитатьСуммуНДС(НовТовар.сумма,Истина,УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НовТовар.СтавкаНДС, Ложь));					
					
						
				КонецЦикла;
				
				
				
			КонецЦикла;
		#КонецОбласти //Документ "Реализация товаров и услуг"
		
		Иначе
		КонецЕсли;	

	КонецЦикла;
КонецЕсли;

Если ВидыДокументовДляВыгрузки_Доп.Количество()>0 Тогда

	Для каждого текЭлемент Из ДеревоДокументов_Источник_Доп Цикл
		Если ТекЭлемент.Значение = неопределено Тогда
			Продолжить;
		КонецЕсли;
		#Область ЗАКАЗ_НАРЯД // Документы "Поступление товаров и услуг"
		//*************************************************************************************
		//Документы Поступление товаров и услуг
		//*************************************************************************************
		
		Если текЭлемент.Ключ = "ЗаказНаряд" Тогда
			Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
				
				Если ТекущийДокумент.ДополнительныеРеквизиты.ОрганизацияИНН = Объект.Организация.ИНН Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока_ЗН = ЗаказНарядыПокупатель.Добавить();
				
				// Поиск документа
				// Ищем по УИДу, если не нашли - сохраняем уид
				УИД_Строка = ТекущийДокумент.УИД;
				НоваяСтрока_ЗН.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформления;
				
				НоваяСтрока_ЗН.УИД   = УИД_Строка;
				НоваяСтрока_ЗН.Дата  = ТекущийДокумент.ДополнительныеРеквизиты.ДатаЗакрытия;
				НоваяСтрока_ЗН.Номер = ТекущийДокумент.Номер;
				НоваяСтрока_ЗН.НомерСЧФ = ТекущийДокумент.ДополнительныеРеквизиты.СчетФактураНомер;
				НоваяСтрока_ЗН.АвтомобильВИН = ТекущийДокумент.ДополнительныеРеквизиты.АвтомобильВИН;
				НоваяСтрока_ЗН.АвтомобильУИД = ТекущийДокумент.ДополнительныеРеквизиты.АвтомобильУИД;
				НоваяСтрока_ЗН.АвтомобильНаименование = ТекущийДокумент.ДополнительныеРеквизиты.Автомобиль;
				НоваяСтрока_ЗН.ВидРемонтаНаименование = ТекущийДокумент.ДополнительныеРеквизиты.ВидРемонта;
				НоваяСтрока_ЗН.ВидРемонтаУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ВидРемонтаУИД;
				
				НоваяСтрока_ЗН.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.ОрганизацияИНН;
				НоваяСтрока_ЗН.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.ОрганизацияКПП;
				НоваяСтрока_ЗН.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Организация;
				
				//НоваяСтрока_ЗН.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.КонтрагентУИД;
					
				НоваяСтрока_ЗН.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
				Если НоваяСтрока_ЗН.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ЗН.ДоговорУИД = "" Тогда
					НоваяСтрока_ЗН.ДоговорУИД  = "";
				Иначе
					НоваяСтрока_ЗН.ДоговорНомер   =ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
					НоваяСтрока_ЗН.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
				КонецЕсли;	
					
					
				НоваяСтрока_ЗН.СуммаДокумента = ТекущийДокумент.ДополнительныеРеквизиты.СуммаДокумента;
				НоваяСтрока_ЗН.СтавкаНДС      = НайтиСтавкуНДС(ТекущийДокумент.ДополнительныеРеквизиты.ПредставлениеНДС,НоваяСтрока_ЗН.УИД, НоваяСтрока_ЗН);
				НоваяСтрока_ЗН.СуммаНДС       = ТекущийДокумент.ДополнительныеРеквизиты.СуммаНДС;
					
				
				
			КонецЦикла;
			
		#КонецОбласти
		
		#Область ОТЧЕТ_КОМИССИОНЕРА //ДОКУМЕНТ "Отчет комиссионера"	
		//*************************************************************************************
		//Документ Отчет комиссионера о продажах
		//*************************************************************************************
			
			ИначеЕсли текЭлемент.Ключ = "НЭОтчетАгента" Тогда
				Для Каждого ТекущийДокумент из текЭлемент.Значение Цикл
					
					//Если ТекущийДокумент.ДОполнительныеРеквизиты.состояние = "АГЕНТИРОВАНИЕ" тогда
					//	Продолжить;
					//КонецЕсли;
					
					Если не ЗначениеЗаполнено(ТекущийДокумент.ДополнительныеРеквизиты.ДокРасходУИД) Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока_ОК = ОтчетАгента.Добавить();
					
					//НоваяСтрока_ОК.Состояние = ТекущийДокумент.ДОполнительныеРеквизиты.состояние;
					// Поиск документа
					// Ищем по УИДу, если не нашли - сохраняем уид
					//УИД_Строка = База.XMLСтрока(ТекущийДокумент.УИД);
					
					НоваяСтрока_ОК.УИД  = ТекущийДокумент.ДополнительныеРеквизиты.ДокРасходУИД;
					НоваяСтрока_ОК.Дата = ТекущийДокумент.Дата;
					НоваяСтрока_ОК.Номер = ТекущийДокумент.Номер;
					
					НоваяСтрока_ОК.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.ОрганизацияИНН;;
					НоваяСтрока_ОК.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.ОрганизацияКПП;;
					НоваяСтрока_ОК.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Организация;
					НоваяСтрока_ОК.ТочкаОформленияНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.ТочкаОформленияРасход;
					
					
					//НоваяСтрока_ОК.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.ОрганизацияУИД;
					
					НоваяСтрока_ОК.ДоговорУИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорУИД;
					
					НоваяСтрока_ОК.ДокументПередачи_УИД     = ТекущийДокумент.ДополнительныеРеквизиты.ДокПриходУИД;
					
					Если НоваяСтрока_ОК.ДоговорУИД = "00000000-0000-0000-0000-000000000000" или НоваяСтрока_ОК.ДоговорУИД = "" Тогда
						НоваяСтрока_ОК.ДоговорУИД  = "";
					Иначе
						НоваяСтрока_ОК.ДоговорНомер   = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорНомер;
						НоваяСтрока_ОК.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ДоговорДата;
					КонецЕсли;	
					
					
					
					
					// Заполняем табличную часть "Товары"
					//*********************************************
					Для Каждого СтрокаТЧ из ТекущийДокумент.Товары Цикл
						НовТовар = НоваяСтрока_ОК.Товары.Добавить();
						НовТовар.УИДДокумента = НоваяСтрока_ОК.УИД;
						НовТовар.ОценкаСтоимости  = СтрокаТЧ.МинимальнаяЦенаПродажи;
						//ОценкаСтоимостиПередачаНаХранение;
						НоваяСтрока_ОК.СкладНаименование  = СтрокаТЧ.МестоХранения;
						НоваяСтрока_ОК.СкладУИД  = СтрокаТЧ.МестоХраненияУИД;
						
						НовТовар.Сумма  = СтрокаТЧ.ЦенаРеализации;
						НовТовар.СтавкаНДС = НайтиСтавкуНДС(СтрокаТЧ.ПредставлениеНДС,НоваяСтрока_ОК.УИД,НоваяСтрока_ОК);
						НовТовар.СуммаНДС  = СтрокаТЧ.СуммаНДС;
						
						НовТовар.КонтрагентИНН  = ТекущийДокумент.ДополнительныеРеквизиты.ПокупательИНН;;
						НовТовар.КонтрагентКПП  = ТекущийДокумент.ДополнительныеРеквизиты.ПокупательКПП;;
						НовТовар.КонтрагентНаименование  = ТекущийДокумент.ДополнительныеРеквизиты.Покупатель;
						НовТовар.КонтрагентУИД  = ТекущийДокумент.ДополнительныеРеквизиты.ПОкупательУИД;
						НовТовар.ДатаДокументРеализации  = ТекущийДокумент.ДополнительныеРеквизиты.РеализацияДата;
						НовТовар.НомерДокументРеализации  = ТекущийДокумент.ДополнительныеРеквизиты.РеализацияНомер;
							
						Если ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорУИД = "00000000-0000-0000-0000-000000000000" или ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорУИД = "" Тогда
							НовТовар.ДоговорУИД  = "";
						Иначе
							НовТовар.ДоговорНомер   = ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорНомер;
							НовТовар.ДоговорДата    = ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорДата;
							НовТовар.ДоговорУИД    	= ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорУИД;
							НовТовар.ДоговорТип    	= ТекущийДокумент.ДополнительныеРеквизиты.ПокупательДоговорТип;
						КонецЕсли;	
							
						Если НовТовар.Сумма = 0 Тогда	//Отсутствует сумма реализации
							//Предполагаем, что это возврат
							НоваяСтрока_ОК.состояние = "Возврат";
						Иначе
							НоваяСтрока_ОК.Состояние = "Реализация";
						КонецЕсли;	
							
						
						
						// Ищем номенклатуру
						//-----------------------------------------
						НовТовар.АвтомобильУИД = СтрокаТЧ.НоменклатураУИД;
						НовТовар.АвтомобильВИН = СтрокаТЧ.НоменклатураВИН;
						НовТовар.АвтомобильНаименование = СтрокаТЧ.Номенклатура;
						
					КонецЦикла;
				КонецЦикла;	
				
		//КонецЕсли;
			#КонецОбласти //Документ "Отчет агента"
		

	КонецЕсли;
		
	КонецЦикла;
	КонецЕсли;

	База = неопределено;
	
	РезультатЗагрузки = Ложь;

	Возврат ДозаполнитьНаСервере(Ложь);
	
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыНаСервере() 
	ЕстьОшибки = Ложь;
	
	// Получим параметры организации
	//**********************************************************************************
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	
	ОтборПодразделений = ТекущаяНастройкаОбмена.СоответствияОрганизаций.НайтиСтроки(СтруктураОтбора);
	
	Если ОтборПодразделений.количество() = 0 Тогда
		Параметр_Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Параметр_ПодразделениеЗатрат = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Параметр_Склад = Справочники.Склады.ПустаяСсылка();
		Параметр_СтатьяЗатрат = Справочники.СтатьиЗатрат.ПустаяСсылка();
	Иначе
		Параметр_Подразделение = ОтборПодразделений[0].ПодразделениеОрганизации;
		Параметр_ПодразделениеЗатрат = ОтборПодразделений[0].ПодразделениеЗатрат;
		Параметр_Склад = ОтборПодразделений[0].Склад;
		Параметр_СтатьяЗатрат = ОтборПодразделений[0].СтатьяЗатрат;
	КонецЕсли;	

	
	
	//Загружаем авансовые отчеты
	//**********************************************************************************
	 Если ЗагрузитьАвансовыеОтчеты(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке авансовых отчетов выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем списание товаров
	//**********************************************************************************
	 Если ЗагрузитьСписаниеТоваров(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов списания товаров выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем списание товаров
	//**********************************************************************************
	 Если ЗагрузитьДоукомплектациюАвтомобилей(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов списания товаров выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем оприходование товаров
	//**********************************************************************************
	 Если ЗагрузитьОприходованиеТоваров(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов оприходования товаров выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	//Загружаем комплектацию товаров
	//**********************************************************************************
	 Если ЗагрузитьКомплектациюТоваров(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов оприходования товаров выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем перемещение товаров
	//**********************************************************************************
	 Если ЗагрузитьПеремещения(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов перемещения товаров выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем документы поступления
	//**********************************************************************************
	 Если ЗагрузитьДокументыПТиУ(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов поступления выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем документы поступления материалов
	//**********************************************************************************
	 Если ЗагрузитьПоступлениеМатериалов(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов поступления выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем документы реализации
	//**********************************************************************************
	 Если ЗагрузитьДокументыРТиУ(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов реализации выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем документы реализации
	//**********************************************************************************
	 Если ЗагрузитьДокументыРеализацииМатериалов(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов реализации выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем документы реализации услуг
	//**********************************************************************************
	 Если ЗагрузитьДокументыРеализацииУслуг(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов реализации выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем возвраты поставщикам
	//**********************************************************************************
	 Если ЗагрузитьВозвратыПоставщикам(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов возвратов поставщикам выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем возвраты покупателям
	//**********************************************************************************
	 Если ЗагрузитьВозвратыОтПокупателей() = ложь Тогда
		Сообщить("При загрузке документов возвратов от покупателей выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем документы заказ-наряда
	//**********************************************************************************
	 Если ЗагрузитьДокументыЗаказНаряда(Параметр_Подразделение,Параметр_ПодразделениеЗатрат, Параметр_Склад, Параметр_СтатьяЗатрат) = ложь Тогда
		Сообщить("При загрузке документов заказ-наряд выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем документы услуги производства
	//**********************************************************************************
	 Если ЗагрузитьДокументыУслугПроизводства(Параметр_Подразделение,Параметр_ПодразделениеЗатрат, Параметр_Склад, Параметр_СтатьяЗатрат) = ложь Тогда
		Сообщить("При загрузке документов услуги производства выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	//Загружаем документы заказ-наряда (покупатель)
	//**********************************************************************************
	 Если ЗагрузитьДокументыЗаказНарядаПокупатель(Параметр_Подразделение,Параметр_ПодразделениеЗатрат, Параметр_Склад, Параметр_СтатьяЗатрат) = ложь Тогда
		Сообщить("При загрузке документов заказ-наряд (покупатель) выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//==========================================================================
	// Раздел "Учет автомобилей"
	//--------------------------------------------------------------------------
	
	//Загружаем документы поступления автомобилей
	//**********************************************************************************
	 Если ЗагрузитьДокументыПоступлениеАвтомобилей(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов поступления автомобилей выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	//Загружаем документы Прием агентом
	//**********************************************************************************
	 Если ЗагрузитьДокументыПриемАгентом(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов поступления выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем документы Передача агенту
	//**********************************************************************************
	 Если ЗагрузитьДокументыПередачаАгенту(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов поступления выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем акты доработки
	//**********************************************************************************
	 Если ЗагрузитьАктыДоработки(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке актов доработки выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем передача в переработку
	//**********************************************************************************
	 Если ЗагрузитьПередачуВПереработку(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке передачи в переработку выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем поступление из переработки
	//**********************************************************************************
	 Если ЗагрузитьПоступлениеИзПереработки(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
	    Сообщить("При загрузке поступления из переработки выявлены ошибки");
	    ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем возвраты по агентскому договору
	//**********************************************************************************
	 Если ЗагрузитьВозвратыКомитенту(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов возвратов поставщикам выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем перемещение автомобилей
	//**********************************************************************************
	 Если ЗагрузитьПеремещенияАвтомобилей(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов перемещения товаров выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Загружаем отчеты комитенту
	//**********************************************************************************
	 Если ЗагрузитьОтчетКомитенту(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке отчетов комитенту выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем возвраты комитенту
	 Если ЗагрузитьВозвратыКомитенту(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке возвратов комитенту выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем отчеты агента
	//**********************************************************************************
	 Если ЗагрузитьОтчетАгента(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке отчетов агента выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	
	//Загружаем документы реализации автомобилей
	//**********************************************************************************
	 Если ЗагрузитьДокументыРеализацииАвтомобилей(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке документов реализации автомобилей выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Загружаем документы реализации автомобилей
	//**********************************************************************************
	 Если ЗагрузитьДоговорыТЭФЛ(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке договоров доставки выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	
	
	//==========================================================================
	// Раздел "КСО
	//--------------------------------------------------------------------------
	
	//Загружаем страховые сделки
	//**********************************************************************************
	 Если ЗагрузитьСтраховыеСделки(Параметр_Подразделение, Параметр_Склад) = ложь Тогда
		Сообщить("При загрузке страховых сделок выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Технические фукции
	УстановитьУсловноеОформление();

	//Установить заголовок протокола ошибок
	Элементы.ПротоколЗагрузкиГруппа.Заголовок = "Протокол загрузки ("+Строка(ОшибкиЗагрузки.Количество())+"/"+Строка(ПроблемныеКонтрагенты.Количество())+")";
	
	Возврат не ЕстьОшибки;
	
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//База = ПодключитьИБ();
	
	//Если База = неопределено Тогда
	//	Сообщить("Не удалось подключиться к базе");
	//	Отказ = истина;
	//	Возврат;
	//КонецЕсли; 
	//База = ПолучитьИзВременногоХранилища(Объект.ХранилищеОбъекта).Объект;	
	
	//ВидыДокументов.Очистить();
	
	//ДоступныеДокументы = База.Интеграция.ДоступныеДляВыгрузкиДокументы();
	ЗаполнитьВидыДокументов();
	
	//Если ДоступныеДокументы.количество()=0 Тогда
	//	Сообщить("Нет доступных документов");
	//	Отказ = истина;
	//	Возврат;
	//КонецЕсли;
	//Для каждого текСтрока Из ДоступныеДокументы Цикл
	//	ВидыДокументов.Добавить(текСтрока.Имя, текСтрока.Представление, Истина);		
	//КонецЦикла; 
	
	//База = неопределено;	
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Сообщить("Начало загрузки: "+ТекущаяДата());
	ЗаполнитьДокументыНаСервере();	
	НастроитьОтображение(Ложь);
	Сообщить("Окончание загрузки: "+ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Функция ДозаполнитьНаСервере(ТолькоОшибки)
	
	
	ЕстьОшибки = Ложь;
	//Дозаполним перечень номенклатуры
	//**********************************************************************************
	Если ЗаполнитьНоменклатуру(ТолькоОшибки) = ложь Тогда
		//Сообщить("Заполнение документов не производилось. В перечне номенклатуры подобраны не все позиции!!!");
		//Возврат Ложь;     
	КонецЕсли;	

	//Дозаполним документы поступления
	//**********************************************************************************
	 Если ЗаполнитьДокументыПТиУ(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов поступления выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	//Дозаполним документы поступления материалов
	//**********************************************************************************
	 Если ЗаполнитьДокументыПоступленияМатериалов(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов поступления выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	//Дозаполним документы поступления материалов
	//**********************************************************************************
	 Если ЗаполнитьДокументыРеализацииМатериалов(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов поступления выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	//Дозаполним документы поступления материалов
	//**********************************************************************************
	 Если ЗаполнитьДокументыРеализацииУслуг(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов поступления выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	//Дозаполним документы реализации
	//**********************************************************************************
	 Если ЗаполнитьДокументыРТиУ(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов реализации выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним документы заказ-наряда
	//**********************************************************************************
	 Если ЗаполнитьДокументыЗаказНаряда(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов заказ-наряд выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним документы УслугПроизводства
	//**********************************************************************************
	 Если ЗаполнитьДокументыУслугПроизводства(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов услуги производства выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним документы заказ-наряда (покупатель)
	//**********************************************************************************
	 Если ЗаполнитьДокументыЗаказНарядаПокупатель(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов заказ-наряд (покупатель) выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним документы авансовый отчет
	//**********************************************************************************
	 Если ЗаполнитьДокументыАвансовыйОтчет(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении авансовых отчетов выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним документы оприходование товаров
	//**********************************************************************************
	 Если ЗаполнитьОприходованиеТоваров(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов оприходования товаров выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним документы комплектации товаров
	//**********************************************************************************
	 Если ЗаполнитьКомплектациюТоваров(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов комплектации товаров выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним документы списания товаров
	//**********************************************************************************
	 Если ЗаполнитьСписаниеТоваров(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов списания товаров выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним документы доукомплектации автомобилей
	//**********************************************************************************
	 Если ЗаполнитьДоукомплектациюАвтомобилей(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов списания товаров выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним возврат поставщику
	//**********************************************************************************
	 Если ЗаполнитьВозвратПоставщику(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов возврата поставщику выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним возврат от покупателя
	//**********************************************************************************
	 Если ЗаполнитьВозвратПокупателя(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов возврата от покупателя выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним перемещение
	//**********************************************************************************
	 Если ЗаполнитьПеремещения(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов перемещения выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним Межхолжер
	//**********************************************************************************
	Если ЗаполнитьМежхолдер() = Ложь Тогда
		Сообщить("При заполнении документов межхолдера выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	
	//==========================================================================
	// Раздел "Учет автомобилей"
	//--------------------------------------------------------------------------
	
	//Дозаполним документы поступления  автомобиля
	//**********************************************************************************
	 Если ЗаполнитьДокументыПоступлениеАвтомобилей(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов поступления выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	//Дозаполним документы Прием агентом
	//**********************************************************************************
	 Если ЗаполнитьПриемАгентом(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов поступление по агентскому договору выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Дозаполним документы Передача агенту
	//**********************************************************************************
	 Если ЗаполнитьПередачуАгенту(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов поступление по агентскому договору выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Дозаполним документы Перемещения автомобилей
	//**********************************************************************************
	 Если ЗаполнитьПеремещениеАвтомобилей(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов перемещения автомобилей выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Дозаполним документы Отчет комитенту
	//**********************************************************************************
	 Если ЗаполнитьОтчетКомитенту(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении отчетов комитенту выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Дозаполним документы Отчет агента
	//**********************************************************************************
	 Если ЗаполнитьОтчетАгента(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении отчетов агента выявлены ошибки");
		ЕстьОшибки = Истина;
		
	КонецЕсли;	
	
	//Дозаполним передачу в переработку
	//**********************************************************************************
	 Если ЗаполнитьПередачуВПереработку(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении актов доработки выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним поступление из переработки
	//**********************************************************************************
	 Если ЗаполнитьПоступлениеИзПереработки(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении актов доработки выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним акты доработки
	//**********************************************************************************
	 Если ЗаполнитьАктыДоработки(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении актов доработки выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним документы реализации автомобилей
	//**********************************************************************************
	 Если ЗаполнитьДокументыРеализацииАвтомобилей(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении документов реализации выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	//Дозаполним договоры доставки (ТЭФЛ)
	//**********************************************************************************
	 Если ЗаполнитьДоговорыТЭФЛ(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении договоров ТЭФЛ выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	
	

	//==========================================================================
	// Раздел "Учет КСО"
	//--------------------------------------------------------------------------
	
	//Дозаполним страховые сделки
	//**********************************************************************************
	 Если ЗаполнитьСтраховыеСделки(ТолькоОшибки) = ложь Тогда
		Сообщить("При заполнении страховых сделок выявлены ошибки");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	
		
	//Свернем проблемных контрагентов
	ПК = ПроблемныеКонтрагенты.Выгрузить();
	ПК.Свернуть("ИНН,КПП,Наименование,ВажностьПроблемы,ОписаниеПроблемы,Контрагент");
	ПроблемныеКонтрагенты.Загрузить(ПК);
	
	//Установить заголовок протокола ошибок
	Элементы.ПротоколЗагрузкиГруппа.Заголовок = "Протокол заполнения ("+Строка(ОшибкиЗагрузки.Количество())+"/"+Строка(ПроблемныеКонтрагенты.Количество())+")";
	
	УстановитьУсловноеОформление();
	Возврат ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура Дозаполнить(Команда)
	ОшибкиЗагрузки.Очистить();
	ПроблемныеКонтрагенты.Очистить();
	Межхолдер.Очистить();
	Межхолдер_Товары.Очистить();
	
	ДозаполнитьНаСервере(Истина);
КонецПроцедуры


&НаКлиенте
Процедура Загрузить(Команда)
	ЗагрузитьДокументыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТолькоМежхолдер(Команда)
	ЗагрузитьДокументы_Межхолдер();
КонецПроцедуры


#Область УПРАВЛЕНИЕ_ФОРМОЙ

&НаКлиенте
Процедура ПриАктивизацииСтрокиОбщая(Элемент)
	Попытка
		Если Элемент.ТекущаяСтрока<>неопределено Тогда
			СтруктураОтбора = Новый ФиксированнаяСтруктура("УИДДокумента",Элемент.ТекущиеДанные.УИД);
		Иначе
			СтруктураОтбора = Новый ФиксированнаяСтруктура("УИДДокумента","пустой");
		КонецЕсли;	
	Исключение	
		СтруктураОтбора = Новый ФиксированнаяСтруктура("УИДДокумента","пустой");
	КонецПопытки;	
		
	элементы.ОшибкиЗагрузки.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Если Элементы.СтраницыНастройки.Видимость = истина Тогда
		НастроитьОтображение(Ложь);	
	Иначе
		НастроитьОтображение(Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображение(ВключитьНастройку)
	
	// Управление окнами документов
	//***********************************************************
	ПоказыватьОкноНастройки = Истина;  // Если нет ни одного документа в табличных частях - автоматически включаем окно настройки
	
	//===========================================================
	//Блок СТО
	//-----------------------------------------------------------
	Если РеализацияТиУ.Количество() = 0 Тогда
		Элементы.Страница_Реализация.Видимость = Ложь;
	Иначе
		Элементы.Страница_Реализация.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если ВозвратТоваровПоставщику.Количество() = 0 Тогда
		Элементы.Страница_ВозвратТоваровПоставщику.Видимость = Ложь;
	Иначе
		Элементы.Страница_ВозвратТоваровПоставщику.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
		
	Если ВозвратПокупателя.Количество() = 0 Тогда
		Элементы.Страница_ВозвратТоваровПокупателя.Видимость = Ложь;
	Иначе
		Элементы.Страница_ВозвратТоваровПокупателя.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
		
	Если АвансовыйОтчет.Количество() = 0 Тогда
		Элементы.Страница_АвансовыеОтчеты.Видимость = Ложь;
	Иначе
		Элементы.Страница_АвансовыеОтчеты.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
		
	Если Перемещения.Количество() = 0 Тогда
		Элементы.Страница_Перемещение.Видимость = Ложь;
	Иначе
		Элементы.Страница_Перемещение.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если СписаниеТоваров.Количество() = 0 Тогда
		Элементы.Страница_СписаниеТоваров.Видимость = Ложь;
	Иначе
		Элементы.Страница_СписаниеТоваров.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если ОприходованиеТоваров.Количество() = 0 Тогда
		Элементы.Страница_ОприходованиеТоваров.Видимость = Ложь;
	Иначе
		Элементы.Страница_ОприходованиеТоваров.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если Межхолдер.Количество() = 0 Тогда
		Элементы.Страница_Межхолдер.Видимость = Ложь;
	Иначе
		Элементы.Страница_Межхолдер.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
		
	Если ЗаказНаряды.Количество() = 0 Тогда
		Элементы.Страница_ЗаказНаряды.Видимость = Ложь;
	Иначе
		Элементы.Страница_ЗаказНаряды.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	

	Если УслугиПроизводства.Количество() = 0 Тогда
		Элементы.Страница_УслугиПроизводства.Видимость = Ложь;
	Иначе
		Элементы.Страница_УслугиПроизводства.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	

	Если ЗаказНарядыПокупатель.Количество() = 0 Тогда
		Элементы.Страница_ЗаказНарядыПокупатель.Видимость = Ложь;
	Иначе
		Элементы.Страница_ЗаказНарядыПокупатель.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	

	Если ПоступлениеТоваровУслуг.Количество() = 0 Тогда
		Элементы.Страница_ПоступлениеТоваровУслуг.Видимость = Ложь;
	Иначе
		Элементы.Страница_ПоступлениеТоваровУслуг.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	

	Если РеализацияМатериалов.Количество() = 0 Тогда
		Элементы.Страница_РеализацияМатериалов.Видимость = Ложь;
	Иначе
		Элементы.Страница_РеализацияМатериалов.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	

	Если РеализацияУслуг.Количество() = 0 Тогда
		Элементы.Страница_РеализацияУслуг.Видимость = Ложь;
	Иначе
		Элементы.Страница_РеализацияУслуг.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	

	Если РеализацияТиУ.Количество() = 0 Тогда
		Элементы.Страница_Реализация.Видимость = Ложь;
	Иначе
		Элементы.Страница_Реализация.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если Комплектация.Количество() = 0 Тогда
		Элементы.Страница_Комплектация.Видимость = Ложь;
	Иначе
		Элементы.Страница_Комплектация.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	

	
	//===========================================================
	//Блок Реализация автомобилей
	//-----------------------------------------------------------
	Если ДоукомплектацияАвтомобилей.Количество() = 0 Тогда
		Элементы.Страница_ДоукомплектацияАвтомобилей.Видимость = Ложь;
	Иначе
		Элементы.Страница_ДоукомплектацияАвтомобилей.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если РеализацияАвтомобилей.Количество() = 0 Тогда
		Элементы.Страница_РеализацияАвтомобилей.Видимость = Ложь;
	Иначе
		Элементы.Страница_РеализацияАвтомобилей.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если АктДоработки.Количество() = 0 Тогда
		Элементы.Страница_АктДоработки.Видимость = Ложь;
	Иначе
		Элементы.Страница_АктДоработки.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
		
	Если ПередачаВПереработку.Количество() = 0 Тогда
		Элементы.Страница_ПередачаВПереработку.Видимость = Ложь;
	Иначе
		Элементы.Страница_ПередачаВПереработку.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
		
	Если ВозвратИзПереработки.Количество() = 0 Тогда
		Элементы.Страница_ВозвратИзПереработки.Видимость = Ложь;
	Иначе
		Элементы.Страница_ВозвратИзПереработки.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
		
	Если ПеремещенияАвтомобилей.Количество() = 0 Тогда
		Элементы.Страница_ПеремещениеАвтомобилей.Видимость = Ложь;
	Иначе
		Элементы.Страница_ПеремещениеАвтомобилей.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
		
	Если ПоступлениеАвтомобилей.Количество() = 0 Тогда
		Элементы.Страница_ПоступлениеАвтомобилей.Видимость = Ложь;
	Иначе
		Элементы.Страница_ПоступлениеАвтомобилей.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	

	Если ПриемАгентом.Количество() = 0 Тогда
		Элементы.Страница_ПриемАгентом.Видимость = Ложь;
	Иначе
		Элементы.Страница_ПриемАгентом.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если ПередачаАгенту.Количество() = 0 Тогда
		Элементы.Страница_ПередачаАгенту.Видимость = Ложь;
	Иначе
		Элементы.Страница_ПередачаАгенту.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если ОтчетКомитенту.Количество() = 0 Тогда
		Элементы.Страница_ОтчетКомитенту.Видимость = Ложь;
	Иначе
		Элементы.Страница_ОтчетКомитенту.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если ОтчетАгента.Количество() = 0 Тогда
		Элементы.Страница_ОтчетАгенту.Видимость = Ложь;
	Иначе
		Элементы.Страница_ОтчетАгенту.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если ДоговорыТЭФЛ.Количество() = 0 Тогда
		Элементы.Страница_ДоговорыТЭФЛ.Видимость = Ложь;
	Иначе
		Элементы.Страница_ДоговорыТЭФЛ.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Если ПоступлениеМатериалов.Количество() = 0 Тогда
		Элементы.Страница_ПоступлениеМатериалов.Видимость = Ложь;
	Иначе
		Элементы.Страница_ПоступлениеМатериалов.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	//===========================================================
	//Блок КСО
	//-----------------------------------------------------------
	Если СтраховыеСделки.Количество() = 0 Тогда
		Элементы.Страница_СтраховыеСделки.Видимость = Ложь;
	Иначе
		Элементы.Страница_СтраховыеСделки.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
		
	
	Если ПереченьНоменклатуры.Количество() = 0 Тогда
		Элементы.Страница_Номенклатура.Видимость = Ложь;
	Иначе
		Элементы.Страница_Номенклатура.Видимость = Истина;
		ПоказыватьОкноНастройки = Ложь;
	КонецЕсли;	
	
	Элементы.Дозаполнить.Видимость = (ОшибкиЗагрузки.Количество()>0);	
	
	// Управление окнами настройки
	//***********************************************************
	Если  ВключитьНастройку или ПоказыватьОкноНастройки Тогда
		Элементы.СтраницыЗагрузки.Видимость = ложь;
		Элементы.СтраницыНастройки.Видимость = Истина;
		Элементы.Настройки.Заголовок = "Скрыть настройки";
	Иначе
		Элементы.СтраницыЗагрузки.Видимость = Истина;
		Элементы.СтраницыНастройки.Видимость = Ложь;
		Элементы.Настройки.Заголовок = "Настройки";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСОшибкамиПриИзменении(Элемент)
	Если _ТолькоСОшибками Тогда
		
		ОтборОшибки = Новый ФиксированнаяСтруктура("ЕстьОшибки",Истина);
		
		Элементы.АвансовыйОтчет.ОтборСтрок = ОтборОшибки;
		Элементы.Перемещения.ОтборСтрок = ОтборОшибки;
		Элементы.ПеремещенияАвтомобилей.ОтборСтрок = ОтборОшибки;
		Элементы.СписаниеТоваров.ОтборСтрок = ОтборОшибки;
		Элементы.ДоукомплектацияАвтомобилей.ОтборСтрок = ОтборОшибки;
		Элементы.Комплектация.ОтборСтрок = ОтборОшибки;
		Элементы.РеализацияТиУ.ОтборСтрок = ОтборОшибки;
		Элементы.ЗаказНаряды.ОтборСтрок = ОтборОшибки;
		Элементы.УслугиПроизводства.ОтборСтрок = ОтборОшибки;
		Элементы.ЗаказНарядыПокупатель.ОтборСтрок = ОтборОшибки;
		Элементы.Межхолдер.ОтборСтрок = ОтборОшибки;
		Элементы.ПоступлениеТоваровУслуг.ОтборСтрок = ОтборОшибки;
		Элементы.ПоступлениеАвтомобилей.ОтборСтрок = ОтборОшибки;
		Элементы.ВозвратТоваровПоставщику.ОтборСтрок = ОтборОшибки;
		Элементы.ВозвратПокупателя.ОтборСтрок = ОтборОшибки;
		Элементы.ОтчетКомитенту.ОтборСтрок = ОтборОшибки;
		Элементы.ПриемАгентом.ОтборСтрок = ОтборОшибки;
		Элементы.ПередачаАгенту.ОтборСтрок = ОтборОшибки;
		Элементы.АктДоработки.ОтборСтрок = ОтборОшибки;
		Элементы.СтраховыеСделки.ОтборСтрок =ОтборОшибки;
		Элементы.ПередачаВПереработку.ОтборСтрок =ОтборОшибки;
		Элементы.ВозвратИзПереработки.ОтборСтрок =ОтборОшибки;
		Элементы.ДоговорыТЭФЛ.ОтборСтрок =ОтборОшибки;
		Элементы.ПоступлениеМатериалов.ОтборСтрок=ОтборОшибки;
		Элементы.РеализацияМатериалов.ОтборСтрок=ОтборОшибки;
		Элементы.РеализацияУслуг.ОтборСтрок=ОтборОшибки;
		Элементы.РеализацияАвтомобилей.ОтборСтрок=ОтборОшибки;
	
		
	Иначе
		 
		Элементы.АвансовыйОтчет.ОтборСтрок = неопределено;
		Элементы.Перемещения.ОтборСтрок = неопределено;
		Элементы.ПеремещенияАвтомобилей.ОтборСтрок = неопределено;
		Элементы.СписаниеТоваров.ОтборСтрок = неопределено;
		Элементы.ДоукомплектацияАвтомобилей.ОтборСтрок = неопределено;
		Элементы.Комплектация.ОтборСтрок = неопределено;
		Элементы.РеализацияТиУ.ОтборСтрок = неопределено;
		Элементы.ЗаказНаряды.ОтборСтрок = неопределено;
		Элементы.УслугиПроизводства.ОтборСтрок = неопределено;
		Элементы.ЗаказНарядыПокупатель.ОтборСтрок = неопределено;
		Элементы.Межхолдер.ОтборСтрок = неопределено;
		Элементы.ПоступлениеТоваровУслуг.ОтборСтрок = неопределено;
		Элементы.ПоступлениеАвтомобилей.ОтборСтрок = неопределено;
		Элементы.ВозвратТоваровПоставщику.ОтборСтрок = неопределено;
		Элементы.ВозвратПокупателя.ОтборСтрок = неопределено;
		Элементы.ОтчетКомитенту.ОтборСтрок = неопределено;
		Элементы.ПриемАгентом.ОтборСтрок = неопределено;
		Элементы.ПередачаАгенту.ОтборСтрок = неопределено;
		Элементы.АктДоработки.ОтборСтрок = Неопределено;
		Элементы.СтраховыеСделки.ОтборСтрок = неопределено;
		Элементы.ПередачаВПереработку.ОтборСтрок =неопределено;
		Элементы.ВозвратИзПереработки.ОтборСтрок =неопределено;
		Элементы.ДоговорыТЭФЛ.ОтборСтрок =неопределено;
		Элементы.ПоступлениеМатериалов.ОтборСтрок =неопределено;
		Элементы.РеализацияМатериалов.ОтборСтрок =неопределено;
		Элементы.РеализацияУслуг.ОтборСтрок =неопределено;
		Элементы.РеализацияАвтомобилей.ОтборСтрок=неопределено;		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура АвансовыйОтчетПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТоваровУслугПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписаниеТоваровПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоукомплектацияАвтомобилейПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ЗаказНарядыПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте   
Процедура РеализацияТиУПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратТоваровПоставщикуПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПокупателяПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядыПриАктивизацииПоля(Элемент)
		ПриАктивизацииСтрокиОбщая(Элемент);
	КонецПроцедуры
	
&НаКлиенте
Процедура ЗаказНарядыПокупательПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АвансовыйОтчетПриАктивизацииПоля(Элемент)
		ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеТоваровУслугПриАктивизацииПоля(Элемент)
		ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияТиУПриАктивизацииПоля(Элемент)
		ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеАвтомобилейПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписаниеТоваровПриАктивизацииПоля(Элемент)
		ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратТоваровПоставщикуПриАктивизацииПоля(Элемент)
		ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПокупателяПриАктивизацииПоля(Элемент)
		ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ПоступлениеАвтомобилейПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АктДоработкиПриАктивизацииСтроки(Элемент)
		ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АктДоработкиПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияАвтомобилейПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияАвтомобилейПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияАвтомобилейПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РеализацияАвтомобилейПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНарядыПокупательПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПроизводстваПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ОприходованиеТоваровПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОприходованиеТоваровПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПриемАгентомПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПриемАгентомПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПередачаАгентуПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПередачаАгентуПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтраховыеСделкиПриАктивизацииСтроки(Элемент)
		ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтраховыеСделкиПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетКомитентуПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетКомитентуПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоукомплектацияАвтомобилейПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПередачаВПереработкуПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПередачаВПереработкуПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратИзПереработкиПриАктивизацииСтроки(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратИзПереработкиПриАктивизацииПоля(Элемент)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПереченьНоменклатурыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущаяСтрока<>неопределено Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура("УИДДокумента",Элемент.ТекущиеДанные.УИДНоменклатуры);
	Иначе
		СтруктураОтбора = Новый ФиксированнаяСтруктура("УИДДокумента","пустой");
	КонецЕсли;	
	элементы.ОшибкиЗагрузки.ОтборСтрок = СтруктураОтбора;
КонецПроцедуры

&НаКлиенте
Процедура МежхолдерПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока<>неопределено Тогда
		
		СтруктураОтбораТовара = Новый ФиксированнаяСтруктура("Дата,ИННПокупателя,КПППокупателя,ИННПродавца,КПППродавца", Элемент.ТекущиеДанные.Дата,
																														 Элемент.ТекущиеДанные.ИННПокупателя,
																														 Элемент.ТекущиеДанные.КПППокупателя,
																														 Элемент.ТекущиеДанные.ИННПродавца,
																														 Элемент.ТекущиеДанные.КПППродавца);
		//СтруктураОтбораТовара = Новый ФиксированнаяСтруктура("ИННПокупателя", Элемент.ТекущиеДанные.ИННПокупателя);
		//СтруктураОтбораТовара = Новый ФиксированнаяСтруктура("КПППокупателя", Элемент.ТекущиеДанные.КПППокупателя);
		//СтруктураОтбораТовара = Новый ФиксированнаяСтруктура("ИННПродавца", Элемент.ТекущиеДанные.ИННПродавца);
		//СтруктураОтбораТовара = Новый ФиксированнаяСтруктура("КПППродавца", Элемент.ТекущиеДанные.КПППродавца);
	Иначе
		СтруктураОтбораТовара = Новый ФиксированнаяСтруктура("Дата", Дата("20250101")); //то есть должен быть пустой результат
	КонецЕсли;	

	Элементы.Межхолдер_Товары.ОтборСтрок = СтруктураОтбораТовара;
	
	ПриАктивизацииСтрокиОбщая(Элемент);
	
КонецПроцедуры

//-------------------------------------------------------------------------------------

&НаКлиенте
Процедура ВидыДокументовПриИзменении(Элемент)
	
	ОчищаемТаблицы();
	
	НастроитьОтображение(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОчищаемТаблицы();
	НастроитьОтображение(ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ОчищаемТаблицы();
	НастроитьОтображение(ложь);
КонецПроцедуры


#КонецОбласти

#Область ФУНКЦИИ_ЗАПОЛНЕНИЯ
//**********************************************************************************
//Функции заполнения
//**********************************************************************************

&НаСервере
Функция ЗаполнитьНоменклатуру(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	СоответствиеЕИ = Новый Соответствие;	
	
	ВидНоменклатуры = ТекущаяНастройкаОбмена.ВидНоменклатурыДляЗапчастей;
	ВидНоменклатуры_Материалы = ТекущаяНастройкаОбмена.ВидНоменклатурыДляМатериалов;
	ГруппаНовойНоменклатуры = ТекущаяНастройкаОбмена.ГруппаДляЗапчастей;
	ГруппаНовойНоменклатуры_Материалы = ТекущаяНастройкаОбмена.ГруппаДляМатериалов;
	ГруппаНовойНоменклатуры_Инструмент = ТекущаяНастройкаОбмена.ГруппаДляИнструмента;
	
	Для Каждого СтрокаТЧ из ПереченьНоменклатуры Цикл	
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		
		//. Ищем по Соответствию
		//----------------------------------------------------------
		Если Метаданные.РегистрыСведений.Найти("АВ_СоответствиеОбъектовМатрица")<>неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	АВ_СоответствиеОбъектовМатрица.Объект КАК Объект
				|ИЗ
				|	РегистрСведений.АВ_СоответствиеОбъектовМатрица КАК АВ_СоответствиеОбъектовМатрица
				|ГДЕ
				|	АВ_СоответствиеОбъектовМатрица.УИД_Матрица ПОДОБНО &УИД_Матрица";
		
		Запрос.УстановитьПараметр("УИД_Матрица", СтрокаТЧ.УИДНоменклатуры);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТЧ.Комментарий = "Найдено по соответствию, установленному вручную ";
			СтрокаТЧ.Номенклатура = ВыборкаДетальныеЗаписи.Объект;
			Прервать;;
		КонецЦикла;
		

		УИДНоменклатуры = Новый УникальныйИдентификатор(СтрокаТЧ.УИДНоменклатуры);
	
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УИДНоменклатуры).ПолучитьОбъект();
		Если не Номенклатура = неопределено Тогда
			СтрокаТЧ.Комментарий = "Найдено по УИДу";
			СтрокаТЧ.Номенклатура = Номенклатура.Ссылка;
			Продолжить;
		КонецЕсли;
	   КонецЕсли;
		
		//1. Ищем по УИДу
		//----------------------------------------------------------
		УИДНоменклатуры = Новый УникальныйИдентификатор(СтрокаТЧ.УИДНоменклатуры);
	
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УИДНоменклатуры).ПолучитьОбъект();
		Если не Номенклатура = неопределено Тогда
			СтрокаТЧ.Комментарий = "Найдено по УИДу";
			СтрокаТЧ.Номенклатура = Номенклатура.Ссылка;
			Продолжить;
		КонецЕсли;
	
		
		// 2. Ищем по коду обмена
		Если СтрокаТЧ.КодОбмена<>"" Тогда
			ЗапросПоискПоАртикулу = Новый Запрос;
			ЗапросПоискПоАртикулу.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Артикул = &Артикул";
			
			ЗапросПоискПоАртикулу.УстановитьПараметр("Артикул", СтрокаТЧ.КодОбмена);
			
			РезультатЗапросПоискПоАртикулу = ЗапросПоискПоАртикулу.Выполнить();
			
			ВыборкаРезультатЗапросПоискПоАртикулу = РезультатЗапросПоискПоАртикулу.Выбрать();
			
			Пока ВыборкаРезультатЗапросПоискПоАртикулу.Следующий() Цикл
				СтрокаТЧ.Комментарий = "Найдено по артикулу";
				СтрокаТЧ.Номенклатура = ВыборкаРезультатЗапросПоискПоАртикулу.ссылка;
				Продолжить;
				
			КонецЦикла;
		КонецЕсли;
		
		// 3. Ищем по коду обмена  как уиду
		Если СтрДлина(СтрокаТЧ.КодОбмена)>15 тогда
			УИДНоменклатуры = Новый УникальныйИдентификатор(СтрокаТЧ.КодОбмена);
	
			Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УИДНоменклатуры).ПолучитьОбъект();
			Если не Номенклатура = неопределено Тогда
				СтрокаТЧ.Комментарий = "Найдено по УИДу-коду";
				СтрокаТЧ.Номенклатура = Номенклатура.Ссылка;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТЧ.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() и _СоздатьНенайденныеЭлементы Тогда
			НовЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовЭлемент.Наименование = СтрокаТЧ.Наименование;
			НовЭлемент.НаименованиеПолное = СтрокаТЧ.наименование;  
			Если СтрокаТЧ.ВидНоменклатуры = "Материалы" Тогда
				НовЭлемент.ВидНоменклатуры = ВидНоменклатуры_Материалы;
				НовЭлемент.Родитель = ГруппаНовойНоменклатуры_Материалы;
			ИначеЕсли СтрокаТЧ.ВидНоменклатуры = "Инвентарь" Тогда
				НовЭлемент.ВидНоменклатуры =ВидНоменклатуры_Малоценка;
				НовЭлемент.Родитель = ГруппаНовойНоменклатуры_Инструмент;
			Иначе
				НовЭлемент.ВидНоменклатуры = ВидНоменклатуры;                    
				НовЭлемент.Родитель = ГруппаНовойНоменклатуры;
			КонецЕсли;	
			НовЭлемент.ВидНоменклатуры = ВидНоменклатуры;
			НовЭлемент.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку(УИДНоменклатуры));
			#Область ЕдиницаИзмерения
			//Единица измерения
			ЕИ_Ссылка =  СоответствиеЕИ.Получить(СтрокаТЧ.КодЕИпоОКЕИ);
			Если ЕИ_Ссылка = Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КлассификаторЕдиницИзмерения.Ссылка
				|ИЗ
				|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
				|ГДЕ
				|	КлассификаторЕдиницИзмерения.Код = &Код";
				
				Запрос.УстановитьПараметр("Код", СтрокаТЧ.КодЕИпоОКЕИ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НовЭлемент.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				
				Если НовЭлемент.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
					//Создаем новую единицу измерения с кодом без названия
					НоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
					НоваяЕдиницаИзмерения.Код = СтрокаТЧ.КодЕИпоОКЕИ;
					НоваяЕдиницаИЗмерения.Наименование = "ЗАПОЛНИТЕ!!!";
					НоваяЕдиницаИзмерения.Записать();
					НовЭлемент.ЕдиницаИзмерения = НоваяЕдиницаИзмерения.Ссылка;
					СтрокаТЧ.ЕстьОшибки = Истина;
					СтрокаТЧ.Комментарий = СтрокаТЧ.Комментарий + " Проверьте наименование ЕИ";
				КонецЕсли;	
				
				
			КонецЕсли;
			#КонецОбласти
			НовЭлемент.Записать();
			СтрокаТЧ.Номенклатура = НовЭлемент.Ссылка;
			СтрокаТЧ.Новая = Истина;
		КонецЕсли;
		
		Если СтрокаТЧ.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИДНоменклатуры, "Ошибка номенклатуры "+СтрокаТЧ.Наименование);
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	
	//ПРИВОДИМ в СООТВЕТСТВИЕ НОМЕНКЛАТУРУ
	Если СоответствиеНаименования или СоответствиеЕИ_Номенклатуры Тогда
		Для Каждого СтрокаТЧ из ПереченьНоменклатуры Цикл
			Если не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			НомОбъект = СтрокаТЧ.Номенклатура.ПолучитьОбъект();
			Изменен = Ложь;
			Если СоответствиеНаименования и СтрокаТЧ.Наименование<>СтрокаТЧ.Номенклатура.Наименование Тогда
				Свойство = НайтиДопРеквизитПоИмени("СтароеНаименование");
				Если Свойство<>неопределено Тогда 
					СтрокаСРеквизитом = НомОбъект.ДополнительныеРеквизиты.Найти(Свойство);
					Если СтрокаСРеквизитом = неопределено Тогда
						СтрокаСРеквизитом = НомОбъект.ДополнительныеРеквизиты.Добавить();
						СтрокаСРеквизитом.СвойСтво = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","СтароеНаименование");
					КонецЕсли;	
					СтрокаСРеквизитом.Значение = НомОбъект.Наименование;
					Изменен=Истина;
					НомОбъект.Наименование = СтрокаТЧ.Наименование;
					НомОбъект.НаименованиеПолное = СтрокаТЧ.Наименование;
					НомОбъект.Записать();
				КонецЕсли;
			КонецЕсли;	
			Если СоответствиеЕИ_Номенклатуры и СтрокаТЧ.КодЕИпоОКЕИ<>СтрокаТЧ.Номенклатура.ЕдиницаИзмерения.Код Тогда
				ЕИ_Ссылка =  СоответствиеЕИ.Получить(СтрокаТЧ.КодЕИпоОКЕИ);
				Если ЕИ_Ссылка = Неопределено Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	КлассификаторЕдиницИзмерения.Ссылка
					|ИЗ
					|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
					|ГДЕ
					|	КлассификаторЕдиницИзмерения.Код = &Код";
				
					Запрос.УстановитьПараметр("Код", СтрокаТЧ.КодЕИпоОКЕИ);
				
					РезультатЗапроса = Запрос.Выполнить();
				
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						СоответствиеЕИ.Вставить(СтрокаТЧ.КодЕИпоОКЕИ,ВыборкаДетальныеЗаписи.ссылка);
						ЕИ_Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
					КонецЦикла;
				   КонецЕсли;
				   Если ЕИ_ссылка<>неопределено и ЕИ_Ссылка.Наименование<>"ЗАПОЛНИТЕ!!!" Тогда
					   НомОбъект.ЕдиницаИзмерения = Еи_Ссылка;
						Изменен=Истина;
				   КонецЕсли;
			   КонецЕсли;
			   Если Изменен Тогда
				   НомОбъект.записать();
				 КонецЕсли; 
		КонецЦикла;		
	КонецЕсли;
	
	Возврат не ЕстьОшибки;	
	
	
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыАвансовыйОтчет(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из АвансовыйОтчет Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		//ФизЛицо
		
		СтрокаТЧ.ФизЛицо = НайтиФизЛицо(СтрокаТЧ.ФизЛицоНаименование);
		
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.АвансовыйОтчет.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			СтрокаТЧ_Товары.СчетУчета = СтруктураОрганизации.СчетУчета;
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = истина;
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		
	КонецЦикла;	
		
		// Номенклатура
		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьСписаниеТоваров(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из СписаниеТоваров Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		СтрокаТЧ.ПодразделениеЗатрат = СтруктураОрганизации.ПодразделениеЗатрат;
		СтрокаТЧ.Склад = СтруктураОрганизации.склад;
		
		СтрокаТЧ.СчетЗатрат = СтруктураОрганизации.СчетЗатратДляСписания;
		СтрокаТЧ.СтатьяЗатрат = СтруктураОрганизации.СтатьяЗатрат;
		СтрокаТЧ.НоменклатурнаяГруппаДляСписания = СтруктураОрганизации.НоменклатурнаяГруппаДляСписания;
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ТребованиеНакладная.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			СтрокаТЧ_Товары.СчетУчета = СтруктураОрганизации.СчетУчета;
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ_Товары.УИДДокумента, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДоукомплектациюАвтомобилей(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ДоукомплектацияАвтомобилей Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.подразделение;
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		СтрокаТЧ.НоменклатурнаяГруппа = СтруктураОрганизации.НоменклатурнаяГруппаДляСписания;
		СтрокаТЧ.ПодразделениеЗатрат = СтруктураОрганизации.ПодразделениеЗатрат;
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ТребованиеНакладная.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		СтрокаТЧ.Автомобиль = НайтиАвтомобиль(СтрокаТЧ.АвтомобильВИН, "", СтрокаТЧ.АвтомобильНаименование);
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Материалы Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ_Товары.УИДДокумента, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьОприходованиеТоваров(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ОприходованиеТоваров Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ОприходованиеТоваров.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			СтрокаТЧ_Товары.СчетУчета = СтруктураОрганизации.СчетУчета;
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ_Товары.УИДДокумента, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьКомплектациюТоваров(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из Комплектация Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.КомплектацияНоменклатуры.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Если СтрокаТЧ.Комплект.Количество()=1 Тогда
			СтрокаТЧ.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
		Иначе
			СтрокаТЧ.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация;
		КонецЕсли;	
		
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Комплект Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ_Товары.УИДДокумента, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Комплектующие Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ_Товары.УИДДокумента, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьПеремещения(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из Перемещения Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформленияОтправитель = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияОтправительНаименование);
		СтрокаТЧ.ТочкаОформленияПолучатель = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияПолучательНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформленияОтправитель);		
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ПеремещениеТоваров.ПолучитьСсылку(УИД).ПолучитьОбъект();
		Если  Док<>неопределено и Док.Организация<>объект.Организация Тогда
			Док = Неопределено;
	        СтрокаТЧ.УИДкакРеквизит = Истина;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДополнительныеСведения.Объект КАК Объект
				|ИЗ
				|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				|ГДЕ
				|	ДополнительныеСведения.Значение = &Значение
				|	И ДополнительныеСведения.Свойство.Имя = ""Матрица_УИД""
				|	И ДополнительныеСведения.Объект.Организация = &Организация";
	
			Запрос.УстановитьПараметр("Значение", СтрокаТЧ.УИД);
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
			РезультатЗапроса = Запрос.Выполнить();
	
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Док = ВыборкаДетальныеЗаписи.Объект;
			КонецЦикла;
	
		КонецЕсли;
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			СтрокаТЧ_Товары.СчетУчета = СтруктураОрганизации.СчетУчета;
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ_Товары.УИДДокумента, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыПТиУ(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ПоступлениеТоваровУслуг Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Проверяем дату входящего документа, при условии, что в настройке указано использовать ее как дату документа
		Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
			Если не ЗначениеЗаполнено(СтрокаТЧ.ДатаВходящегоДокумента) Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.Уид, "Не заполнена дата входящего документа");
			КонецЕсли;	
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);
		
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, 
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Если не СтрокаТЧ.Документ.пустая() Тогда
			СтрокаТЧ.СчетФактура = НайтиСчетФактуруПолученную(СтрокаТЧ.Документ);
		КонецЕсли;	
		
		// Номенклатура
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			СтрокаТЧ_Товары.СчетУчета = СтруктураОрганизации.СчетУчета;
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыПоступленияМатериалов(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ПоступлениеМатериалов Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
			Если не ЗначениеЗаполнено(СтрокаТЧ.ДатаВходящегоДокумента) Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.Уид, "Не заполнена дата входящего документа");
			КонецЕсли;	
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);
		
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, 
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Если не СтрокаТЧ.Документ.пустая() Тогда
			СтрокаТЧ.СчетФактура = НайтиСчетФактуруПолученную(СтрокаТЧ.Документ);
		КонецЕсли;	
		
		// Номенклатура
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыПоступлениеАвтомобилей(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ПоступлениеАвтомобилей Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
			Если не ЗначениеЗаполнено(СтрокаТЧ.ДатаВходящегоДокумента) Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.Уид, "Не заполнена дата входящего документа");
			КонецЕсли;	
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		Если ТекущаяНастройкаОбмена.ПодразделенияИзСкладаОУ Тогда
			СтрокаТЧ.АВ_Склад = НайтиСклад(СтрокаТЧ.СкладНаименование, СтрокаТЧ.СкладУИД);
			СтрокаТЧ.ПодразделениеОрганизации = НайтиПодразделениеПоСкладу(СтрокаТЧ.АВ_Склад);
			СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
			Если не ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеОрганизации) Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Необходимо привязать подразделение к складу-отправителю");
			КонецЕсли;
		Иначе
			СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
			СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		КонецЕсли;
		
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, Истина, СтрокаТЧ.КонтрагентНаименование);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, 
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Если не СтрокаТЧ.Документ.пустая() Тогда
			СтрокаТЧ.СчетФактура = НайтиСчетФактуруПолученную(СтрокаТЧ.Документ);
		КонецЕсли;	
		
		// Номенклатура
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВИН, СтрокаТЧ_Товары.АвтомобильУИД, СтрокаТЧ_Товары.АвтомобильНаименование);
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьАктыДоработки(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из АктДоработки Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, Истина, СтрокаТЧ.КонтрагентНаименование);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") Тогда
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																		  , 
																		  , 
																		  ,
					   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, 
					           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
							            СтруктураОрганизации.Подразделение,
												  СтрокаТЧ.ТочкаОформления,"Договор доработки", 
									  СтруктураОрганизации.ВидРасчетовДоговора);
			Иначе
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
														СтрокаТЧ.договорНомер,
														СтрокаТЧ.ДоговорДата,
																			 ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, 
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
			КонецЕсли;		  
										   
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Если не СтрокаТЧ.Документ.пустая() Тогда
			СтрокаТЧ.СчетФактура = НайтиСчетФактуруПолученную(СтрокаТЧ.Документ);
		КонецЕсли;	
		
		// Номенклатура
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВИН, СтрокаТЧ_Товары.АвтомобильУИД, СтрокаТЧ_Товары.АвтомобильНаименование);
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
	АктДоработки.Сортировать("Дата");
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьПередачуВПереработку(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ПередачаВПереработку Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, Истина, СтрокаТЧ.КонтрагентНаименование);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			
			СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
											 СтрокаТЧ.ДоговорНомер, 
												  СтрокаТЧ.ДоговорДата, 
												   СтрокаТЧ.ДоговорУИД,
					   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, 
					           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
							            СтруктураОрганизации.Подразделение,
												  СтрокаТЧ.ТочкаОформления,"", 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ПередачаТоваров.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		
		// Номенклатура
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВИН, СтрокаТЧ_Товары.АвтомобильУИД, СтрокаТЧ_Товары.АвтомобильНаименование);
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьПоступлениеИзПереработки(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ВозвратИзПереработки Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		СтрокаТЧ.ПодразделениеЗатрат = СтруктураОрганизации.ПодразделениеЗатрат;
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, Истина, СтрокаТЧ.КонтрагентНаименование);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		КонецЕсли;	
			// Договор
			
		СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
													 СтрокаТЧ.ДоговорНомер, 
													  СтрокаТЧ.ДоговорДата, 
													   СтрокаТЧ.ДоговорУИД,
					          Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, 
					       СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
							                   СтруктураОрганизации.Подразделение,
									   			  СтрокаТЧ.ТочкаОформления,"", 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
		Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
		КонецЕсли;
			
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ПоступлениеИзПереработки.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Если не СтрокаТЧ.Документ.пустая() Тогда
			СтрокаТЧ.СчетФактура = НайтиСчетФактуруПолученную(СтрокаТЧ.Документ);
		КонецЕсли;	
		
		// Номенклатура
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВИН, СтрокаТЧ_Товары.АвтомобильУИД, СтрокаТЧ_Товары.АвтомобильНаименование);
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
			СтрокаТЧ_Товары.БазовыйАвтомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.БазовыйАвтомобильВИН, СтрокаТЧ_Товары.БазовыйАвтомобильУИД, СтрокаТЧ_Товары.БазовыйАвтомобильНаименование);
			СтрокаТЧ_Товары.ПередачаВПереработку = НайтиДокументПередачи(СтрокаТЧ_Товары.БазовыйАвтомобиль,ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
			
			Если не ЗначениеЗаполнено(СтрокаТЧ_Товары.ПередачаВПереработку) Тогда
				СтрокаТЧ.ТребуетсяПередачаВПереработку = Истина;
			КонецЕсли;
			
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
			СтрокаТЧ_Товары.СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТЧ.СчетФактураДата),Перечисления.СтавкиНДС.НДС20,Перечисления.СтавкиНДС.БезНДС);
			СтрокаТЧ_Товары.СуммаНДС = ?(ЗначениеЗаполнено(СтрокаТЧ.СчетФактураДата),СтрокаТЧ_Товары.СуммаУслуг*20/120,0);
			ПлановаяСтоимость = ПолучитьСебестоимость(СтрокаТЧ_Товары.БазовыйАвтомобиль,СтрокаТЧ.Склад,Объект.Организация, СтрокаТЧ.ПодразделениеОрганизации,НачалоМесяца(СтрокаТЧ.Дата),КонецМесяца(СтрокаТЧ.Дата),Ложь,,ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
			Если ПлановаяСтоимость = 0 и ЗначениеЗаполнено(СтрокаТЧ_Товары.ПередачаВПереработку) Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Автомобиль не передан в переработку ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
			СтрокаТЧ_Товары.ПлановаяСтоимость = ПлановаяСтоимость + СтрокаТЧ_Товары.СуммаУслуг-СтрокаТЧ_Товары.СуммаНДС; 
		КонецЦикла;	
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьПриемАгентом(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ПриемАгентом Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		                        
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		//Если ТекущаяНастройкаОбмена.ПодразделенияИзСкладаОУ Тогда
		//	СтрокаТЧ.АВ_Склад = НайтиСклад(СтрокаТЧ.СкладНаименование, СтрокаТЧ.СкладУИД);
		//	СтрокаТЧ.ПодразделениеОрганизации = НайтиПодразделениеПоСкладу(СтрокаТЧ.АВ_Склад);
		//	СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		//Иначе
			СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
			СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		//КонецЕсли;
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, Истина, СтрокаТЧ.КонтрагентНаименование);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, 
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								             СтрокаТЧ.ПодразделениеОрганизации,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СКомитентом,
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								             СтрокаТЧ.ПодразделениеОрганизации,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		
		// Номенклатура
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВин,СтрокаТЧ_Товары.АвтомобильУИД,СтрокаТЧ_Товары.АвтомобильНаименование);
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьПередачуАгенту(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ПередачаАгенту Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		                        
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		Если ТекущаяНастройкаОбмена.ПодразделенияИзСкладаОУ Тогда
			СтрокаТЧ.АВ_Склад = НайтиСклад(СтрокаТЧ.СкладНаименование, СтрокаТЧ.СкладУИД);
			СтрокаТЧ.ПодразделениеОрганизации = НайтиПодразделениеПоСкладу(СтрокаТЧ.АВ_Склад);
			СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		Иначе
			СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
			СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		КонецЕсли;
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, Истина, СтрокаТЧ.КонтрагентНаименование);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, 
						           										 Ложь, 
								             СтрокаТЧ.ПодразделениеОрганизации,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером,
						           Ложь, 
								             СтрокаТЧ.ПодразделениеОрганизации,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		
		// Номенклатура
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВин,СтрокаТЧ_Товары.АвтомобильУИД,СтрокаТЧ_Товары.АвтомобильНаименование);
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьПеремещениеАвтомобилей(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ПеремещенияАвтомобилей Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		
		//Подразделение
		Если ТекущаяНастройкаОбмена.ПодразделенияИзСкладаОУ Тогда
			СтрокаТЧ.СкладПолучатель = НайтиСклад(СтрокаТЧ.СкладПолучательНаименование, СтрокаТЧ.СкладПолучательУИД);
			СтрокаТЧ.ПодразделениеПолучатель = НайтиПодразделениеПоСкладу(СтрокаТЧ.СкладПолучатель);
			Если не ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеПолучатель) Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Необходимо привязать подразделение к складу");
			КонецЕсли;
		Иначе
		КонецЕсли;	
		
		
		//Ищем все документы с уидом 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеСведения.Объект КАК Объект,
		|	ДополнительныеСведения.Объект.ПодразделениеОтправитель КАК ПодразделениеОтправитель
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|	И ДополнительныеСведения.Значение = &Значение";
		
		Запрос.УстановитьПараметр("Значение", СтрокаТЧ.УИД);
		Запрос.УстановитьПараметр("Свойство", ДопРеквизит_УИДПеремещения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПереченьДокументов = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаСклады из СтрокаТЧ.СкладыОтправители Цикл
			
			//Подразделение
			СтрокаСклады.СкладОтправитель = НайтиСклад(СтрокаСклады.СкладОтправительНаименование, СтрокаСклады.СкладОтправительУИД);
			СтрокаСклады.ПодразделениеОтправитель = НайтиПодразделениеПоСкладу(СтрокаСклады.СкладОтправитель);
			Если не ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеПолучатель) Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Необходимо привязать подразделение к складу-отправителю");
			КонецЕсли;
			
			
			Для Каждого СтрокаТЗ из ПереченьДокументов Цикл
				Если СтрокаТЗ.ПодразделениеОтправитель = СтрокаСклады.ПодразделениеОтправитель Тогда
					СтрокаСклады.Документ = СтрокаТЗ.Объект;
					ПереченьДокументов.Удалить(СтрокаТЗ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Номенклатура
			
			Для Каждого СтрокаТЧ_Товары из СтрокаСклады.Товары Цикл
				СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВин,СтрокаТЧ_Товары.АвтомобильУИД,СтрокаТЧ_Товары.АвтомобильНаименование);
				Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
					СтрокаТЧ.ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;	
		
		Для Каждого ОставшийсяДокумент из ПереченьДокументов Цикл
			НС = СтрокаТЧ.СкладыОтправители.добавить();
			НС.ПодразделениеОтправитель = ОставшийсяДокумент.ПодразделениеОтправитель;
			НС.Документ = ОставшийсяДокумент.Объект;
		КонецЦикла;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьОтчетКомитенту(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ОтчетКомитенту Цикл
		
		Док = неопределено;
		ДокР = Неопределено;
		ДокКД = Неопределено;
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		                        
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		СтрокаТЧ.АВ_Склад = НайтиСклад(СтрокаТЧ.СкладНаименование, СтрокаТЧ.СкладУИД);
		СтрокаТЧ.ПодразделениеОрганизации = НайтиПодразделениеПоСкладу(СтрокаТЧ.АВ_Склад);
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, Истина, СтрокаТЧ.КонтрагентНаименование);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, 
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								             СтрокаТЧ.ПодразделениеОрганизации,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СКомитентом,
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								             СтрокаТЧ.ПодразделениеОрганизации,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Если СтрокаТЧ.Состояние = "ВОЗВРАТ" Тогда
			//Ищем не было ли до этого реализации сделано этим документом
			Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			Если Док<>Неопределено и не Док.ПометкаУдаления Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Необходимо удалить документ и все связанные с ним (реализация и корректировка долга), если они были созданы");
			Иначе
				Док = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УИД).ПолучитьОбъект();
			КонецЕсли;	
		Иначе	
			Док = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УИД).ПолучитьОбъект();
			Если Док<>Неопределено и не Док.ПометкаУдаления Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Необходимо удалить документ "+Док.ссылка);
			Иначе
				Док = Документы.ОтчетКомитентуОПродажах.ПолучитьСсылку(УИД).ПолучитьОбъект();
				ДокР = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
				ДокКД = Документы.КорректировкаДолга.ПолучитьСсылку(УИД).ПолучитьОбъект();
			КонецЕсли;	
		КонецЕсли;
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		Если ДокР <> неопределено Тогда
			СтрокаТЧ.документРеализации = ДокР.Ссылка;
		КонецЕсли;	
		Если ДокКД <> неопределено Тогда
			СтрокаТЧ.КорректировкаДолга = ДокКД.Ссылка;
		КонецЕсли;	
		
		//ДокОснование = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УИД).ПолучитьОбъект();

		
		// Номенклатура и покупатели
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			Если СтрокаТЧ_Товары.Сумма<СтрокаТЧ_Товары.ОценкаСтоимости Тогда
				СтрокаТЧ.НужнаКорректировкаДолга = Истина;
			КонецЕсли;	
			СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВин,СтрокаТЧ_Товары.АвтомобильУИД,СтрокаТЧ_Товары.АвтомобильНаименование);
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если СтрокаТЧ.Состояние = "РЕАЛИЗАЦИЯ" Тогда
				СтрокаТЧ_Товары.Контрагент = НайтиКонтрагента(СтрокаТЧ_Товары.КонтрагентИНН, СтрокаТЧ_Товары.КонтрагентКПП, СтрокаТЧ_Товары.КонтрагентУИД, СтрокаТЧ_Товары.КонтрагентТип, Истина, СтрокаТЧ_Товары.КонтрагентНаименование);
				
				Если СтрокаТЧ_Товары.ДоговорДата = Дата("00010101") и СтрокаТЧ_Товары.ДоговорНомер="" Тогда
					СтрокаТЧ_Товары.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ_Товары.Контрагент,
																				  , 
																				  , 
																				  ,
							   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
							           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
									            СтруктураОрганизации.Подразделение,
														  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
											   
				Иначе	
					СтрокаТЧ_Товары.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ_Товары.Контрагент, 
															 СтрокаТЧ_Товары.ДоговорНомер, 
															  СтрокаТЧ_Товары.ДоговорДата, 
															   СтрокаТЧ_Товары.ДоговорУИД, 
							   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
							   			СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
									            СтруктураОрганизации.Подразделение,
														  СтрокаТЧ.ТочкаОформления,
													СтрокаТЧ_Товары.ДоговорТип, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
											   
				КонецЕсли;	
				
				Если СтрокаТЧ_Товары.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
					СтрокаТЧ.ЕстьОшибки = Истина;
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка покупателя");
					//ПроблемныеКонтрагенты(СтрокаТЧ_Товары.КонтрагентИНН, СтрокаТЧ_Товары.КонтрагентКПП, СтрокаТЧ_Товары.КонтрагентНаименование);
				КонецЕсли;
			КонецЕсли;	
			
			
		КонецЦикла;	
		
		//Ищем документ основание
		
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.ДокументПередачи_УИД);
			Док = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
			Если Док <> неопределено Тогда
				СтрокаТЧ.ДокументПередачи = Док.Ссылка;
			КонецЕсли;	
		
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьОтчетАгента(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ОтчетАгента Цикл
		
		Док = неопределено;
		ДокР = Неопределено;
		ДокКД = Неопределено;
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		                        
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		СтрокаТЧ.АВ_Склад = НайтиСклад(СтрокаТЧ.СкладНаименование, СтрокаТЧ.СкладУИД);
		СтрокаТЧ.ПодразделениеОрганизации = НайтиПодразделениеПоСкладу(СтрокаТЧ.АВ_Склад);
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, Истина, СтрокаТЧ.КонтрагентНаименование);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, 
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								             СтрокаТЧ.ПодразделениеОрганизации,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером,
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								             СтрокаТЧ.ПодразделениеОрганизации,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Если СтрокаТЧ.Состояние = "Возврат" Тогда	
			//Ищем не было ли до этого реализации сделано этим документом
			Док = Документы.ОтчетКомиссионераОПродажах.ПолучитьСсылку(УИД).ПолучитьОбъект();
			Если Док<>Неопределено и не Док.ПометкаУдаления Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Необходимо удалить документ и все связанные с ним, если они были созданы");
			Иначе
				Док = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(УИД).ПолучитьОбъект();
			КонецЕсли;	
		Иначе	
			Док = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(УИД).ПолучитьОбъект();
			Если Док<>Неопределено и не Док.ПометкаУдаления Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Необходимо удалить документ "+Док.ссылка);
			Иначе
				Док = Документы.ОтчетКомиссионераОПродажах.ПолучитьСсылку(УИД).ПолучитьОбъект();
				//ДокР = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
				//ДокКД = Документы.КорректировкаДолга.ПолучитьСсылку(УИД).ПолучитьОбъект();
			КонецЕсли;	
		КонецЕсли;
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		Если ДокР <> неопределено Тогда
			СтрокаТЧ.документРеализации = ДокР.Ссылка;
		КонецЕсли;	
		Если ДокКД <> неопределено Тогда
			СтрокаТЧ.КорректировкаДолга = ДокКД.Ссылка;
		КонецЕсли;	

		
		
		
		Док = Документы.ОтчетКомиссионераОПродажах.ПолучитьСсылку(УИД).ПолучитьОбъект();  //

			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		
		// Номенклатура и покупатели
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			Если СтрокаТЧ_Товары.Сумма<СтрокаТЧ_Товары.ОценкаСтоимости Тогда
				СтрокаТЧ.НужнаКорректировкаДолга = Истина;
			КонецЕсли;	
			СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВин,СтрокаТЧ_Товары.АвтомобильУИД,СтрокаТЧ_Товары.АвтомобильНаименование);
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
			
			//СтрокаТЧ_Товары.ОценкаСтоимости  = ПолучитьСебестоимость(СтрокаТЧ_Товары.Автомобиль,СтрокаТЧ.Склад,объект.Организация,СтрокаТЧ.ПодразделениеОрганизации, НачалоДня(СтрокаТЧ.Дата),КонецДня(СтрокаТЧ.Дата), Истина,,ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
			//Если СтрокаТЧ_Товары.ОценкаСтоимости = 0 Тогда
			//	ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Не найдена передача агенту. Нет остатка на счете ""Товары отгруженные""  ");
			//	СтрокаТЧ.ЕстьОшибки = Истина;
			//КонецЕсли;

			СтрокаТЧ_Товары.Контрагент = НайтиКонтрагента(СтрокаТЧ_Товары.КонтрагентИНН, СтрокаТЧ_Товары.КонтрагентКПП, СтрокаТЧ_Товары.КонтрагентУИД, СтрокаТЧ_Товары.КонтрагентТип, Истина, СтрокаТЧ_Товары.КонтрагентНаименование);
				
			//Если СтрокаТЧ_Товары.ДоговорДата = Дата("00010101") и СтрокаТЧ_Товары.ДоговорНомер="" Тогда
			//	СтрокаТЧ_Товары.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ_Товары.Контрагент,
			//																	  , 
			//																	  , 
			//																	  ,
			//			   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
			//				           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
			//						            СтруктураОрганизации.Подразделение,
			//											  СтрокаТЧ.ТочкаОформления,, 
			//						  СтруктураОрганизации.ВидРасчетовДоговора);
			//								   
			//	Иначе	
			//		СтрокаТЧ_Товары.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ_Товары.Контрагент, 
			//												 СтрокаТЧ_Товары.ДоговорНомер, 
			//												  СтрокаТЧ_Товары.ДоговорДата, 
			//												   СтрокаТЧ_Товары.ДоговорУИД, 
			//				   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
			//				   			СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
			//						            СтруктураОрганизации.Подразделение,
			//											  СтрокаТЧ.ТочкаОформления,
			//										СтрокаТЧ_Товары.ДоговорТип, 
			//						  СтруктураОрганизации.ВидРасчетовДоговора);
			//								   
			//	КонецЕсли;	
				
			Если СтрокаТЧ_Товары.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка покупателя");
					//ПроблемныеКонтрагенты(СтрокаТЧ_Товары.КонтрагентИНН, СтрокаТЧ_Товары.КонтрагентКПП, СтрокаТЧ_Товары.КонтрагентНаименование);
			КонецЕсли;
		
			
			
		КонецЦикла;	
		
			
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьВозвратПокупателя(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ВозвратПокупателя Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		//Контрагент
		
		СтрокаТЧ.Контрагент = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			// Договор
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
			КонецЕсли;
		КонецЕсли;	
	
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		
		//Ищем документ возврата
		
		// Попытка 1.
		Док = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		// Попытка 2.
		Если Док = неопределено или Док.ПометкаУдаления = истина Тогда
			Док_ = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			Если Док_<>неопределено Тогда
				Док = Док_;
			КонецЕсли;
			
		КонецЕсли;
		
		// Попытка 3.
		Если Док = неопределено  или Док.ПометкаУдаления = истина Тогда
			Док_ = Документы.КорректировкаРеализации.ПолучитьСсылку(УИД).ПолучитьОбъект();
			Если Док_<>неопределено Тогда
				Док = Док_;
			КонецЕсли;
		КонецЕсли;
		
			
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
			
			//Проверяем на соответствие документа условиям
				Если СтрокаТЧ.Дата<Дата("20190101") и ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка()) Тогда
					СтрокаТЧ.ОшибкаТипаДокумента = Истина;
				ИначеЕсли не СокрЛП(СтрокаТЧ.НомерВходящегоДокумента)="" и ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка()) Тогда
					СтрокаТЧ.ОшибкаТипаДокумента = Истина;
				ИначеЕсли СокрЛП(СтрокаТЧ.НомерВходящегоДокумента)="" и ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.КорректировкаРеализации.ПустаяСсылка()) Тогда
					СтрокаТЧ.ОшибкаТипаДокумента = Истина;
				КонецЕсли;	
				
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			Если ТипЗнч(СтрокаТЧ.Документ) <> ТипЗнч(Документы.КорректировкаРеализации.ПустаяСсылка()) Тогда
				СтрокаТЧ.СчетФактура = НайтиСчетФактуруПолученную(СтрокаТЧ.Документ);
			Иначе
				СтрокаТЧ.СчетФактура = НайтиСчетФактуруВыданную(СтрокаТЧ.Документ);
			КонецЕсли;	
		КонецЕсли;	
		
		// Документ_основание
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.ДокументОснованиеУИД);
		ДокОснование = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если ДокОснование <> неопределено Тогда
			СтрокаТЧ.документОснование = ДокОснование.Ссылка;
		КонецЕсли;	
		
			
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетФактураНомерКорр) и не ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка документа-основания ");
		КонецЕсли;	
		// Номенклатура
		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			СтрокаТЧ_Товары.СчетУчета = СтруктураОрганизации.СчетУчета;
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ_Товары.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыРТиУ(ТолькоОшибки)
	ЕстьОшибки = Ложь;
	
	
	Для Каждого СтрокаТЧ из РеализацияТиУ Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		// Контрагент
		
		СтрокаТЧ.Контрагент  = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			//Договор 
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
				
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Док = Документы.СчетФактураВыданный.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.СчетФактура = Док.Ссылка;
		КонецЕсли;	
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
			
		КонецЕсли;	
	
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			СтрокаТЧ_Товары.СчетУчета = СтруктураОрганизации.СчетУчета;
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		
	КонецЦикла;
	
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыРеализацииМатериалов(ТолькоОшибки)
	ЕстьОшибки = Ложь;
	
	
	Для Каждого СтрокаТЧ из РеализацияМатериалов Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		// Контрагент
		
		СтрокаТЧ.Контрагент  = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			//Договор 
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
				
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Док = Документы.СчетФактураВыданный.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.СчетФактура = Док.Ссылка;
		КонецЕсли;	
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
			
		КонецЕсли;	
	
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		
	КонецЦикла;
	
	
	Возврат не ЕстьОшибки;
КонецФункции


&НаСервере
Функция ЗаполнитьДокументыРеализацииУслуг(ТолькоОшибки)
	ЕстьОшибки = Ложь;
	
	
	Для Каждого СтрокаТЧ из РеализацияУслуг Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		// Контрагент
		
		СтрокаТЧ.Контрагент  = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, истина);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			//Договор 
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
				
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Док = Документы.СчетФактураВыданный.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.СчетФактура = Док.Ссылка;
		КонецЕсли;	
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
			
		КонецЕсли;	
	
		
		
	КонецЦикла;
	
	
	Возврат не ЕстьОшибки;
КонецФункции


&НаСервере
Функция ЗаполнитьДокументыРеализацииАвтомобилей(ТолькоОшибки)
	ЕстьОшибки = Ложь;
	
	
	Для Каждого СтрокаТЧ из РеализацияАвтомобилей Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		Если СтрокаТЧ.Товары.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
			
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		Если ТекущаяНастройкаОбмена.ПодразделенияИзСкладаОУ Тогда
			СтрокаТЧ.АВ_Склад = НайтиСклад(СтрокаТЧ.СкладНаименование, СтрокаТЧ.СкладУИД);
			СтрокаТЧ.ПодразделениеОрганизации = НайтиПодразделениеПоСкладу(СтрокаТЧ.АВ_Склад);
			Если не ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеОрганизации) Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Необходимо привязать подразделение к складу-отправителю");
			КонецЕсли;
		Иначе
			СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
			СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		КонецЕсли;
		
		СтрокаТЧ.Склад = СтруктураОрганизации.склад;
		// Контрагент
		
		СтрокаТЧ.Контрагент  = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип, истина, СтрокаТЧ.КонтрагентНаименование);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			
		Иначе
			
			//Договор 
			
			
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или (ТекущаяНастройкаОбмена.РеализацияАвтомобилей_ЧастноеЛицо и СтрокаТЧ.Контрагент.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) Тогда
				
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
						           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
				
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Док = Документы.СчетФактураВыданный.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.СчетФактура = Док.Ссылка;
		КонецЕсли;	
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
			
		КонецЕсли;	
	
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Автомобиль = НайтиАвтомобиль(СтрокаТЧ_Товары.АвтомобильВИН, СтрокаТЧ_Товары.АвтомобильУИД, СтрокаТЧ_Товары.АвтомобильНаименование);
			Если СтрокаТЧ_Товары.Автомобиль = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		
	КонецЦикла;
	
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДоговорыТЭФЛ(ТолькоОшибки)
	ЕстьОшибки = Ложь;
	
	
	Для Каждого СтрокаТЧ из ДоговорыТЭФЛ Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		Если СтрокаТЧ.Исполнители.количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
			
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		СтрокаТЧ.ПодразделениеЗатрат = СтруктураОрганизации.ПодразделениеЗатрат;
		
		// Документ
		
	    Док = НайтиДокументПоДатеИКомментарию(СтрокаТЧ.Дата,"#Загружены договоры доставки","ОперацияБух",Объект.Организация);
		
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
        СуммаДокумента = 0;
		Для Каждого СтрокаТЧ_Исполнители из СтрокаТЧ.Исполнители Цикл
			СуммаДокумента = СуммаДокумента + СтрокаТЧ_Исполнители.Сумма;
			СтрокаТЧ_Исполнители.Контрагент  = НайтиФизЛицо(СтрокаТЧ_Исполнители.КонтрагентНаименование,СтрокаТЧ_Исполнители.КонтрагентИНН);
			Если СтрокаТЧ_Исполнители.Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;	
		КонецЦикла;	
		СтрокаТЧ.СуммаДокумента = СуммаДокумента;
		
		
	КонецЦикла;
	
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьСтраховыеСделки(ТолькоОшибки)
	ЕстьОшибки = Ложь;
	
	
	Для Каждого СтрокаТЧ из СтраховыеСделки Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		Если СтрокаТЧ.Товары.Количество()=0 Тогда
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Отсутствует номенклатура");
			СтрокаТЧ.ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);
		
		
		СтрокаТЧ.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
		
		//Получаем параметры организации
		
		// Контрагент
		
		СтрокаТЧ.Контрагент  = НайтиКонтрагента("", "", неопределено, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Истина, СтрокаТЧ.КонтрагентНаименование);
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			
			//ПроблемныеКонтрагенты("", "" , СтрокаТЧ.КонтрагентНаименование);
		Иначе
								
			СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
					, 
					, 
					,
					Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
					СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
					СтруктураОрганизации.Подразделение,
					СтрокаТЧ.ТочкаОформления,, 
					СтруктураОрганизации.ВидРасчетовДоговора);

		КонецЕсли;	
		
		// Документ
		
		Док = НайтиДокумент(СтрокаТЧ.УИД);
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.документ = Док.Ссылка;
		КонецЕсли;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
	
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			
			//Страховая компания
			// Если ИНН заполнено - ищем, иначе нет
			Если  ЗначениеЗаполнено(СтрокаТЧ_Товары.Страховая_КонтрагентИНН) Тогда
				СтрокаТЧ_Товары.Страховая_Контрагент  = НайтиКонтрагента(СтрокаТЧ_Товары.Страховая_КонтрагентИНН, СтрокаТЧ_Товары.Страховая_КонтрагентКПП, неопределено, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Ложь, СтрокаТЧ_Товары.Страховая_КонтрагентНаименование);
				
				
				//Договор со страховой компанией 
				Если ЗначениеЗаполнено(СтрокаТЧ_Товары.Страховая_Контрагент) Тогда
					Если СтрокаТЧ_Товары.Страховая_ДоговорДата = Дата("00010101") и СтрокаТЧ_Товары.Страховая_ДоговорНомер="" Тогда
						
						СтрокаТЧ_Товары.Страховая_Договор = НайтиДоговор(СтрокаТЧ_Товары.Страховая_Контрагент,
						, 
						, 
						,
						Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, 
						СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
						СтруктураОрганизации.Подразделение,
						СтрокаТЧ.ТочкаОформления,, 
						СтруктураОрганизации.ВидРасчетовДоговора);
						
					Иначе	
						СтрокаТЧ_Товары.Страховая_Договор = НайтиДоговор(СтрокаТЧ_Товары.Страховая_Контрагент, 
						СтрокаТЧ_Товары.Страховая_ДоговорНомер, 
						СтрокаТЧ_Товары.Страховая_ДоговорДата, 
						СтрокаТЧ_Товары.Страховая_ДоговорУИД, 
						Перечисления.ВидыДоговоровКонтрагентов.СКомитентом,
						СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
						СтруктураОрганизации.Подразделение,
						СтрокаТЧ.ТочкаОформления,, 
						СтруктураОрганизации.ВидРасчетовДоговора);
						
					КонецЕсли;	
				Иначе
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента - страховой");
				//СтрокаТЧ.ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
				//СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
			
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру_ТипБланка(СтрокаТЧ_Товары.Номенклатура_ТипБланка);
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				ЕстьОшибки = Истина;
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		
	КонецЦикла;
	
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьВозвратПоставщику(ТолькоОшибки)
	ЕстьОшибки = Ложь;
	
	
	Для Каждого СтрокаТЧ из ВозвратТоваровПоставщику Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		// Контрагент
		
		СтрокаТЧ.Контрагент  = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
			
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			
			//Договор 
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
						   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, 
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			Иначе	
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
														 СтрокаТЧ.ДоговорНомер, 
														  СтрокаТЧ.ДоговорДата, 
														   СтрокаТЧ.ДоговорУИД, 
						   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
						           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								            СтруктураОрганизации.Подразделение,
													  СтрокаТЧ.ТочкаОформления,, 
									  СтруктураОрганизации.ВидРасчетовДоговора);
										   
			КонецЕсли;	
			Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		
		//Ищем документ возврата
		
		// Попытка 1.
		Док = Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		
		// Попытка 2.
		Если Док = неопределено или Док.ПометкаУдаления = истина Тогда
			Док_ = Документы.КорректировкаПоступления.ПолучитьСсылку(УИД).ПолучитьОбъект();
			Если Док_<>неопределено Тогда
				Док = Док_;
			КонецЕсли;
		КонецЕсли;
		
		// Попытка 2.
		Если Док = неопределено или Док.ПометкаУдаления = истина Тогда
			Док_ = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			Если Док_<> неопределено Тогда
				Док = Док_;
			КонецЕсли;
		КонецЕсли;
		
		// Документ_основание
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснованиеУИД) Тогда
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.ДокументОснованиеУИД);
			ДокОснование = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
			Если ДокОснование <> неопределено Тогда
				СтрокаТЧ.документОснование = ДокОснование.Ссылка;
			КонецЕсли;	
		КонецЕсли;
		
		
		Если Док <> неопределено  Тогда
			СтрокаТЧ.документ = Док.Ссылка;
			//Проверяем на соответствие документа условиям
			Если СтрокаТЧ.Дата<Дата("20190101") Тогда
					Если  ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.ВозвратТоваровПоставщику.ПустаяСсылка()) Тогда
						СтрокаТЧ.ОшибкаТипаДокумента = Истина;
					КонецЕсли;
			ИначеЕсли СтрокаТЧ.Дата >= Дата("20200101") и ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) и не ЗначениеЗаполнено(СтрокаТЧ.НомерВходящегоДокумента) Тогда
				Если ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.ВозвратТоваровПоставщику.ПустаяСсылка()) Тогда
					СтрокаТЧ.ОшибкаТипаДокумента = Истина;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.НомерВходящегоДокумента) и ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
				Если ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.КорректировкаПоступления.ПустаяСсылка()) Тогда
					СтрокаТЧ.ОшибкаТипаДокумента = Истина;
				КонецЕсли;
					
			Иначе
				Если ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.РеализацияТоваровУслуг.ПустаяСсылка()) Тогда
					СтрокаТЧ.ОшибкаТипаДокумента = Истина;
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			Если ТипЗнч(СтрокаТЧ.Документ) = ТипЗнч(Документы.КорректировкаПоступления.ПустаяСсылка()) Тогда
				СтрокаТЧ.СчетФактура = НайтиСчетФактуруПолученную(СтрокаТЧ.Документ);
			Иначе
				СтрокаТЧ.СчетФактура = НайтиСчетФактуруВыданную(СтрокаТЧ.Документ);
			КонецЕсли;	
		КонецЕсли;	
		
		

		
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			СтрокаТЧ_Товары.СчетУчета = СтруктураОрганизации.СчетУчета;
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;	
		
	КонецЦикла;
	
	
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьМежхолдерПоПеремещениям(ДвиженияМХД, СтрокаПеремещения,УИД_Документа)
	
	Для Каждого МХД из ДвиженияМХД Цикл
		
		Если МХД.ОрганизацияПолучатель.ИНН = Объект.Организация.ИНН  Тогда
		
			НоваяСтрока = СтрокаПеремещения.Товары.Добавить();
		
			НоваяСтрока.УидНоменклатуры = База.XMLСтрока(МХД.Номенклатура);
			НоваяСтрока.УидДокумента = УИД_Документа;
			
			
	    	НоваяСтрока.Количество = МХД.Количество;
		КонецЕсли;
		
	КонецЦикла;
КОнецФункции

&НаСервере
Функция ЗаполнитьМежхолдерПоДокументу(ДвиженияМХД, ДатаУчетная,ОписаниеДокументаИсточника, ТочкаОформления)
	Для Каждого МХД из ДвиженияМХД Цикл
		
		НоваяСтрока = Межхолдер_Товары.Добавить();
		НоваяСтрока.Дата = ДатаУчетная;
		НоваяСтрока.ОписаниеДокументаИсточника = ОписаниеДокументаИсточника;
		
		НоваяСтрока.УидНоменклатуры = База.XMLСтрока(МХД.Номенклатура);
			
		Если МХД.ОрганизацияПолучатель.ИНН = Объект.Организация.ИНН Тогда
			
			НоваяСтрока.ИннПокупателя = МХД.ОрганизацияПолучатель.ИНН;
			НоваяСтрока.КПППокупателя = МХД.ОрганизацияПолучатель.КПП;
		
			НоваяСтрока.ИннПродавца = МХД.ОрганизацияОтправитель.ИНН;
			НоваяСтрока.КПППродавца = МХД.ОрганизацияОтправитель.КПП;
		
	    	НоваяСтрока.Количество = МХД.Количество;
			НоваяСтрока.Себестоимость = МХД.СуммаСебестоимость;
		Иначе	
			НоваяСтрока.ИннПродавца = МХД.ОрганизацияПолучатель.ИНН;
			НоваяСтрока.КПППродавца = МХД.ОрганизацияПолучатель.КПП;
		
			НоваяСтрока.ИннПокупателя  = МХД.ОрганизацияОтправитель.ИНН;
			НоваяСтрока.КПППокупателя  = МХД.ОрганизацияОтправитель.КПП;
		
	    	НоваяСтрока.Количество = -1*МХД.Количество;
			НоваяСтрока.Себестоимость = -1*МХД.СуммаСебестоимость;
		КонецЕсли;
		НоваяСтрока.ТочкаОформленияНаименование = ТочкаОформления;
		
	КонецЦикла;
КОнецФункции

&НаСервере
Функция ЗаполнитьМежхолдер()
	
	ЕстьОшибки = Ложь;
	
	ДопРеквизит_ДоговорМежхолдерный = НайтиДопРеквизитПоИмени("ДоговорМежхолдерный");
	// Свернем таблицу по датам и покупателям-продавцам и уберем строки с пустым количеством
	ТЗ_Товары = Межхолдер_Товары.Выгрузить();
	ТЗ_Товары.Свернуть("Дата, УИДНоменклатуры,ИННПокупателя,ИннПродавца, КПППокупателя,КПППродавца,ОписаниеДокументаИсточника,Номенклатура, ТочкаОформленияНаименование, СтавкаНДС","Количество,Себестоимость");
	
    НулевыеСтроки = ТЗ_Товары.НайтиСтроки(Новый Структура("Количество",0));
    Для каждого СтрокаТаблицы Из НулевыеСтроки Цикл
    	ТЗ_Товары.Удалить(СтрокаТаблицы)
    КонецЦикла;
	
	ТЗ_Товары.Сортировать("Дата,ОписаниеДокументаИсточника");
	
	Межхолдер_Товары.Загрузить(ТЗ_Товары);
	
	Для Каждого СтрокаТЧ из Межхолдер_Товары Цикл
		СтрокаТЧ.номенклатура = НайтиНоменклатуру(СтрокаТЧ.УИДНоменклатуры);
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
	КонецЦикла;
	
	
	ТЗ = Межхолдер_Товары.Выгрузить(,"Дата,ИННПокупателя,ИннПродавца, КПППокупателя,КПППродавца, ТочкаОформления,Себестоимость,СтавкаНДС");
	ТЗ.Свернуть("Дата, ИННПокупателя, ИННПродавца, КПППокупателя, КппПродавца, ТочкаОформления","Себестоимость");
	ТЗ.Сортировать("Дата");
	Межхолдер.Загрузить(ТЗ);
	
	//Ищем существующие документы по межхолдеру
	Для Каждого СтрокаТЧ из Межхолдер Цикл
		
		
		СтрокаТЧ.ПродавецОрганизация = НайтиОрганизацию(СтрокаТЧ.ИННПродавца,СтрокаТЧ.КПППродавца);
		СтрокаТЧ.ПокупательОрганизация = НайтиОрганизацию(СтрокаТЧ.ИННПокупателя,СтрокаТЧ.КПППокупателя);
		
		СтрокаТЧ.ПродавецКонтрагент = НайтиКонтрагента(СтрокаТЧ.ИННПродавца,СтрокаТЧ.КПППродавца,,);
		СтрокаТЧ.ПокупательКонтрагент = НайтиКонтрагента(СтрокаТЧ.ИННПокупателя,СтрокаТЧ.КПППокупателя,,);
		
		//Получаем параметры организации
		СтруктураПокупателя = ПолучитьСтруктуруОрганизации(СтрокаТЧ.ПокупательОрганизация,СтрокаТЧ.ТочкаОформления);		
		СтруктураПродавца = ПолучитьСтруктуруОрганизации(СтрокаТЧ.ПродавецОрганизация,СтрокаТЧ.ТочкаОформления);		
		
		СтрокаТЧ.СпособУчетаНДСПродавец = СтруктураПродавца.СпособУчетаНДС;
		СтрокаТЧ.СпособУчетаНДСПокупатель = СтруктураПокупателя.СпособУчетаНДС;
		
		СтрокаТЧ.ДоговорПокупателя = НайтиДоговорМежхолдера(СтрокаТЧ.ПокупательКонтрагент,СтрокаТЧ.ПродавецОрганизация,Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, ?(СтруктураПродавца.ПодразделениеВДоговореРеализация,СтруктураПродавца.Подразделение, неопределено),ДопРеквизит_ДоговорМежхолдерный);
		СтрокаТЧ.ДоговорПоставщика = НайтиДоговорМежхолдера(СтрокаТЧ.ПродавецКонтрагент,СтрокаТЧ.ПокупательОрганизация,Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, ?(СтруктураПокупателя.ПодразделениеВДоговореПоступление,СтруктураПокупателя.Подразделение, неопределено),ДопРеквизит_ДоговорМежхолдерный);
		
		СтрокаТЧ.Себестоимость = 0;
		
		СтрокаТЧ.УИД = СтрокаТЧ.ИННПродавца + СтрокаТЧ.Дата;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|	И ПоступлениеТоваровУслуг.Контрагент = &ПродавецКонтрагент
		|	И ПоступлениеТоваровУслуг.Организация = &ПокупательОрганизация
		|	И ПоступлениеТоваровУслуг.ДоговорКонтрагента = &Договор
		|	И ПоступлениеТоваровУслуг.ПодразделениеОрганизации = &Подразделение
		|	И ПоступлениеТоваровУслуг.Комментарий ПОДОБНО &Комментарий";

		Запрос.УстановитьПараметр("Дата", СтрокаТЧ.Дата);
		Запрос.УстановитьПараметр("Подразделение", СтруктураПокупателя.Подразделение);
		Запрос.УстановитьПараметр("Комментарий", "#Загружен Межхолдер"+"%");
		Запрос.УстановитьПараметр("ПродавецКонтрагент", СтрокаТЧ.ПродавецКОнтрагент);
		Запрос.УстановитьПараметр("ПокупательОрганизация", СтрокаТЧ.ПокупательОрганизация);
		Запрос.УстановитьПараметр("Договор", СтрокаТЧ.ДоговорПоставщика);
		//Запрос.УстановитьПараметр("ИННПродавца", СтрокаТЧ.ИННПродавца);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТЧ.ДокументПоступления = ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
		
		//Если СтрокаТЧ.ДокументРеализации = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
		//	СтрокаТЧ.УИД =Новый УникальныйИдентификатор;
		//КонецЕсли;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|	И РеализацияТоваровУслуг.Контрагент = &ПокупательКонтрагент
		|	И РеализацияТоваровУслуг.ПодразделениеОрганизации = &Подразделение
		|	И РеализацияТоваровУслуг.Организация = &ПродавецОрганизация
		|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &Договор
		|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий";
		
		Запрос.УстановитьПараметр("Дата", СтрокаТЧ.Дата);
		Запрос.УстановитьПараметр("Подразделение", СтруктураПродавца.Подразделение);
		Запрос.УстановитьПараметр("Комментарий", "#Загружен Межхолдер"+"%");
		Запрос.УстановитьПараметр("ПокупательКонтрагент", СтрокаТЧ.ПокупательКонтрагент);
		Запрос.УстановитьПараметр("ПродавецОрганизация", СтрокаТЧ.ПродавецОрганизация);
		Запрос.УстановитьПараметр("Договор", СтрокаТЧ.ДоговорПокупателя);
		Запрос.УстановитьПараметр("ИННПродавца", СтрокаТЧ.ИННПродавца);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаТЧ.ДокументРеализации = ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ_Товары из Межхолдер_Товары Цикл	
			Если СтрокаТЧ.ИННПокупателя = СтрокаТЧ_Товары.ИННПокупателя и
				 СтрокаТЧ.ИннПродавца = СтрокаТЧ_Товары.ИннПродавца и
				 СтрокаТЧ.КПППокупателя = СтрокаТЧ_Товары.КПППокупателя и
				 СтрокаТЧ.КПППродавца = СтрокаТЧ_Товары.КПППродавца и
				 СтрокаТЧ.ТочкаОформления = СтрокаТЧ_Товары.ТочкаОформления и
				 СтрокаТЧ.Дата = СтрокаТЧ_Товары.дата Тогда
				 
				 НС = СтрокаТЧ.Товары.Добавить();
				 ЗаполнитьЗначенияСвойств(НС,СтрокаТЧ_Товары);
				 
				 НС.СчетУчетаПродавца = СтруктураПродавца.СчетУчета;
				 НС.СчетУчетаПокупателя = СтруктураПокупателя.СчетУчета;
				 Если СтрокаТЧ.ПродавецОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
					 НС.СебестоимостьСТО = СтрокаТЧ_Товары.Себестоимость;
					 НС.Себестоимость = Окр(СтрокаТЧ_Товары.Себестоимость - НайтиСуммуНДС(СтрокаТЧ_Товары.Себестоимость,СтрокаТЧ_Товары.СтавкаНДС,Истина),2);
					 НС.СебестоимостьЦена = Окр(НС.Себестоимость/НС.Количество,2);
				 Иначе
				 	НС.СебестоимостьЦена = ПолучитьСебестоимость(НС.Номенклатура, 
					                                             СтруктураПродавца.Склад,
																 СтрокаТЧ.ПродавецОрганизация,
																 СтруктураПродавца.Подразделение, 
																 НачалоМесяца(СтрокаТЧ.дата),
																 КонецМесяца(СтрокаТЧ.Дата),
																 ЗначениеЗаполнено(ДопРеквизит_ОбособленноеПодразделение),
																 СтрокаТЧ.ДокументРеализации, НС.СчетУчетаПродавца);
					 НС.Себестоимость = НС.Количество*НС.СебестоимостьЦена;
					 НС.СебестоимостьСТО = СтрокаТЧ_Товары.Себестоимость;
				КонецЕсли;	
				 
				 СтрокаТЧ.Себестоимость = СтрокаТЧ.Себестоимость + НС.Себестоимость;
				 Если НС.Себестоимость = 0 Тогда
					 СтрокаТЧ.ЕстьОшибки = Истина;
					 ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры "+НС.Номенклатура);
					 
				 КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		
		
	КонецЦикла;
	
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыЗаказНаряда(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ЗаказНаряды Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		
		Если не СтрокаТЧ.ОказаниеУслугНеТребуется Тогда
			СтрокаТЧ.Контрагент  = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип);
			Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
				
				//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
			Иначе
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				
					СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																				  , 
																				  , 
																				  ,
							   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
							           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								                СтруктураОрганизации.Подразделение,
									    				  СтрокаТЧ.ТочкаОформления,, 
									     СтруктураОрганизации.ВидРасчетовДоговора);
												   
				Иначе	
					СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
															 СтрокаТЧ.ДоговорНомер, 
															  СтрокаТЧ.ДоговорДата, 
															   СтрокаТЧ.ДоговорУИД, 
							   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
							           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								                СтруктураОрганизации.Подразделение,
										    			  СтрокаТЧ.ТочкаОформления,, 
									      СтруктураОрганизации.ВидРасчетовДоговора);
										   
				КонецЕсли;	
				Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
					СтрокаТЧ.ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЕсли;	
		КОнецЕсли;	
		
		Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) и СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЭтоЕНВД = Истина;
		Иначе
			ЭтоЕНВД = Ложь;
		КонецЕсли;
		
		НГ = СтруктураЗатрат(СтрокаТЧ.ВидРемонтаУИД, СтрокаТЧ.ВидРемонтаНаименование); 
		Если НГ = Неопределено или НГ = Справочники.НоменклатурныеГруппы.ПустаяСсылка()  Тогда
			Если  СтрокаТЧ.товары.количество()>0 Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Не заполнена номенклатурная группа");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;	
		Иначе
			Если ЭтоЕНВД Тогда
				СтрокаТЧ.НоменклатурнаяГруппа =НГ.НоменклатурнаяГруппаЕНВД;
				СтрокаТЧ.СтатьяЗатрат = ?(НГ.СтатьяЗатратЕНВД=Справочники.СтатьиЗатрат.ПустаяСсылка(),СтруктураОрганизации.СтатьяЗатратЕНВД,НГ.СтатьяЗатратЕНВД);
			Иначе
				СтрокаТЧ.НоменклатурнаяГруппа =НГ.НоменклатурнаяГруппа;
				СтрокаТЧ.СтатьяЗатрат = ?(НГ.СтатьяЗатрат=Справочники.СтатьиЗатрат.ПустаяСсылка(),СтруктураОрганизации.СтатьяЗатрат,НГ.СтатьяЗатрат);
			КонецЕсли;
			СтрокаТЧ.СпособУчетаНДС = НГ.СпособУчетаНДС;
			СтрокаТЧ.СчетЗатрат = ?(НГ.СчетЗатрат=ПланыСчетов.Хозрасчетный.ПустаяСсылка(),ПланыСчетов.Хозрасчетный.ОсновноеПроизводство,НГ.СчетЗатрат);
			СтрокаТЧ.ПодразделениеЗатрат = ?(НГ.Подразделение=Справочники.ПодразделенияОрганизаций.ПустаяСсылка(),СтруктураОрганизации.ПодразделениеЗатрат,НГ.Подразделение);
			СтрокаТЧ.СпособУчетаНДС = НГ.СпособУчетаНДС;
		КонецЕсли;	
		СтрокаТЧ.Автомобиль = НайтиАвтомобиль(СтрокаТЧ.АвтомобильВИН, СтрокаТЧ.АвтомобильУИД, СтрокаТЧ.АвтомобильНаименование);
		//СтрокаТЧ.ЕстьОшибки = ЕстьОшибки;
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
	
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.ОказаниеУслуг = Док.Ссылка;
			СтрокаТЧ.СчетФактура = НайтиСчетФактуруВыданную(Док.ссылка);
		КонецЕсли;	
		
		Док = Документы.ТребованиеНакладная.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.ТребованиеНакладная = Док.Ссылка;
		КонецЕсли;	
		
		//Номенклатура 
	
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			СтрокаТЧ_Товары.СчетУчета = СтруктураОрганизации.СчетУчета;
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыУслугПроизводства(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из УслугиПроизводства Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.Склад = СтруктураОрганизации.Склад;
		
		
		Если не СтрокаТЧ.ОказаниеУслугНеТребуется Тогда
			СтрокаТЧ.Контрагент  = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентУИД, СтрокаТЧ.КонтрагентТип);
			Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
				
				//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
			Иначе
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				
					СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																				  , 
																				  , 
																				  ,
							   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, 
							           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								                СтруктураОрганизации.Подразделение,
									    				  СтрокаТЧ.ТочкаОформления,, 
									     СтруктураОрганизации.ВидРасчетовДоговора);
												   
				Иначе	
					СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
															 СтрокаТЧ.ДоговорНомер, 
															  СтрокаТЧ.ДоговорДата, 
															   СтрокаТЧ.ДоговорУИД, 
							   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,
							           СтруктураОрганизации.ПодразделениеВДоговореРеализация, 
								                СтруктураОрганизации.Подразделение,
										    			  СтрокаТЧ.ТочкаОформления,, 
									      СтруктураОрганизации.ВидРасчетовДоговора);
										   
				КонецЕсли;	
				Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
					СтрокаТЧ.ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЕсли;	
		КОнецЕсли;	
		
		Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) и СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЭтоЕНВД = Истина;
		Иначе
			ЭтоЕНВД = Ложь;
		КонецЕсли;
		
		НГ = СтруктураЗатрат(СтрокаТЧ.ВидРемонтаУИД, СтрокаТЧ.ВидРемонтаНаименование); 
		Если НГ = Неопределено или НГ = Справочники.НоменклатурныеГруппы.ПустаяСсылка()  Тогда
			Если  СтрокаТЧ.товары.количество()>0 Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Не заполнена номенклатурная группа");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;	
		Иначе
			Если ЭтоЕНВД Тогда
				СтрокаТЧ.НоменклатурнаяГруппа =НГ.НоменклатурнаяГруппаЕНВД;
				СтрокаТЧ.СтатьяЗатрат = ?(НГ.СтатьяЗатратЕНВД=Справочники.СтатьиЗатрат.ПустаяСсылка(),СтруктураОрганизации.СтатьяЗатратЕНВД,НГ.СтатьяЗатратЕНВД);
			Иначе
				СтрокаТЧ.НоменклатурнаяГруппа =НГ.НоменклатурнаяГруппа;
				СтрокаТЧ.СтатьяЗатрат = ?(НГ.СтатьяЗатрат=Справочники.СтатьиЗатрат.ПустаяСсылка(),СтруктураОрганизации.СтатьяЗатрат,НГ.СтатьяЗатрат);
			КонецЕсли;
			СтрокаТЧ.СпособУчетаНДС = НГ.СпособУчетаНДС;
			СтрокаТЧ.СчетЗатрат = ?(НГ.СчетЗатрат=ПланыСчетов.Хозрасчетный.ПустаяСсылка(),ПланыСчетов.Хозрасчетный.ОсновноеПроизводство,НГ.СчетЗатрат);
			СтрокаТЧ.ПодразделениеЗатрат = ?(НГ.Подразделение=Справочники.ПодразделенияОрганизаций.ПустаяСсылка(),СтруктураОрганизации.ПодразделениеЗатрат,НГ.Подразделение);
			СтрокаТЧ.СпособУчетаНДС = НГ.СпособУчетаНДС;
		КонецЕсли;	
		СтрокаТЧ.Автомобиль = НайтиАвтомобиль(СтрокаТЧ.АвтомобильВИН, СтрокаТЧ.АвтомобильУИД, СтрокаТЧ.АвтомобильНаименование);
		//СтрокаТЧ.ЕстьОшибки = ЕстьОшибки;
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
	
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.ОказаниеУслуг = Док.Ссылка;
			СтрокаТЧ.СчетФактура = НайтиСчетФактуруВыданную(Док.ссылка);
		КонецЕсли;	
		
		Док = Документы.ТребованиеНакладная.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.ТребованиеНакладная = Док.Ссылка;
		КонецЕсли;	
		
		//Номенклатура 
	
		Для Каждого СтрокаТЧ_Товары из СтрокаТЧ.Товары Цикл
			СтрокаТЧ_Товары.Номенклатура = НайтиНоменклатуру(СтрокаТЧ_Товары.УИДНоменклатуры);
			Если СтрокаТЧ_Товары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка номенклатуры ");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыЗаказНарядаПокупатель(ТолькоОшибки)
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ из ЗаказНарядыПокупатель Цикл
		
		Если не СтрокаТЧ.ЕстьОшибки и ТолькоОшибки Тогда
			Продолжить;
		Иначе 
			СтрокаТЧ.ЕстьОшибки = Ложь;
		КонецЕсли;
		
		//Точка оформления
		СтрокаТЧ.ТочкаОформления = НайтиТочкуОформления(СтрокаТЧ.ТочкаОформленияНаименование);
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		СтрокаТЧ.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;
		
		СтрокаТЧ.Контрагент  = НайтиКонтрагента(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, неопределено, СтрокаТЧ.КонтрагентТип);
		Если СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			СтрокаТЧ.ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка контрагента");
				
			//ПроблемныеКонтрагенты(СтрокаТЧ.КонтрагентИНН, СтрокаТЧ.КонтрагентКПП, СтрокаТЧ.КонтрагентНаименование);
		Иначе
			Если (СтрокаТЧ.ДоговорДата = Дата("00010101") и СтрокаТЧ.ДоговорНомер="") или СтрокаТЧ.Контрагент=ТекущаяНастройкаОбмена.ЧастноеЛицо Тогда
				
				СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент,
																			  , 
																			  , 
																			  ,
							   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, 
							           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								                СтруктураОрганизации.Подразделение,
									    				  СтрокаТЧ.ТочкаОформления,, 
									      СтруктураОрганизации.ВидРасчетовДоговора);
												   
				Иначе	
					СтрокаТЧ.ДоговорКонтрагента = НайтиДоговор(СтрокаТЧ.Контрагент, 
															 СтрокаТЧ.ДоговорНомер, 
															  СтрокаТЧ.ДоговорДата, 
															   СтрокаТЧ.ДоговорУИД, 
							   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
							           СтруктураОрганизации.ПодразделениеВДоговореПоступление, 
								                СтруктураОрганизации.Подразделение,
										    			  СтрокаТЧ.ТочкаОформления,, 
									      СтруктураОрганизации.ВидРасчетовДоговора);
										   
				КонецЕсли;	
				Если СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка договора");
					СтрокаТЧ.ЕстьОшибки = Истина;
				КонецЕсли;
		КонецЕсли;	
			
		НГ = СтруктураЗатрат(СтрокаТЧ.ВидРемонтаУИД, СтрокаТЧ.ВидРемонтаНаименование); 
		Если НГ = Неопределено или НГ = Справочники.НоменклатурныеГруппы.ПустаяСсылка()  Тогда
			Если  СтрокаТЧ.товары.количество()>0 Тогда
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Не заполнена номенклатурная группа");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;	
		Иначе	
			СтрокаТЧ.НоменклатурнаяГруппа =НГ.НоменклатурнаяГруппа;
			СтрокаТЧ.СпособУчетаНДС = НГ.СпособУчетаНДС;
			СтрокаТЧ.СчетЗатрат = ?(НГ.СчетЗатрат=ПланыСчетов.Хозрасчетный.ПустаяСсылка(),ПланыСчетов.Хозрасчетный.ОсновноеПроизводство,НГ.СчетЗатрат);
			СтрокаТЧ.СтатьяЗатрат = ?(НГ.СтатьяЗатрат=Справочники.СтатьиЗатрат.ПустаяСсылка(),СтруктураОрганизации.СтатьяЗатрат,НГ.СтатьяЗатрат);
			СтрокаТЧ.ПодразделениеЗатрат = ?(НГ.Подразделение=Справочники.ПодразделенияОрганизаций.ПустаяСсылка(),СтруктураОрганизации.ПодразделениеЗатрат,НГ.Подразделение);
		КонецЕсли;	
		СтрокаТЧ.Автомобиль = НайтиАвтомобиль(СтрокаТЧ.АвтомобильВИН, СтрокаТЧ.АвтомобильУИД, СтрокаТЧ.АвтомобильНаименование);
		//СтрокаТЧ.ЕстьОшибки = ЕстьОшибки;
		
		// Документ
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		Док = Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
		
		Если Док <> неопределено Тогда
			СтрокаТЧ.Документ = Док.Ссылка;
			СтрокаТЧ.СчетФактура = НайтиСчетФактуруПолученную(Док.ссылка);
		КонецЕсли;	
		
		
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Возврат не ЕстьОшибки;
КонецФункции


#КонецОбласти

#Область ФУНКЦИИ_ЗАГРУЗКИ
//**********************************************************************************
//Функции загрузки
//**********************************************************************************
&НаСервере
Функция ЗагрузитьАвансовыеОтчеты(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из АвансовыйОтчет Цикл
		
		//Получаем параметры организации
		
		//СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.АвансовыйОтчет.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.АвансовыйОтчет.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = 1;
			КонецЕсли;	
			
			//Заполняем реквизиты по умолчанию
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
			Док.Склад = СтрокаТЧ.Склад;
			Док.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.ПокупкаОплатаПрочее;
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.Организация = Объект.Организация;
			Док.ФизЛицо = СтрокаТЧ.ФизЛицо;
			Док.Комментарий = "#Загружен: Авансовый отчет от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			
			Док.Товары.Очистить();
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
				НС = Док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.СчетУчета = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчета);
				НС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				НС.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
				НС.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Списывается;
			КонецЦикла;	
			
			Док.пометкаУдаления = ложь;
			Док.Записать(РежимЗаписиДокумента.Запись);
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
				СтрокаТЧ.ВариантЗагрузки = 0;

			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьСписаниеТоваров(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из СписаниеТоваров Цикл
		
		//Получаем параметры организации
		//СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ТребованиеНакладная.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ТребованиеНакладная.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = 1;
			КонецЕсли;	
			
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
			Док.Склад = СтрокаТЧ.Склад;
			Док.СчетЗатрат = СтрокаТЧ.СчетЗатрат;
			Если Док.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)=неопределено Тогда
				Док.Субконто1 = СтрокаТЧ.СтатьяЗатрат; 
			Иначе	
				Док.Субконто1 = СтрокаТЧ.НоменклатурнаяГруппаДляСписания;
				Док.Субконто2 = СтрокаТЧ.СтатьяЗатрат; 
			КонецЕсли;	
			Док.ПодразделениеЗатрат = СтрокаТЧ.ПодразделениеЗатрат; 
			Док.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
			Док.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.Организация = Объект.Организация;
			Док.Комментарий = "#Загружен: Списание товаров № "+СтрокаТЧ.номер+" от " + СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.Материалы.Очистить();
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
				НС = Док.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.Счет = СтрокаТЧ_Номенклатура.СчетУчета;
				
			КонецЦикла;	
			
			Док.пометкаУдаления = ложь;
			Док.Записать(РежимЗаписиДокумента.Запись);
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДоукомплектациюАвтомобилей(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ДоукомплектацияАвтомобилей Цикл
		
	
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ТребованиеНакладная.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ТребованиеНакладная.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = 1;
			КонецЕсли;	
			
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
			Док.Склад = СтрокаТЧ.Склад;
			Док.СчетЗатрат = ТекущаяНастройкаОбмена.Доукомплектация_СчетЗатрат;
			Если Док.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)=неопределено Тогда
				Док.Субконто1 = ТекущаяНастройкаОбмена.Доукомплектация_СтатьяЗатрат; 
			Иначе	
				Док.Субконто1 = СтрокаТЧ.НоменклатурнаяГруппа;
				Док.Субконто2 = ТекущаяНастройкаОбмена.Доукомплектация_СтатьяЗатрат; 
			КонецЕсли;	
			Док.ПодразделениеЗатрат = СтрокаТЧ.ПодразделениеЗатрат; 
			Док.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
			Док.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.Организация = Объект.Организация;
			Док.Комментарий = "#Загружен: Списание товаров № "+СтрокаТЧ.номер+" от " + СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.Материалы.Очистить();
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Материалы Цикл
				НС = Док.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.Счет = СтрокаТЧ_Номенклатура.СчетУчета;
			КонецЦикла;	
			
			Док.пометкаУдаления = ложь;
			Док.Записать(РежимЗаписиДокумента.Запись);
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьОприходованиеТоваров(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ОприходованиеТоваров Цикл
		
		//Получаем параметры организации
		
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ОприходованиеТоваров.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ОприходованиеТоваров.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = 1;
			КонецЕсли;	
			
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
			Док.Склад = СтрокаТЧ.Склад;
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.Организация = Объект.Организация;
			Док.Комментарий = "#Загружен: Оприходование товаров № "+СтрокаТЧ.номер+" от " + СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.Товары.Очистить();
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
				НС = Док.товары.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.СчетУчета = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчета);
			КонецЦикла;	
			
			Док.пометкаУдаления = ложь;
			Док.Записать(РежимЗаписиДокумента.Запись);
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьКомплектациюТоваров(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из Комплектация Цикл
		
		//Получаем параметры организации
		
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.КомплектацияНоменклатуры.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.КомплектацияНоменклатуры.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = 1;
			КонецЕсли;	
			
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
			Док.Склад = СтрокаТЧ.Склад;
			Док.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.Организация = Объект.Организация;
			Док.Комментарий = "#Загружен: Комплектация товаров № "+СтрокаТЧ.номер+" от " + СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.ВидОперации = СтрокаТЧ.ВидОперации;
			
			Если Док.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
				Док.Номенклатура = СтрокаТЧ.Комплект[0].Номенклатура;
				Док.Количество = СтрокаТЧ.Комплект[0].Количество;
				Док.СчетУчета = СтрокаТЧ.Комплект[0].СчетУчета;
			Иначе	
				Док.Номенклатура = СтрокаТЧ.Комплектующие[0].Номенклатура;
				Док.Количество = СтрокаТЧ.Комплектующие[0].Количество;
				СуммаКРаспределению = СтрокаТЧ.Комплект.Итог("Сумма");
				Док.СчетУчета = СтрокаТЧ.Комплектующие[0].СчетУчета;
			КонецЕсли;	
			
			Док.Комплектующие.Очистить();
			
			ДоляОбщая = 0;
			Для Каждого СтрокаТЧ_Номенклатура из ?(Док.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, СтрокаТЧ.Комплектующие, СтрокаТЧ.Комплект) Цикл
				НС = Док.Комплектующие.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.СчетУчета = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчета);;
				НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
				
				Если Док.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация Тогда
					НС.ДоляСтоимости = СтрокаТЧ_Номенклатура.Сумма*100/СуммаКРаспределению;
					ДоляОбщая = ДоляОбщая + НС.ДоляСтоимости;
				КонецЕсли;	
			КонецЦикла;	
			НС.ДоляСтоимости = НС.ДоляСтоимости + (100-ДоляОбщая);
			
			Док.пометкаУдаления = ложь;
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
				СтрокаТЧ.Документ = Док.ссылка;
			Исключение
				
				СтрокаТЧ.ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;
			
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьПеремещения(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из Перемещения Цикл
		
		//Получаем параметры организации
		СтруктураОрганизацииОтправителя = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформленияОтправитель);		
		СтруктураОрганизацииПолучателя = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформленияПолучатель);		
		
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
				Если не СтрокаТЧ.УИДКакРеквизит Тогда
					Док.УстановитьСсылкуНового(Документы.ПеремещениеТоваров.ПолучитьСсылку(УИД));
				КонецЕсли;	
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = 1;
			КонецЕсли;	
			
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			Док.ПодразделениеОтправитель = СтруктураОрганизацииОтправителя.Подразделение;
			Док.ПодразделениеПолучатель = СтруктураОрганизацииПолучателя.Подразделение;
			Док.СкладОтправитель = СтруктураОрганизацииОтправителя.Склад;
			Док.СкладПолучатель = СтруктураОрганизацииПолучателя.Склад;
			Док.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.Организация = Объект.Организация;
			Док.Комментарий = "#Загружен: Перемещение товаров № "+СтрокаТЧ.номер+" от " + СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.Товары.Очистить();
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
				НС = Док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.СчетУчета = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчета);;
				НС.НовыйСчетУчета = СтрокаТЧ_Номенклатура.СчетУчета;
				НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
			КонецЦикла;	
			
			Док.пометкаУдаления = ложь;
			Док.Записать(РежимЗаписиДокумента.Запись);
			
			Если СтрокаТЧ.УИДкакРеквизит Тогда
				//Пишем доп.реквизит к документу
				НовоеСвойство = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				НовоеСвойство.Объект = Док.Ссылка;
				НовоеСвойство.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","Матрица_УИД");
				НовоеСвойство.Значение = СтрокаТЧ.УИД;
				
				НовоеСвойство.Записать(Истина);			
				
			КонецЕсли;
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьПеремещенияАвтомобилей(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ПеремещенияАвтомобилей Цикл
		
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		
		Для Каждого СтрокаСклад из СтрокаТЧ.СкладыОтправители Цикл
			Если _ПерезаполнятьНайденное или СтрокаСклад.Документ.Пустая() Тогда
				
				
				Если СтрокаСклад.Документ.Пустая() Тогда
					Док = Документы.ПеремещениеТоваров.СоздатьДокумент();
				Иначе
					Док = СтрокаСклад.Документ.ПолучитьОбъект();
					СтрокаТЧ.ВариантЗагрузки = 1;
				КонецЕсли;	
				
				//Заполняем реквизиты по умолчанию
				Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				
				Док.ПодразделениеОтправитель = СтрокаСклад.ПодразделениеОтправитель;
				Док.ПодразделениеПолучатель = СтрокаТЧ.ПодразделениеПолучатель;
				Док.СкладОтправитель = СтруктураОрганизации.Склад;
				Док.СкладПолучатель = СтруктураОрганизации.Склад;
				Док.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
				
				//Заполняем из табличной части
				Док.Дата = СтрокаТЧ.Дата;
				Док.Организация = Объект.Организация;
				Док.Комментарий = "#Загружен: Перемещение товаров № "+СтрокаТЧ.номер+" от " + СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
				
				// Заполним табличную часть документа
				ОтборСтрокНоменклатуры = Новый Структура;
				ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
				Док.ТоварыНаКомиссии.Очистить();
				Док.Товары.Очистить();
				
				Для Каждого СтрокаТЧ_Номенклатура из СтрокаСклад.Товары Цикл
					Если СтрокаТЧ_Номенклатура.Агентский Тогда
						НС = Док.ТоварыНаКомиссии.Добавить();
						НС.Номенклатура= СтрокаТЧ_Номенклатура.Автомобиль;
						НС.Количество = 1;
						НС.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
						НС.НовыйСчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
					Иначе
						НС = Док.Товары.Добавить();
						НС.Номенклатура= СтрокаТЧ_Номенклатура.Автомобиль;
						НС.Количество = 1;
						НС.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
						НС.НовыйСчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
						НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
					КонецЕсли;	
				КонецЦикла;	
				
				
				Док.пометкаУдаления = ложь;
				Док.Записать(РежимЗаписиДокумента.Запись);
				СтрокаСклад.Документ = Док.ссылка;
				НовоеСвойство = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				НовоеСвойство.Объект = Док.Ссылка;
				НовоеСвойство.Свойство = ДопРеквизит_УИДПеремещения;
				НовоеСвойство.Значение = СтрокаТЧ.УИД;
			
				НовоеСвойство.Записать(Истина);	
				Попытка 
					Док.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаТЧ.Загружен = Истина;
					СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
					
					
					
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
					
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
					СтрокаТЧ.ВариантЗагрузки = 0;
				КонецПопытки;	
				
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыПТиУ(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ПоступлениеТоваровУслуг Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
			
			ЗаполнитьДокументПТиУ(Док, СтрокаТЧ, СтруктураОрганизации);
			
			Док.Комментарий = "#Загружен: Поступление товаров. СФ № "+СтрокаТЧ.СчетФактураНомер + " от "+СтрокаТЧ.СчетФактураДата+ " Дата загрузки "+ТекущаяДата();
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
					//Пробуем изменить дату на дату документа
					Док.Дата = СтрокаТЧ.Дата;
					Док.Записать(РежимЗаписиДокумента.Запись);
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Предупреждение: измененена дата документа. Период закрыт");
				КонецЕсли;
			КонецПопытки;
			
			Попытка 
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		Если СтрокаТЧ.СчетФактураНомер<>"" и (_ПерезаполнятьНайденное или СтрокаТЧ.СчетФактура.пустая()) Тогда
			
			ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
			ПараметрыСозданияСчетаФактуры.Основание =СтрокаТЧ.Документ;
			ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = СтрокаТЧ.СчетФактураНомер;
			ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = СтрокаТЧ.СчетФактураДата;
			
			Попытка
				СтрокаТЧ.СчетФактура = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры).ссылка;
			Исключение
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка создания сф");
					СтрокаТЧ.ЕстьОшибки = Истина;
					СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;		
				
			//СтрокаТЧ.Документ,
			//СтрокаТЧ.СчетФактураНомер,
			//СтрокаТЧ.СчетФактураДата,
			//СтрокаТЧ.Контрагент,).ссылка;
			
			// При необходимости меняем КПП на КПП обособленного подразделения
			Если СтрокаТЧ.КонтрагентКПП<>СтрокаТЧ.Контрагент.КПП и СтрокаТЧ.СчетФактура<>Документы.СчетФактураПолученный.ПустаяСсылка() Тогда
				СФ = СтрокаТЧ.СчетФактура.ПолучитьОбъект();
				СФ.КППКонтрагента = СтрокаТЧ.КонтрагентКПП;
				Попытка
					СФ.Записать(РежимЗаписиДокумента.Запись);
					СФ.Записать(РежимЗаписиДокумента.Проведение);	
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения сф");
					СтрокаТЧ.ВариантЗагрузки = 0;
				КонецПопытки
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьПоступлениеМатериалов(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ПоступлениеМатериалов Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
			
			ЗаполнитьДокументПТиУ(Док, СтрокаТЧ, СтруктураОрганизации);
			
			Док.Комментарий = "#Загружен: Поступление товаров. СФ № "+СтрокаТЧ.СчетФактураНомер + " от "+СтрокаТЧ.СчетФактураДата+ " Дата загрузки "+ТекущаяДата();
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
					//Пробуем изменить дату на дату документа
					Док.Дата = СтрокаТЧ.Дата;
					Док.Записать(РежимЗаписиДокумента.Запись);
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Предупреждение: измененена дата документа. Период закрыт");
				КонецЕсли;
			КонецПопытки;
			Попытка 
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		Если СтрокаТЧ.СчетФактураНомер<>"" и (_ПерезаполнятьНайденное или СтрокаТЧ.СчетФактура.пустая()) Тогда
			
			ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
			ПараметрыСозданияСчетаФактуры.Основание =СтрокаТЧ.Документ;
			ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = СтрокаТЧ.СчетФактураНомер;
			ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = СтрокаТЧ.СчетФактураДата;
			
			Попытка
				СтрокаТЧ.СчетФактура = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры).ссылка;
			Исключение
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка создания сф");
					СтрокаТЧ.ЕстьОшибки = Истина;
					СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;		
			
			// При необходимости меняем КПП на КПП обособленного подразделения
			Если СтрокаТЧ.КонтрагентКПП<>СтрокаТЧ.Контрагент.КПП и СтрокаТЧ.СчетФактура<>Документы.СчетФактураПолученный.ПустаяСсылка() Тогда
				СФ = СтрокаТЧ.СчетФактура.ПолучитьОбъект();
				СФ.КППКонтрагента = СтрокаТЧ.КонтрагентКПП;
				СФ.Записать(РежимЗаписиДокумента.Запись);
				Попытка
					СФ.Записать(РежимЗаписиДокумента.Проведение);	
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения сф");
					СтрокаТЧ.ВариантЗагрузки = 0;
				КонецПопытки
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыПоступлениеАвтомобилей(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ПоступлениеАвтомобилей Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			//СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			//СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
			
			ЗаполнитьДокументПТиУ(Док, СтрокаТЧ, ,Истина );
			
		    Док.Комментарий = "#Загружен: Поступление товаров. СФ № "+СтрокаТЧ.СчетФактураНомер + " от "+СтрокаТЧ.СчетФактураДата+ " Дата загрузки "+ТекущаяДата();
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
					//Пробуем изменить дату на дату документа
					Док.Дата = СтрокаТЧ.Дата;
					Док.Записать(РежимЗаписиДокумента.Запись);
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Предупреждение: измененена дата документа. Период закрыт");
				КонецЕсли;
			КонецПопытки;
			
			Попытка 
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		Если СтрокаТЧ.СчетФактураНомер<>"" и (_ПерезаполнятьНайденное или СтрокаТЧ.СчетФактура.пустая()) Тогда
			
			ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
			ПараметрыСозданияСчетаФактуры.Основание =СтрокаТЧ.Документ;
			ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = СтрокаТЧ.СчетФактураНомер;
			ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = СтрокаТЧ.СчетФактураДата;
			
			Попытка
				СтрокаТЧ.СчетФактура = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры).ссылка;
			Исключение
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка создания сф");
					СтрокаТЧ.ЕстьОшибки = Истина;
					СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;		
			
			
			// При необходимости меняем КПП на КПП обособленного подразделения
			Если СтрокаТЧ.КонтрагентКПП<>СтрокаТЧ.Контрагент.КПП и СтрокаТЧ.СчетФактура<>Документы.СчетФактураПолученный.ПустаяСсылка() Тогда
				СФ = СтрокаТЧ.СчетФактура.ПолучитьОбъект();
				СФ.КППКонтрагента = СтрокаТЧ.КонтрагентКПП;
				СФ.Записать(РежимЗаписиДокумента.Запись);
				Попытка
					СФ.Записать(РежимЗаписиДокумента.Проведение);	
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения сф");
					СтрокаТЧ.ВариантЗагрузки = 0;
				КонецПопытки
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьАктыДоработки(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из АктДоработки Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
			
			ЗаполнитьДокументПТиУ(Док, СтрокаТЧ,"Доработка" ,Истина );
			
			Док.Комментарий = "#Загружен: Акт доработки № "+сокрЛП(СтрокаТЧ.Номер)+" от "+СтрокаТЧ.Дата +" Дата загрузки "+ТекущаяДата();
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
					//Пробуем изменить дату на дату документа
					Док.Дата = СтрокаТЧ.Дата;
					Док.Записать(РежимЗаписиДокумента.Запись);
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Предупреждение: измененена дата документа. Период закрыт");
				КонецЕсли;
			КонецПопытки;
			СтрокаТЧ.Документ = Док.ссылка;
			СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		Если  СтрокаТЧ.СчетФактураНомер<>"" и (_ПерезаполнятьНайденное или СтрокаТЧ.СчетФактура.пустая()) Тогда
			
			ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
			ПараметрыСозданияСчетаФактуры.Основание =СтрокаТЧ.Документ;
			ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = СтрокаТЧ.СчетФактураНомер;
			ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = СтрокаТЧ.СчетФактураДата;
			
			Попытка
				СтрокаТЧ.СчетФактура = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры).ссылка;
			Исключение
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка создания сф");
					СтрокаТЧ.ЕстьОшибки = Истина;
					СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;		
			
			// При необходимости меняем КПП на КПП обособленного подразделения
			Если СтрокаТЧ.КонтрагентКПП<>СтрокаТЧ.Контрагент.КПП и СтрокаТЧ.СчетФактура<>Документы.СчетФактураПолученный.ПустаяСсылка() Тогда
				СФ = СтрокаТЧ.СчетФактура.ПолучитьОбъект();
				СФ.КППКонтрагента = СтрокаТЧ.КонтрагентКПП;
				СФ.Записать(РежимЗаписиДокумента.Запись);
				Попытка
					СФ.Записать(РежимЗаписиДокумента.Проведение);	
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения сф");
					СтрокаТЧ.ВариантЗагрузки = 0;
				КонецПопытки
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьПередачуВПереработку(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ПередачаВПереработку Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ПередачаТоваров.СоздатьДокумент();
				Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
				Док.УстановитьСсылкуНового(Документы.ПередачаТоваров.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
			
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			
			Док.Организация = Объект.Организация;
			Док.Комментарий = "#Загружен: Передача на переработку № "+СтрокаТЧ.номер+" от " + СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
			Док.Склад = СтрокаТЧ.Склад;
			Док.контрагент = СтрокаТЧ.контрагент;
			Док.ДоговорКонтрагента = СтрокаТЧ.договорКонтрагента;
			
			Док.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.товары.Очистить();
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.товары Цикл
				НС = Док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.Номенклатура = СтрокаТЧ_Номенклатура.автомобиль;
				НС.СчетУчета    = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
				НС.СчетПередачи = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;				
			КонецЦикла;	
			
			
			Док.Записать(РежимЗаписиДокумента.Запись);
			СтрокаТЧ.Документ = Док.ссылка;
			СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
		
	КонецЦикла;		
	
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ВозвратИзПереработки Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			Если не СтрокаТЧ.ТребуетсяПередачаВПереработку Тогда
				продолжить;
			КонецЕсли;
			//Получаем параметры организации
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.ПередачаВПереработку.Пустая() Тогда
				Док = Документы.ПередачаТоваров.СоздатьДокумент();
				Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
				Док.УстановитьСсылкуНового(Документы.ПередачаТоваров.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.ПередачаВПереработку.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
			
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			
			Док.Организация = Объект.Организация;
			Док.Комментарий = "#Загружен: Возврат из переработки № "+СтрокаТЧ.номер+" от " + СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
			Док.Склад = СтрокаТЧ.Склад;
			Док.контрагент = СтрокаТЧ.контрагент;
			Док.ДоговорКонтрагента = СтрокаТЧ.договорКонтрагента;
			
			Док.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.товары.Очистить();
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.товары Цикл
				Если Не ЗначениеЗаполнено(СтрокаТЧ_Номенклатура.ПередачаВПереработку) Тогда
					НС = Док.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
					НС.Номенклатура = СтрокаТЧ_Номенклатура.БазовыйАвтомобиль;
					НС.СчетУчета    = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
					НС.СчетПередачи = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;				
				КонецЕсли;	
			КонецЦикла;	
			
			
			Док.Записать(РежимЗаписиДокумента.Запись);
			СтрокаТЧ.Документ = Док.ссылка;
			СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
		
	КонецЦикла;		
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьПоступлениеИзПереработки(Параметр_Подразделение, Параметр_Склад)
	
	ЕстьОшибки = Ложь;
	
	СтатьяЗатрат = ТекущаяНастройкаОбмена.Переработка_СтатьяЗатрат;
	СтатьяЗатратМатериалы = ТекущаяНастройкаОбмена.Переработка_СтатьяЗатратИспользованныеМатериалы;
	НоменклатурнаяГруппа = ТекущаяНастройкаОбмена.Переработка_НоменклатурнаяГруппа;
	СчетЗатрат = ТекущаяНастройкаОбмена.Переработка_СчетЗатрат;
	Услуга = ТекущаяНастройкаОбмена.Переработка_Услуга;
	
	Для Каждого СтрокаТЧ из ВозвратИзПереработки Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ПоступлениеИзПереработки.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ПоступлениеИзПереработки.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
		
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Док.Организация = Объект.Организация;
			Док.Комментарий = "#Загружен: Поступление из переработки № "+СтрокаТЧ.номер+" от " + СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
			Док.Склад = СтрокаТЧ.Склад;
			Док.контрагент = СтрокаТЧ.контрагент;
			Док.ДоговорКонтрагента = СтрокаТЧ.договорКонтрагента;
			Док.СуммаВключаетНДС = Истина;
			Док.СчетЗатрат = СчетЗатрат;
			Док.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			Док.ПодразделениеЗатрат = СтрокаТЧ.ПодразделениеЗатрат;
			
			Док.курсВзаиморасчетов = 1;
			Док.КратностьВзаиморасчетов = 1;
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			
			Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
			Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			Док.СпособЗачетаАвансов=перечисления.СпособыЗачетаАвансов.Автоматически;
			// Заполним табличную часть документа
//			ОтборСтрокНоменклатуры = Новый Структура;
//			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.ИспользованныеМатериалы.Очистить();
			Док.Услуги.Очистить();
			Док.Продукция.Очистить();
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.товары Цикл
				
				НС = Док.ИспользованныеМатериалы.Добавить();
				НС.Номенклатура = СтрокаТЧ_Номенклатура.БазовыйАвтомобиль;
				НС.Количество = 1;
				НС.Продукция = СтрокаТЧ_Номенклатура.автомобиль;
				НС.СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
				НС.СтатьяЗатрат = СтатьяЗатратМатериалы;
				НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
				
				НС = Док.Продукция.Добавить();
				НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
				НС.Количество = 1;
				НС.Счет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
				НС.ПлановаяСтоимость = СтрокаТЧ_Номенклатура.ПлановаяСтоимость;
				НС.СуммаПлановая = НС.ПлановаяСтоимость;
				
				НС = Док.Услуги.Добавить();
				НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
				НС.Содержание = "Услуга по переработке "+СтрокаТЧ_Номенклатура.БазовыйАвтомобиль;
				НС.Количество = 1;
				НС.Сумма = СтрокаТЧ_Номенклатура.СуммаУслуг;
				НС.СтавкаНДС = СтрокаТЧ_Номенклатура.ставкаНДС;
				НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
				НС.СтатьяЗатрат = СтатьяЗатрат;
				НС.СуммаНДС = СтрокаТЧ_Номенклатура.СуммаНДС;
				НС.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
				НС.Цена = НС.Сумма;
				
			КонецЦикла;	
			
			Док.Записать(РежимЗаписиДокумента.Запись);
			СтрокаТЧ.Документ = Док.ссылка;
			СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
			Если не СтрокаТЧ.ЕстьОшибки и СтрокаТЧ.СчетФактураНомер<>"" и (_ПерезаполнятьНайденное или СтрокаТЧ.СчетФактура.пустая()) Тогда
			
				ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
				ПараметрыСозданияСчетаФактуры.Основание =СтрокаТЧ.Документ;
				ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = СтрокаТЧ.СчетФактураНомер;
				ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = СтрокаТЧ.СчетФактураДата;
			
			Попытка
				СтрокаТЧ.СчетФактура = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры).ссылка;
			Исключение
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка создания сф");
					СтрокаТЧ.ЕстьОшибки = Истина;
					СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;		
			
			КонецЕсли;
		
		
			Если СтрокаТЧ.ЕстьОшибки Тогда
				ЕстьОшибки = Истина;
			Иначе
				СтрокаТЧ.Загружен = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыПриемАгентом(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ПриемАгентом Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
			
			ЗаполнитьДокументПТиУ(Док, СтрокаТЧ, "На комиссию");
			
			Док.Комментарий = "#Загружен: прием агентом № "+СтрокаТЧ.НомерВходящегоДокумента + " от "+СтрокаТЧ.ДатаВходящегоДокумента+ " Дата загрузки "+ТекущаяДата();
			
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
					//Пробуем изменить дату на дату документа
					Док.Дата = СтрокаТЧ.Дата;
					Док.Записать(РежимЗаписиДокумента.Запись);
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Предупреждение: измененена дата документа. Период закрыт");
				КонецЕсли;
			КонецПопытки;
			Попытка 
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыПередачаАгенту(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ПередачаАгенту Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
			
			ЗаполнитьДокументРеализацияТиУ(Док, СтрокаТЧ, СтруктураОрганизации, Истина, Истина,  Ложь, "На комиссию");
			
			Док.Комментарий = "#Загружен: Передача агенту № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата +" Дата загрузки "+ТекущаяДата();
			
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
					//Пробуем изменить дату на дату документа
					Док.Дата = СтрокаТЧ.Дата;
					Док.Записать(РежимЗаписиДокумента.Запись);
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Предупреждение: измененена дата документа. Период закрыт");
				КонецЕсли;
			КонецПопытки;
			Попытка 
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
			
		КонецЕсли;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыРТиУ(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из РеализацияТиУ Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КонецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			//		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
			
			Если СтрокаТЧ.документ.пустая() Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;
			
			
			ЗаполнитьДокументРеализацияТиУ(Док, СтрокаТЧ, СтруктураОрганизации);
			
			
			ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
			ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);   
				ДокЗаписан = Истина;
			Исключение
				ДокЗаписан = Ложь;	
			КонецПопытки;
			
			Если не ДокЗаписан Тогда
				//Корректируем номер и выдаем сообщение 
				Док.Номер = "д"+Лев(Док.Номер,4)+Прав(Док.Номер,6);
				Док.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Дубликат номера!!! Необходим контроль документа "+Док);
			КонецЕсли;

			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
				
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				ЕстьОшибки = Истина;
				СтрокаТЧ.ВариантЗагрузки = 0;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа реализации");
			КОнецПопытки;	
			
			Если (_ПерезаполнятьНайденное или СтрокаТЧ.СчетФактура.Пустая()) и не СтрокаТЧ.естьОшибки Тогда
				Попытка
					Если СтрокаТЧ.СчетФактураНомер<>"" Тогда
					
						Для Каждого СтрокаСФ из ВыгрузкаИтоговДляСФ Цикл
							ДокСФ = СформироватьСФВыданную(СтрокаТЧ.Дата,
							СтрокаТЧ.СчетФактураНомер, 
							Док.Ссылка, 
							Объект.Организация,
							СтрокаТЧ.Контрагент, 
							СтрокаТЧ.ДоговорКонтрагента, 
							СтрокаСФ.Сумма, 
							СтрокаСФ.СтавкаНДС, 
							СтрокаСФ.СуммаНДС, 
							СтрокаТЧ.УИД, ВыгрузкаИтоговДляСФ.количество() = 1,
							СтрокаТЧ.КонтрагентКПП);	
						КонецЦикла;		
						Если ДокСФ = неопределено или ДокСФ.Пустая() Тогда
							СтрокаТЧ.ЕстьОшибки = Истина;
							ЕстьОшибки = Истина;
							ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки счета-фактуры - не удалось создать счет-фактуру");
						Иначе	
							СтрокаТЧ.СчетФактура = ДокСФ.ссылка;
						КонецЕсли;	
					КонецЕсли;
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
					ЕстьОшибки = Истина;
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки счета-фактуры");
				КонецПопытки;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыРеализацииМатериалов(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из РеализацияМатериалов Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КонецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			//		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
			
			Если СтрокаТЧ.документ.пустая() Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;
			
			
			ЗаполнитьДокументРеализацияТиУ(Док, СтрокаТЧ, СтруктураОрганизации);
			
			
			ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
			ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
			
			Попытка
				Док.Комментарий = "#Загружен: Реализация материалов № "+СтрокаТЧ.СчетФактураНомер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
				Док.Записать(РежимЗаписиДокумента.Запись);   
				ДокЗаписан = Истина;
			Исключение
				ДокЗаписан = Ложь;	
			КонецПопытки;
			
			Если не ДокЗаписан Тогда
				//Корректируем номер и выдаем сообщение 
				Док.Номер = "д"+Лев(Док.Номер,4)+Прав(Док.Номер,6);
				Док.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Дубликат номера!!! Необходим контроль документа "+Док);
			КонецЕсли;

			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
				
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				ЕстьОшибки = Истина;
				СтрокаТЧ.ВариантЗагрузки = 0;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа реализации");
			КОнецПопытки;	
			
			Если (_ПерезаполнятьНайденное или СтрокаТЧ.СчетФактура.Пустая()) и не СтрокаТЧ.естьОшибки Тогда
				Попытка
					Если СтрокаТЧ.СчетФактураНомер<>"" Тогда
					
						Для Каждого СтрокаСФ из ВыгрузкаИтоговДляСФ Цикл
							ДокСФ = СформироватьСФВыданную(СтрокаТЧ.Дата,
							СтрокаТЧ.СчетФактураНомер, 
							Док.Ссылка, 
							Объект.Организация,
							СтрокаТЧ.Контрагент, 
							СтрокаТЧ.ДоговорКонтрагента, 
							СтрокаСФ.Сумма, 
							СтрокаСФ.СтавкаНДС, 
							СтрокаСФ.СуммаНДС, 
							СтрокаТЧ.УИД, ВыгрузкаИтоговДляСФ.количество() = 1,
							СтрокаТЧ.КонтрагентКПП);	
						КонецЦикла;		
						Если ДокСФ = неопределено или ДокСФ.Пустая() Тогда
							СтрокаТЧ.ЕстьОшибки = Истина;
							ЕстьОшибки = Истина;
							ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки счета-фактуры - не удалось создать счет-фактуру");
						Иначе	
							СтрокаТЧ.СчетФактура = ДокСФ.ссылка;
						КонецЕсли;	
					КонецЕсли;
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
					ЕстьОшибки = Истина;
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки счета-фактуры");
				КонецПопытки;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыРеализацииУслуг(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из РеализацияУслуг Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КонецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			//		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
			
			Если СтрокаТЧ.документ.пустая() Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;
			
			
			ЗаполнитьДокументРеализацияТиУ(Док, СтрокаТЧ, СтруктураОрганизации,,,Истина);
			
			
			ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
			ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
			
			Попытка
				Док.Комментарий = "#Загружен: Реализация материалов № "+СтрокаТЧ.СчетФактураНомер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
				Док.Записать(РежимЗаписиДокумента.Запись);   
				ДокЗаписан = Истина;
			Исключение
				ДокЗаписан = Ложь;	
			КонецПопытки;
			
			Если не ДокЗаписан Тогда
				//Корректируем номер и выдаем сообщение 
				Док.Номер = "д"+Лев(Док.Номер,4)+Прав(Док.Номер,6);
				Док.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Дубликат номера!!! Необходим контроль документа "+Док);
			КонецЕсли;

			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
				
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				ЕстьОшибки = Истина;
				СтрокаТЧ.ВариантЗагрузки = 0;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа реализации");
			КОнецПопытки;	
			
			Если (_ПерезаполнятьНайденное или СтрокаТЧ.СчетФактура.Пустая()) и не СтрокаТЧ.естьОшибки Тогда
				Попытка
					Если СтрокаТЧ.СчетФактураНомер<>"" Тогда
					
						Для Каждого СтрокаСФ из ВыгрузкаИтоговДляСФ Цикл
							ДокСФ = СформироватьСФВыданную(СтрокаТЧ.Дата,
							СтрокаТЧ.СчетФактураНомер, 
							Док.Ссылка, 
							Объект.Организация,
							СтрокаТЧ.Контрагент, 
							СтрокаТЧ.ДоговорКонтрагента, 
							СтрокаСФ.Сумма, 
							СтрокаСФ.СтавкаНДС, 
							СтрокаСФ.СуммаНДС, 
							СтрокаТЧ.УИД, ВыгрузкаИтоговДляСФ.количество() = 1,
							СтрокаТЧ.КонтрагентКПП);	
						КонецЦикла;		
						Если ДокСФ = неопределено или ДокСФ.Пустая() Тогда
							СтрокаТЧ.ЕстьОшибки = Истина;
							ЕстьОшибки = Истина;
							ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки счета-фактуры - не удалось создать счет-фактуру");
						Иначе	
							СтрокаТЧ.СчетФактура = ДокСФ.ссылка;
						КонецЕсли;	
					КонецЕсли;
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
					ЕстьОшибки = Истина;
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки счета-фактуры");
				КонецПопытки;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции



&НаСервере
Функция ЗагрузитьСтраховыеСделки(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	
	//Получим значение дпо.реквизита по имени
	ДопРеквизит_УИД_ОУ = НайтиДопРеквизитПоИмени("УИД_ОУ");
	
	
	Для Каждого СтрокаТЧ из СтраховыеСделки Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КонецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
			
			
			
			Если СтрокаТЧ.документ.пустая() Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				//Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
				//Необходимо записать доп.реквизит 
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;
			
			
			ЗаполнитьДокументРеализацияТиУ_СтраховыеСделки(Док, СтрокаТЧ, СтруктураОрганизации);
			
			
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
				
				// Устанавливаем доп.реквизит
				НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Объект.Установить(Док.Ссылка); 
				НаборЗаписей.Отбор.свойство.установить(ДопРеквизит_УИД_ОУ);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НоваяЗапись = НаборЗаписей.Добавить(); 
				
				НоваяЗапись.Объект = Док.Ссылка; 
				НоваяЗапись.Свойство = ДопРеквизит_УИД_ОУ; 
				НоваяЗапись.Значение = СтрокаТЧ.УИД; 
				
				НаборЗаписей.Записать(); 	
				
				
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				ЕстьОшибки = Истина;
				СтрокаТЧ.ВариантЗагрузки = 0;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа реализации");
			КОнецПопытки;	
		КонецЕсли;	
	
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыРеализацииАвтомобилей(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из РеализацияАвтомобилей Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КонецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			//		Док = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
			
			Если СтрокаТЧ.документ.пустая() Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;
			
			
			ЗаполнитьДокументРеализацияТиУ(Док, СтрокаТЧ, СтруктураОрганизации, Истина, истина);
			
			
			ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
			ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
				
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				ЕстьОшибки = Истина;
				СтрокаТЧ.ВариантЗагрузки = 0;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа реализации");
			КОнецПопытки;	
			
			Если (_ПерезаполнятьНайденное или СтрокаТЧ.СчетФактура.Пустая()) и не СтрокаТЧ.естьОшибки Тогда
				Попытка
					Если СтрокаТЧ.СчетФактураНомер<>"" Тогда
					
						Для Каждого СтрокаСФ из ВыгрузкаИтоговДляСФ Цикл
							ДокСФ = СформироватьСФВыданную(СтрокаТЧ.Дата,
							СтрокаТЧ.СчетФактураНомер, 
							Док.Ссылка, 
							Объект.Организация,
							СтрокаТЧ.Контрагент, 
							СтрокаТЧ.ДоговорКонтрагента, 
							СтрокаСФ.Сумма, 
							СтрокаСФ.СтавкаНДС, 
							СтрокаСФ.СуммаНДС, 
							СтрокаТЧ.УИД, ВыгрузкаИтоговДляСФ.количество() = 1,
							СтрокаТЧ.КонтрагентКПП);	
						КонецЦикла;		
						Если ДокСФ = неопределено или ДокСФ.Пустая Тогда
							СтрокаТЧ.ЕстьОшибки = Истина;
							ЕстьОшибки = Истина;
							ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки счета-фактуры");
						Иначе	
							СтрокаТЧ.СчетФактура = ДокСФ.ссылка;
						КонецЕсли;	
					КонецЕсли;
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
					ЕстьОшибки = Истина;
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки счета-фактуры");
				КонецПопытки;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДоговорыТЭФЛ(Параметр_Подразделение, Параметр_Склад)
	
	ЕстьОшибки = Ложь;
	
	СтатьяЗатрат = ТекущаяНастройкаОбмена.Доставка_СтатьяЗатрат;
	СчетЗатрат = ТекущаяНастройкаОбмена.Доставка_СчетЗатрат;
	
	Для Каждого СтрокаТЧ из ДоговорыТЭФЛ Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или СтрокаТч.Документ.Пустая() Тогда
			
			
			Если СтрокаТЧ.Документ.Пустая() Тогда
				Док = Документы.ОперацияБух.СоздатьДокумент();
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
		
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Док.Организация = Объект.Организация;
			Док.Комментарий = "#Загружены договоры доставки от " + Формат(СтрокаТЧ.Дата,"ДФ=dd.MM.yyyy")+ " Дата загрузки "+ТекущаяДата();
			Док.Содержание = "Затраты по договорам доставки (по данным ОУ) от " + Формат(СтрокаТЧ.Дата,"ДФ=dd.MM.yyyy");
			Док.Дата = СтрокаТЧ.Дата;
			Док.СуммаОперации = СтрокаТЧ.СуммаДокумента;
			
			Док.Записать(РежимЗаписиДокумента.Запись);
			
			ДвиженияДока = Док.Движения.Хозрасчетный;
			
			Для Каждого СтрокаИсполнители из СтрокаТЧ.Исполнители Цикл
				НоваяПроводка = ДвиженияДока.Добавить();
				НоваяПроводка.СчетДт = СчетЗатрат;
				НоваяПроводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат] = СтатьяЗатрат;
				НоваяПроводка.ПодразделениеДт = СтрокаТЧ.ПодразделениеЗатрат;
				
				НоваяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами;
				НоваяПроводка.субконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций] = СтрокаИсполнители.Контрагент;
				
				НоваяПроводка.Период = Док.дата;
				НоваяПроводка.Активность = Истина;
				
				НоваяПроводка.Сумма = СтрокаИсполнители.Сумма;
				НоваяПроводка.СуммаНУДт = СтрокаИсполнители.сумма;
				НоваяПроводка.СуммаНУКт = СтрокаИсполнители.сумма;
			КонецЦикла;	
			
			ДвиженияДока.Записать(Истина);
			СтрокаТЧ.Документ = Док.ссылка;
			СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
		
			Если СтрокаТЧ.ЕстьОшибки Тогда
				ЕстьОшибки = Истина;
			Иначе
				СтрокаТЧ.Загружен = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьВозвратыПоставщикам(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ВозвратТоваровПоставщику Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КонецЕсли;	
		Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) Тогда
			ЭтоЕНВД = Истина;
		Иначе
			ЭтоЕНВД = Ложь;
		КонецЕсли;
		Если _ПерезаполнятьНайденное или не ЗначениеЗаполнено(СтрокаТч.Документ) Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			ПроверитьНаСовпадениеДокумента = Ложь;
			Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				ПроверитьНаСовпадениеДокумента = Истина;
				
			КонецЕсли;
				
			// Проверяем правильность вида документа - если не соответствует, помечаем на удаление и создаем новый
				
			Если СтрокаТЧ.Дата<Дата("20190101") Тогда
				Если  ПроверитьНаСовпадениеДокумента и (ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.ВозвратТоваровПоставщику.ПустаяСсылка())) Тогда
					Док.УстановитьПометкуУдаления(Истина);
					СтрокаТЧ.Документ = "";
				КонецЕсли;
				Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
					Док = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
					Док.УстановитьСсылкуНового(Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УИД));
				КонецЕсли;
				ЗаполнитьДокументВозвратПостащику(Док, СтрокаТЧ, СтруктураОрганизации);
				ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
				ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
					
			ИначеЕсли СтрокаТЧ.Дата >= Дата("20200101") и  (не ЗначениеЗаполнено(СтрокаТЧ.НомерВходящегоДокумента) и ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование)) Тогда
				Если  ПроверитьНаСовпадениеДокумента и (ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.ВозвратТоваровПоставщику.ПустаяСсылка())) Тогда
					Док.УстановитьПометкуУдаления(Истина);
					СтрокаТЧ.Документ = "";
				КонецЕсли;
				Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
					Док = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
					Док.УстановитьСсылкуНового(Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УИД));
				КонецЕсли;
				ЗаполнитьДокументВозвратПостащику(Док, СтрокаТЧ, СтруктураОрганизации);
				ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
				ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
					
			ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.НомерВходящегоДокумента) и ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
				Если ПроверитьНаСовпадениеДокумента и (ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.КорректировкаПоступления.ПустаяСсылка())) Тогда
					Док.УстановитьПометкуУдаления(Истина);
					СтрокаТЧ.Документ = "";
				КонецЕсли;	
				Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
					Док = Документы.КорректировкаПоступления.СоздатьДокумент();
					Док.УстановитьСсылкуНового(Документы.КорректировкаПоступления.ПолучитьСсылку(УИД));
				КонецЕсли;
				ЗаполнитьДокументКорректировкаПоступления(Док, СтрокаТЧ, СтруктураОрганизации);
				ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
				ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
					
			Иначе
				Если ПроверитьНаСовпадениеДокумента и (ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.РеализацияТоваровУслуг.ПустаяСсылка())) Тогда
					Док.УстановитьПометкуУдаления(Истина);
					СтрокаТЧ.Документ = "";
				КонецЕсли;	
				Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
					Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
				КонецЕсли;
				ЗаполнитьДокументРеализацияТиУ(Док, СтрокаТЧ, СтруктураОрганизации);
				ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
				ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
					
			КонецЕсли;	
			
			//Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			//	Если СтрокаТЧ.Дата<Дата("20190101") или (СтрокаТЧ.Дата>=Дата("20200101") и (ЗначениеЗаполнено(СтрокаТЧ.СчетФактураНомер) и ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование))) Тогда
			//		Док = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
			//		Док.УстановитьСсылкуНового(Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УИД));
			//	ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.НомерСфВх) и ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда
			//		Док = Документы.КорректировкаПоступления.СоздатьДокумент();
			//		Док.УстановитьСсылкуНового(Документы.КорректировкаПоступления.ПолучитьСсылку(УИД));
			//	Иначе
			//		Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			//		Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
			//	КонецЕсли;	
			//КонецЕсли;	
			//
			//
			//Если СтрокаТЧ.Дата<Дата("20190101")  или (СтрокаТЧ.Дата>=Дата("20200101") и не (ЗначениеЗаполнено(СтрокаТЧ.СчетФактураНомер) и ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование))) Тогда
			//	ЗаполнитьДокументВозвратПостащику(Док, СтрокаТЧ, СтруктураОрганизации);
			//	ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
			//	ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
			//ИначеЕсли не (ЗначениеЗаполнено(СтрокаТЧ.СчетФактураНомер) и ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование)) Тогда
			//	ЗаполнитьДокументРеализацияТиУ(Док, СтрокаТЧ, СтруктураОрганизации);
			//	ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
			//	ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
			//Иначе
			//	ЗаполнитьДокументКорректировкаПоступления(Док, СтрокаТЧ, СтруктураОрганизации);
			//	ВыгрузкаИтоговДляСФ = Док.Товары.Выгрузить();
			//	ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
			//КонецЕсли;	
			
			Док.пометкаУдаления = ложь;
			//Проверка на уникальность номера
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);   
				ДокЗаписан = Истина;
			Исключение
				ДокЗаписан = Ложь;	
			КонецПопытки;
			
			Если не ДокЗаписан Тогда
				//Корректируем номер и выдаем сообщение 
				Док.Номер = "д"+Лев(Док.Номер,4)+Прав(Док.Номер,6);
				Док.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Дубликат номера!!! Необходим контроль документа "+Док);
			КонецЕсли;
			
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.ОшибкаТипаДокумента = Ложь;
				СтрокаТЧ.Номер = Док.Номер;
				
				Если типЗНЧ(СтрокаТЧ.Документ) = ТипЗнч(Документы.КорректировкаПоступления.ПустаяСсылка())  Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.НомерСфВх) Тогда
						
						ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
						ПараметрыСозданияСчетаФактуры.Основание =СтрокаТЧ.Документ;
						ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = СтрокаТЧ.НомерСфВх;
						ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = СтрокаТЧ.ДатаСфВх;
			
						Попытка
							СтрокаТЧ.СчетФактура = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры).ссылка;
						Исключение
							ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка создания сф");
							СтрокаТЧ.ЕстьОшибки = Истина;
							СтрокаТЧ.ВариантЗагрузки = 0;
						КонецПопытки;		
						
					
						// При необходимости меняем КПП на КПП обособленного подразделения
						Если СтрокаТЧ.КонтрагентКПП<>СтрокаТЧ.Контрагент.КПП и СтрокаТЧ.СчетФактура<>Документы.СчетФактураПолученный.ПустаяСсылка() Тогда
							СФ = СтрокаТЧ.СчетФактура.ПолучитьОбъект();
							СФ.КППКонтрагента = СтрокаТЧ.КонтрагентКПП;
							СФ.Записать(РежимЗаписиДокумента.Проведение);
						КонецЕсли;	
					КонецЕсли;
					
				Иначе
					Для Каждого СтрокаСФ из ВыгрузкаИтоговДляСФ Цикл
						ДокСФ = СформироватьСФВыданную(СтрокаТЧ.Дата,
						СтрокаТЧ.СчетФактураНомер, 
						Док.Ссылка, 
						Объект.Организация,
						СтрокаТЧ.Контрагент, 
						СтрокаТЧ.ДоговорКонтрагента, 
						СтрокаСФ.Сумма, 
						СтрокаСФ.СтавкаНДС, 
						СтрокаСФ.СуммаНДС, 
						СтрокаТЧ.УИД, ВыгрузкаИтоговДляСФ.количество() = 1,
						СтрокаТЧ.КонтрагентКПП);	
						
						СтрокаТЧ.СчетФактура = ДокСФ.ссылка;
					КонецЦикла;				   
				КонецЕсли;	
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа возврата поставщику");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
				
		КонецЕсли;	
			
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьВозвратыКомитенту(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ОтчетКомитенту Цикл
		Если СтрокаТЧ.естьОшибки или СтрокаТЧ.Состояние = "РЕАЛИЗАЦИЯ" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) Тогда
			ЭтоЕНВД = Истина;
		Иначе
			ЭтоЕНВД = Ложь;
		КонецЕсли;
		Если _ПерезаполнятьНайденное или не ЗначениеЗаполнено(СтрокаТч.Документ) Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			
			Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				Док = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ВозвратТоваровПоставщику.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
			КонецЕсли;	
			
				ЗаполнитьДокументВозвратПостащику(Док, СтрокаТЧ, СтруктураОрганизации, истина, истина);
			
				Док.пометкаУдаления = ложь;
				
				Док.Записать(РежимЗаписиДокумента.Запись);   
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
				
				СтрокаТЧ.Загружен = Истина;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа возврата комитенту");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
				
		КонецЕсли;	
			
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьОтчетКомитенту(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ОтчетКомитенту Цикл
		
		Если СтрокаТЧ.естьОшибки или СтрокаТЧ.Состояние = "ВОЗВРАТ" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) Тогда
			ЭтоЕНВД = Истина;
		Иначе
			ЭтоЕНВД = Ложь;
		КонецЕсли;
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);	
		СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
		
		УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			#Область ДОКУМЕНТ_Реализация_агентом
		Если _ПерезаполнятьНайденное или не ЗначениеЗаполнено(СтрокаТч.ДокументРеализации) Тогда
			
			Если не ЗначениеЗаполнено(СтрокаТЧ.ДокументРеализации) Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.ДокументРеализации.ПолучитьОбъект();
			КонецЕсли;	
			
				ЗаполнитьДокументРеализацияАгентом(Док, СтрокаТЧ);
			
				Док.пометкаУдаления = ложь;
				
				Док.Записать(РежимЗаписиДокумента.Запись);   
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ДокументРеализации = Док.ссылка;
				СтрокаТЧ.Номер = Док.Номер;
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				ЕстьОшибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа реализации");
				СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;	
		КонецЕсли;	
	#КонецОбласти
		
		#Область ДОКУМЕНТ_Отчет_агента
			Если Не ЕстьОшибки и ( _ПерезаполнятьНайденное или не ЗначениеЗаполнено(СтрокаТч.Документ)) Тогда
				Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
					Док = Документы.ОтчетКомитентуОПродажах.СоздатьДокумент();
					Док.УстановитьСсылкуНового(Документы.ОтчетКомитентуОПродажах.ПолучитьСсылку(УИД));
				Иначе
					Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				КонецЕсли;	
				
				ЗаполнитьДокументОтчетКомитенту(Док, СтрокаТЧ);
				
				Док.пометкаУдаления = ложь;
				
				Док.Записать(РежимЗаписиДокумента.Запись);   
				Попытка 
					Док.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаТЧ.Документ = Док.ссылка;
					СтрокаТЧ.Номер = Док.Номер;
					
					СтрокаТЧ.Загружен = Истина;
					СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
					
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
					ЕстьОшибки = Истина;
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа отчета комитенту");
					СтрокаТЧ.ВариантЗагрузки = 0;
				КонецПопытки;
			КонецЕсли;

		#КонецОбласти
			
		#Область ДОКУМЕНТ_Корректировка_долга			
			Если СтрокаТЧ.НужнаКорректировкаДолга и (_ПерезаполнятьНайденное или не ЗначениеЗаполнено(СтрокаТч.КорректировкаДолга))Тогда
				Если не ЗначениеЗаполнено(СтрокаТЧ.КорректировкаДолга) Тогда
					ДокКД = Документы.КорректировкаДолга.СоздатьДокумент();
					ДокКД.УстановитьСсылкуНового(Документы.КорректировкаДолга.ПолучитьСсылку(УИД));
				Иначе
					ДокКД = СтрокаТЧ.КорректировкаДолга.ПолучитьОбъект();
				КонецЕсли;	
				ЗаполнитьДокументКорректировкаДолга(ДокКД, СтрокаТЧ, СтруктураОрганизации);
				ДокКД.Записать(РежимЗаписиДокумента.Запись);
				Попытка 
					СтрокаТЧ.КорректировкаДолга = ДокКД.ссылка;
					ДокКД.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаТЧ.КорректировкаДолга = ДокКД.ссылка;
					СтрокаТЧ.Номер = Док.Номер;
					СтрокаТЧ.Загружен = Истина;
				Исключение	
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа корректировка долга");
					СтрокаТЧ.ВариантЗагрузки = 0;
					СтрокаТЧ.Загружен = Ложь;
				КонецПопытки;	
					
			КонецЕсли;	
		#КонецОбласти
			
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьОтчетАгента(Параметр_Подразделение, Параметр_Склад)
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ОтчетАгента Цикл
		
		
	Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) Тогда
		ЭтоЕНВД = Истина;
	Иначе
		ЭтоЕНВД = Ложь;
	КонецЕсли;
		
	//Получаем параметры организации
	СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);	
	СтруктураОрганизации.Вставить("подразделениеОрганизации",СтрокаТЧ.ПодразделениеОрганизации);
		
	УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
	
	
	#Область ДОКУМЕНТ_Отчет_агента
	Если Не ЕстьОшибки и ( _ПерезаполнятьНайденное или не ЗначениеЗаполнено(СтрокаТч.Документ)) Тогда
		Если СтрокаТЧ.Состояние = "Возврат" тогда
			Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				Док = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
			КонецЕсли;	                                                       
			
			ЗаполнитьДокументВозвратТиУ(Док,СтрокаТЧ,СтруктураОрганизации,ЭтоЕНВД,Истина);
			
		Иначе
			Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				Док = Документы.ОтчетКомиссионераОПродажах.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ОтчетКомиссионераОПродажах.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
			КонецЕсли;	
			
			ЗаполнитьДокументОтчетКомиссионера(Док, СтрокаТЧ);
			
			Док.пометкаУдаления = ложь;
			
			Док.Записать(РежимЗаписиДокумента.Запись);   
			
			Для Каждого СтрокаТЧ_Покупатели из Док.Покупатели Цикл
				Если СтрокаТЧ_Покупатели.ВыставленСФ Тогда
					//Заменяем номер сф
					Если ЗначениеЗаполнено(СтрокаТЧ_Покупатели.СчетФактура) и 
						ЗначениеЗаполнено(СтрокаТЧ_Покупатели.НомерСФ) и 
						СтрокаТЧ_Покупатели.СчетФактура.Номер<>СтрокаТЧ_Покупатели.НомерСФ Тогда
						
						ДокСФ = СтрокаТЧ_Покупатели.СчетФактура.ПолучитьОбъект();
						ДокСФ.Номер = СтрокаТЧ_Покупатели.Номерсф;
						СтрокаТЧ_Покупатели.номерСФ = "";
						
						ДокСФ.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		СтрокаТЧ.Документ = Док.ссылка;
		
		Попытка 
			Док.Записать(РежимЗаписиДокумента.Проведение);   
			
			//Дополнительная обработка регистров при ставке ндс 20/120 (НДС с межценовой разницы)
			
			ДвижениеДока = Док.Движения.НДСЗаписиКнигиПродаж;
			ДвижениеДока.Прочитать();
			ЕстьИсправленныеДвижения = Ложь;
			
			Для Каждого СтрокаДвижения из ДвижениеДока цикл  
				
				Если СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
					//Переписываем сумму без ндс на расчетную//
					СтрокаДвижения.СуммаБезНДС = Окр(СтрокаДвижения.НДС/20*120,0);
					ЕстьИсправленныеДвижения = Истина;
				КонецЕсли;
			КонецЦикла;   
			Если ЕстьИсправленныеДвижения Тогда
				ДвижениеДока.Записать(Истина);
				
				Док.РучнаяКорректировка = Истина;
				Док.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			СтрокаТЧ.Номер = Док.Номер;
			
			СтрокаТЧ.Загружен = Истина;
			СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			
		Исключение
			СтрокаТЧ.ЕстьОшибки = Истина;
			ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки документа отчета комитенту");
			СтрокаТЧ.ВариантЗагрузки = 0;
		КонецПопытки;
	КонецЕсли;
	
	#КонецОбласти
			
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьВозвратыОтПокупателей()
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаТЧ из ВозвратПокупателя Цикл
		Если СтрокаТЧ.естьОшибки Тогда
			Продолжить;
		КОнецЕсли;	
		Если _ПерезаполнятьНайденное или не ЗначениеЗаполнено(СтрокаТч.Документ) Тогда
			
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
			
			ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата);
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
				
				// Проверяем правильность вида документа - если не соответствует, помечаем на удаление и создаем новый
				Если СтрокаТЧ.Дата<Дата("20190101") и ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка()) Тогда
					Док.УстановитьПометкуУдаления(Истина);
					СтрокаТЧ.Документ = "";
				ИначеЕсли не СокрЛП(СтрокаТЧ.НомерВходящегоДокумента)="" и ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка()) Тогда
					Док.УстановитьПометкуУдаления(Истина);
					СтрокаТЧ.Документ = "";
				ИначеЕсли СокрЛП(СтрокаТЧ.НомерВходящегоДокумента)="" и ТипЗНЧ(СтрокаТЧ.Документ)<>ТипЗнч(Документы.КорректировкаРеализации.ПустаяСсылка()) Тогда
					Док.УстановитьПометкуУдаления(Истина);
					СтрокаТЧ.Документ = "";
				КонецЕсли;	
					
				
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;	
			
			Если не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
				
				Если СтрокаТЧ.Дата<Дата("20190101") Тогда
					Док = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
					Док.УстановитьСсылкуНового(Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(УИД));
				ИначеЕсли не СокрЛП(СтрокаТЧ.НомерВходящегоДокумента)="" Тогда
					Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Док.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД));
				Иначе
					Док = Документы.КорректировкаРеализации.СоздатьДокумент();
					Док.УстановитьСсылкуНового(Документы.КорректировкаРеализации.ПолучитьСсылку(УИД));
				КонецЕсли;	
			КонецЕсли;	
			
			Если СтрокаТЧ.Дата<Дата("20190101")  Тогда
				// ... Для документа Возврат
				ЗаполнитьДокументВозвратТиУ(Док, СтрокаТЧ, СтруктураОрганизации, ЭтоЕНВД);
			ИначеЕсли не СокрЛП(СтрокаТЧ.НомерВходящегоДокумента)="" Тогда
				// ... Для документа Поступление товаров и услуг
				ЗаполнитьДокументПТиУ(Док,СтрокаТЧ);
			Иначе
				ЗаполнитьДокументКорректировкаРеализации(Док,СтрокаТЧ, СтруктураОрганизации);
			КонецЕсли;
			
			Док.Комментарий = "#Загружен: Возврат товаров № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
					//Пробуем изменить дату на дату документа
					Док.Дата = СтрокаТЧ.Дата;
					Док.Записать(РежимЗаписиДокумента.Запись);
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Предупреждение: измененена дата документа. Период закрыт");
				КонецЕсли;
			КонецПопытки;
			СтрокаТЧ.Документ = Док.ссылка;
			СтрокаТЧ.Номер = Док.Номер;
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СтрокаТЧ.ЕстьОшибки = Истина;
				
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа");
			КонецПопытки;	
			
		КонецЕсли;
		
		Если (_ПерезаполнятьНайденное или не ЗначениеЗаполнено(СтрокаТЧ.СчетФактура)) и не СтрокаТЧ.СчетФактураНомер="" Тогда
			
				
			ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
			ПараметрыСозданияСчетаФактуры.Основание =СтрокаТЧ.Документ;
			ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = СтрокаТЧ.СчетФактураНомер;
			ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = СтрокаТЧ.СчетФактураДата;
			
			Попытка
				СтрокаТЧ.СчетФактура = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры).ссылка;
			Исключение
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка создания сф");
					СтрокаТЧ.ЕстьОшибки = Истина;
					СтрокаТЧ.ВариантЗагрузки = 0;
			КонецПопытки;		
			
			// При необходимости меняем КПП на КПП обособленного подразделения
			Если СтрокаТЧ.КонтрагентКПП<>СтрокаТЧ.Контрагент.КПП и СтрокаТЧ.СчетФактура<>Документы.СчетФактураПолученный.ПустаяСсылка() Тогда
				СФ = СтрокаТЧ.СчетФактура.ПолучитьОбъект();
				СФ.КППКонтрагента = СтрокаТЧ.КонтрагентКПП;
				СФ.Записать(РежимЗаписиДокумента.Запись);
				Попытка
					СФ.Записать(РежимЗаписиДокумента.Проведение);	
				Исключение
					СтрокаТЧ.ЕстьОшибки = Истина;
				
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения сф");
					СтрокаТЧ.ВариантЗагрузки = 0;
				КонецПопытки
			КонецЕсли;	
		КонецЕсли;
		
		Если не СтрокаТЧ.ЕстьОшибки и (_ПерезаполнятьНайденное или не ЗначениеЗаполнено(СтрокаТЧ.СчетФактура)) и не СтрокаТЧ.СчетФактураНомерКорр="" Тогда
			Если Док = неопределено Тогда	//Документ был создан ранее и нет галки перезаполнять
				Док = СтрокаТЧ.Документ.ПолучитьОбъект();
			КонецЕсли;
			ДокСФ = СформироватьСФВыданную(СтрокаТЧ.Дата,
							СтрокаТЧ.СчетФактураНомерКорр, 
							СтрокаТч.Документ, 
							Объект.Организация,
							СтрокаТЧ.Контрагент, 
							СтрокаТЧ.ДоговорКонтрагента, 
							Док.СуммаДокумента, 
							Док.Товары[0].СтавкаНДС, 
							Док.товары.Итог("СуммаНДС"), 
							СтрокаТЧ.УИД, истина,
							СтрокаТЧ.КонтрагентКПП);	
			Если ДокСФ = неопределено или ДокСФ.Пустая() Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				ЕстьОшибки = Истина;
					ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка загрузки счета-фактуры");
			Иначе	
				СтрокаТЧ.СчетФактура = ДокСФ.ссылка;
			КонецЕсли;	
;
			
			// При необходимости меняем КПП на КПП обособленного подразделения
			Если СтрокаТЧ.КонтрагентКПП<>СтрокаТЧ.Контрагент.КПП и СтрокаТЧ.СчетФактура<>Документы.СчетФактураПолученный.ПустаяСсылка() Тогда
				СФ = СтрокаТЧ.СчетФактура.ПолучитьОбъект();
				СФ.КППКонтрагента = СтрокаТЧ.КонтрагентКПП;
				СФ.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
			СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
		КонецЕсли;	
		
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументы_Межхолдер()
	ЕстьОшибки = Ложь;
	
	Реквизит_НДССНаценки = НайтиДопРеквизитПоИмени("НДССНаценки");
	НоменклатурнаяГруппа = ТекущаяНастройкаОбмена.РеализацияСкрытаяМежхолдер;
	
	Для Каждого СтрокаТЧ из Межхолдер Цикл
		
		 ФормироватьДокументыРеализации  = не (СтрокаТЧ.ПродавецОрганизация = Справочники.Организации.ПустаяСсылка());
		 ФормироватьДокументыПоступления = не (СтрокаТЧ.ПокупательОрганизация = Справочники.Организации.ПустаяСсылка());
		
		// Получим параметры организации
		//**********************************************************************************
		СтруктураОрганизацииПродавца = ПолучитьСтруктуруОрганизации(СтрокаТЧ.ПродавецОрганизация, СтрокаТЧ.ТочкаОформления);
		СтруктураОрганизацииПокупателя = ПолучитьСтруктуруОрганизации(СтрокаТЧ.ПокупательОрганизация, СтрокаТЧ.ТочкаОформления);
		
		ПлательщикНДС_Продавец = УчетнаяПолитика.ПлательщикНДС(СтрокаТЧ.ПродавецОрганизация, СтрокаТЧ.Дата);
		ПлательщикНДС_Покупатель = УчетнаяПолитика.ПлательщикНДС(СтрокаТЧ.ПокупательОрганизация, СтрокаТЧ.Дата);
		
		ПлательщикУСН_Покупатель =  УчетнаяПолитика.ПрименяетсяУСН(СтрокаТЧ.ПокупательОрганизация,СтрокаТЧ.Дата);
		
		//УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
		
		
		Если _ПерезаполнятьНайденное или (СтрокаТч.ДокументРеализации.Пустая() и СтрокаТЧ.ДокументПоступления.Пустая()) Тогда
			Если ФормироватьДокументыРеализации Тогда
				Если СтрокаТЧ.документРеализации.пустая() Тогда
					ДокРеализации = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					//ДокРеализации.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
				Иначе
					ДокРеализации = СтрокаТЧ.ДокументРеализации.ПолучитьОбъект();
				КонецЕсли;	
				
				
				//Заполняем реквизиты по умолчанию
				ДокРеализации.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
				ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
				ДокРеализации.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				ДокРеализации.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
				ДокРеализации.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
				ДокРеализации.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
				ДокРеализации.СуммаВключаетНДС = Ложь;
				
				ДокРеализации.ПодразделениеОрганизации = СтруктураОрганизацииПродавца.Подразделение;
				ДокРеализации.Склад = СтруктураОрганизацииПродавца.Склад;
				
				//Заполняем из табличной части
				ДокРеализации.Дата = СтрокаТЧ.Дата;
				ДокРеализации.Организация = СтрокаТЧ.ПродавецОрганизация;
				ДокРеализации.Контрагент = СтрокаТЧ.ПокупательКонтрагент;
				ДокРеализации.ДоговорКонтрагента = СтрокаТЧ.ДоговорПокупателя;
				
				Если Реквизит_НДСсНаценки<>неопределено Тогда
					//Получим значение доп.реквизита
					НДСсНаценки = ПолучитьНДСсНаценки(СтрокаТЧ.ДоговорПокупателя,Реквизит_НДССНаценки);
				Иначе
					НДСсНаценки=Ложь;
					
				КОнецЕсли;
				
				ДокРеализации.Комментарий = "#Загружен межхолдер. Наценка: "+_Межхолдер_ПроцентНаценки+"%. Дата формирования "+ТекущаяДата();
				
				ДокРеализации.Товары.Очистить();
				ДокРеализации.пометкаУдаления = ложь;
				
				ДокРеализации.записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			
			Если ФормироватьДокументыПоступления Тогда
				
				Если СтрокаТЧ.документПоступления.пустая() Тогда
					ДокПоступления = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					//ДокПоступления.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД));
				Иначе
					ДокПоступления = СтрокаТЧ.ДокументПоступления.ПолучитьОбъект();
					СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
				КонецЕсли;	
				
				//Заполняем реквизиты по умолчанию
				ДокПоступления.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
				ДокПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
				ДокПоступления.Ответственный = ПараметрыСеанса.ТекущийПользователь;
				ДокПоступления.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
				ДокПоступления.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
				ДокПоступления.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
				ДокПоступления.СуммаВключаетНДС = Ложь;
				
				ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(СтрокаТЧ.ПокупательОрганизация, СтрокаТЧ.Дата);
				//ЭтоНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, СтрокаТЧ.Дата);
				Если ЭтоЕНВД или (не ПлательщикНДС_Покупатель) Тогда
					ДокПоступления.НДСВключенВСтоимость = Истина;
				КонецЕсли;
				
				ДокПоступления.ПодразделениеОрганизации = СтруктураОрганизацииПокупателя.Подразделение;
				ДокПоступления.Склад = СтруктураОрганизацииПокупателя.Склад;
				
				//Заполняем из табличной части
				ДокПоступления.Дата = СтрокаТЧ.Дата;
				ДокПоступления.Организация = СтрокаТЧ.ПокупательОрганизация;
				Если ДокРеализации<>Неопределено Тогда
					ДокПоступления.ДатаВходящегоДокумента = НачалоДня(СтрокаТЧ.Дата);
					ДокПоступления.НомерВходящегоДокумента = ДокРеализации.Номер;
				КонецЕсли;	
				ДокПоступления.Контрагент = СтрокаТЧ.ПродавецКонтрагент;
				ДокПоступления.ДоговорКонтрагента = СтрокаТЧ.ДоговорПоставщика;
				
				Если Реквизит_НДСсНаценки<>неопределено Тогда
					//Получим значение доп.реквизита
					НДСсНаценки = ПолучитьНДСсНаценки(СтрокаТЧ.ДоговорПоставщика,Реквизит_НДССНаценки);
				Иначе
					НДСсНаценки=Ложь;
				КОнецЕсли;
				
				ДокПоступления.Комментарий = "#Загружен межхолдер. "+ДокРеализации+"Дата формирования "+ТекущаяДата();
				ДокПоступления.Товары.Очистить();
				ДокПоступления.пометкаУдаления = ложь;
					
			КонецЕсли;	
				
			//// Заполним табличную часть документа
			
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.товары Цикл
				Если СтрокаТЧ_Номенклатура.количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Цена = Окр(СтрокаТЧ_Номенклатура.СебестоимостьЦена + СтрокаТЧ_Номенклатура.СебестоимостьЦена*(_Межхолдер_ПроцентНаценки/100), 2);
				Если ПлательщикНДС_Продавец Тогда
					Если СтрокаТЧ.Дата>=Дата("20190101") Тогда
						СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
					Иначе
						СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
					КонецЕсли;
				Иначе
					СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
						
				Сумма = Цена * СтрокаТЧ_Номенклатура.Количество;
				
				Если НДСсНаценки Тогда
					Наценка = Сумма - СтрокаТЧ_Номенклатура.себестоимость;
					СуммаНДС       = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Наценка,Ложь,
																			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС, Ложь));
				Иначе
					СуммаНДС       = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма,Ложь,
																		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС, Ложь));
				КонецЕсли;
																	
				Если ФормироватьДокументыРеализации Тогда
					НС = ДокРеализации.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
					НС.СчетУчета = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчетаПродавца);					
					НС.Себестоимость = 0;
					НС.Цена = Цена;
					НС.Сумма = Сумма;
					НС.СтавкаНДС = СтавкаНДС;
				
					НС.СуммаНДС       = СуммаНДС;
				
					
					ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(СтрокаТЧ.ПродавецОрганизация, СтрокаТЧ.Дата);
					
					Если ЭтоЕНВД Тогда
						НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД; // 90.01.2
						НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД; // 90.02.2
					Иначе
						НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.1
						НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
					КонецЕсли; 
					//Если не ОрганизацииХолдинга.НайтиПоЗначению(ДокРеализации.Контрагент)=неопределено Тогда
					//	НС.Субконто = _НоменклатурнаяГруппаМежхолдера;
					//Иначе
						НС.Субконто = НоменклатурнаяГруппа;
					//КонецЕсли;	
					ВыгрузкаИтоговДляСФ = ДокРеализации.Товары.Выгрузить();
					ВыгрузкаИтоговДляСФ.Свернуть("СтавкаНДС","Сумма,СуммаНДС");
				
					НС.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
					ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НС, "Товары", ДокРеализации.Метаданные());
					
				КонецЕсли;
				Если ФормироватьДокументыПоступления Тогда
					НС_Поступления = ДокПоступления.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НС_Поступления, СтрокаТЧ_Номенклатура);
					НС_Поступления.Цена = Цена;
					НС_Поступления.Сумма = Сумма;
					НС_Поступления.СтавкаНДС = СтавкаНДС;
				
					НС_Поступления.СуммаНДС       = СуммаНДС;
				
					НС_Поступления.СчетУчета = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчетаПокупателя);
					НС_Поступления.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
					НС_Поступления.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДСПокупатель;
					
					Если ПлательщикУСН_Покупатель Тогда
						НС_Поступления.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					КонецЕсли;	

				
				КонецЕсли;
				
				
			КонецЦикла;	
			
			Попытка
				Если ФормироватьДокументыРеализации Тогда
				
					ДокРеализации.Записать(РежимЗаписиДокумента.Проведение);
				
					СтрокаТЧ.ДокументРеализации = ДокРеализации.ссылка;
					//СтрокаТЧ.Номер = Док.Номер;
				
				
					Для Каждого СтрокаСФ из ВыгрузкаИтоговДляСФ Цикл
						ДокСФ = СформироватьСФВыданную(СтрокаТЧ.Дата,
								, 
								СтрокаТЧ.ДокументРеализации, 
								СтрокаТЧ.ПродавецОрганизация,
								СтрокаТЧ.ПокупательКонтрагент, 
								СтрокаТЧ.ДоговорПокупателя, 
								СтрокаСФ.Сумма, 
								СтрокаСФ.СтавкаНДС, 
								СтрокаСФ.СуммаНДС,,, 
								СтрокаТЧ.ПокупательКонтрагент.КПП);	
					КонецЦикла;				   
				КонецЕсли;
				
				Если ФормироватьДокументыПоступления Тогда
					
					ДокПоступления.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаТЧ.ДокументПоступления = ДокПоступления.ссылка;
					
					Если ДокСФ<>неопределено Тогда
						//Заменим номер входящего документа на номер счета-фактуры
						ДокПоступления.НомерВходящегоДокумента = ДокСФ.ПредставлениеНомера;
						
						ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
						ПараметрыСозданияСчетаФактуры.Основание =СтрокаТЧ.ДокументПоступления;
						ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = ДокСФ.ПредставлениеНомера;
						ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = ДокСФ.Дата;
						
						Попытка
							СчетФактура = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры).ссылка;
						Исключение
							ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка создания сф");
							СтрокаТЧ.ЕстьОшибки = Истина;
							СтрокаТЧ.ВариантЗагрузки = 0;
						КонецПопытки;		
						
					КонецЕсли;	
					
				КонецЕсли;
				СтрокаТЧ.Загружен = Истина;		
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
				
			Исключение
				ЕстьОшибки = Истина;
				СтрокаТЧ.Естьошибки = Истина;
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документов межхолдера");
			КонецПопытки;	
			
		КонецЕсли;	
		
			
			
	КонецЦикла;		

	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыЗаказНаряда(Параметр_Подразделение, Параметр_ПодразделениеЗатрат, Параметр_Склад, Параметр_СтатьяЗатрат)
	
	ЕстьОшибки = Ложь;
	ДопРеквизит_Автомобиль = НайтиДопРеквизитПоИмени("Автомобиль");
	Авторабота =  ТекущаяНастройкаОбмена.Номенклатура_Авторабота;

	Для Каждого СтрокаТЧ из ЗаказНаряды Цикл
		
		#Область Документ_ТребованиеНакладная
		//Формируем документ требования-накладная
		Если СтрокаТЧ.естьОшибки  Тогда
			Продолжить;
		КонецЕсли;	
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		
		Если не  СтрокаТЧ.ТННеТребуется и (_ПерезаполнятьНайденное или СтрокаТЧ.ТребованиеНакладная.Пустая())Тогда
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.ТребованиеНакладная.Пустая() = Истина Тогда
				Док = Документы.ТребованиеНакладная.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ТребованиеНакладная.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.ТребованиеНакладная.ПолучитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;
			
			Док.Комментарий = "#Загружен: Заказ-Наряд № "+СтрокаТЧ.номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата()+" "+СтрокаТЧ.НоменклатурнаяГруппа;
			
			
			Док.Дата = СтрокаТЧ.Дата;
			Док.Номер = "";
			Док.Склад = СтрокаТЧ.Склад;
			Док.ПодразделениеОрганизации = СтруктураОрганизации.подразделение;
			Док.Организация = Объект.Организация;
			
			Док.СчетЗатрат = СтрокаТЧ.СчетЗатрат;
			Если Док.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)=неопределено Тогда
				Док.Субконто1 = СтрокаТЧ.СтатьяЗатрат; 
			Иначе	
				Док.Субконто1 = СтрокаТЧ.НоменклатурнаяГруппа;
				Док.Субконто2 = СтрокаТЧ.СтатьяЗатрат; 
			КонецЕсли;	
			Док.ПодразделениеЗатрат = СтрокаТЧ.ПодразделениеЗатрат; 
			Док.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
			Если Док.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету Тогда
				 Док.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			 Иначе
				 Док.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
				 Док.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 1;
			КонецЕсли;	 
			
			
			// Заполним табличную часть документа
			
			Док.Материалы.Очистить();
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
				НС = Док.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.Счет = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчета);					
				Если УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,Док.Дата) Тогда
					НС.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				КонецЕсли;	
			КонецЦикла;	
			
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Попытка
				Если Док.проведен Тогда
					Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			Исключение
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Не удалось снять с проведения документ Требование-накладная. Возможно установлена дата запрета для пользователя");
				ЕстьОшибки = Истина;
			КонецПопытки;
			
			Попытка
				Док.пометкаУдаления = Ложь;
				Док.Записать(РежимЗаписиДокумента.Запись);
				СтрокаТЧ.ТребованиеНакладная = Док.Ссылка;
			Исключение
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа Требование-накладная");
				ЕстьОшибки = Истина;
			КонецПопытки;
			Попытка
				Док.пометкаУдаления = Ложь;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ТребованиеНакладная = Док.Ссылка;
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа Требование-накладная");
				ЕстьОшибки = Истина;
			КонецПопытки;
			
		КонецЕсли;
		#КонецОбласти
		
		Если  не СтрокаТЧ.ОказаниеУслугНеТребуется и (_ПерезаполнятьНайденное или СтрокаТЧ.ОказаниеУслуг.Пустая()) Тогда
			#Область Документ_РеализацияТоваровУслуг
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			//Док = Документы.ОказаниеУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
			Если СтрокаТЧ.ОказаниеУслуг.пустая() Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.ОказаниеУслуг.получитьОбъект();
				Если СтрокаТЧ.ВариантЗагрузки = 0 Тогда
					СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
				КонецЕсли;	
					
			КонецЕсли;
			
			Док.Дата = СтрокаТЧ.Дата;
			Если ТекущаяНастройкаОбмена.Реализация_НомерИзОУ и Док.Дата>=Дата("20200101") Тогда
				Док.Номер = СтрокаТЧ.Номер;
			КонецЕсли;
			
			Док.Организация = Объект.Организация;
			
			//Заполняем реквизиты по умолчанию
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			Док.СуммаВключаетНДС = Истина;
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
			Док.Контрагент = СтрокаТЧ.Контрагент;
			Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Док.ВидОперации=Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
			Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
			
			Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
			СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
			
			Док.услуги.очистить();
			
			ТребуетсяРазвернутоПоНоменклатуре = ?(ДопРеквизит_ЗНРазвернуто = неопределено, Ложь,РазвернутьПоНоменклатуре(Док.ДоговорКонтрагента));
			Если ТребуетсяРазвернутоПоНоменклатуре Тогда
				ПерваяСтрока = Истина;
				Для Каждого СтрокаТовары из СтрокаТЧ.Товары Цикл
					НС = Док.Услуги.Добавить();
					Нс.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
					НС.Количество = СтрокаТовары.Количество;
					НС.Субконто = СтрокаТЧ.НоменклатурнаяГруппа;
					НС.Номенклатура = Авторабота;
					Если ПерваяСтрока Тогда
						
						НС.Содержание = СокрЛП(СтрокаТЧ.АвтомобильНаименование)+" / Заказ-наряд №"+СокрЛП(СтрокаТЧ.Номер)+" от "+Формат(СтрокаТЧ.Дата,"ДФ=dd.MM.yyyy") + Символы.ПС+СтрокаТовары.Номенклатура.НаименованиеПолное;
						ПерваяСтрока = Ложь;
					Иначе	
						НС.Содержание = СтрокаТовары.Номенклатура.НаименованиеПолное;
					КонецЕсли;	
				
					Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) Тогда
						НС.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаЕНВД; // 90.01.2
						НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД; // 90.02.2
					Иначе
						НС.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.1
						НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
					КонецЕсли; 
				
					НС.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;  // 90.3
					НС.Сумма = СтрокаТовары.Сумма;
					НС.СуммаНДС = СтрокаТовары.сумма *СтавкаНДС/(100+СтавкаНДС);
					НС.Цена  = НС.Сумма / НС.Количество;
					
				КонецЦикла;	

				Для Каждого СтрокаУслуги из СтрокаТЧ.Услуги Цикл
					НС = Док.Услуги.Добавить();
					Нс.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
					НС.Количество = СтрокаУслуги.Количество;
					НС.Субконто = СтрокаТЧ.НоменклатурнаяГруппа;
					НС.Номенклатура = Авторабота;
					НС.Содержание = СтрокаУслуги.Номенклатура;
					
					Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) Тогда
						НС.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаЕНВД; // 90.01.2
						НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД; // 90.02.2
					Иначе
						НС.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.1
						НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
					КонецЕсли; 
				
					НС.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;  // 90.3
					НС.Сумма = СтрокаУслуги.Сумма;
					НС.СуммаНДС = СтрокаУслуги.сумма *СтавкаНДС/(100+СтавкаНДС);
					НС.Цена  = НС.Сумма / НС.Количество;
					
				КонецЦикла;	
			Иначе	
				НС = Док.Услуги.Добавить();
				Нс.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
				НС.Количество = 1;
				НС.Субконто = СтрокаТЧ.НоменклатурнаяГруппа;
				НС.Номенклатура = Авторабота;
				НС.Содержание = "Оказание услуг по ремонту и обслуживанию ТС. "+СокрЛП(СтрокаТЧ.НоменклатурнаяГруппа)+" "+СокрЛП(СтрокаТЧ.АвтомобильНаименование)+" по заказ-наряду №"+СокрЛП(СтрокаТЧ.Номер)+" от "+Формат(СтрокаТЧ.Дата,"ДФ=dd.MM.yyyy");
				
				Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) Тогда
					НС.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаЕНВД; // 90.01.2
					НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД; // 90.02.2
				Иначе
					НС.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.1
					НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
				КонецЕсли; 
				
				НС.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;  // 90.3
				Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
				Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
				НС.Сумма = СтрокаТЧ.СуммаДокумента;
				НС.Цена  = СтрокаТЧ.СуммаДокумента;
				НС.СуммаНДС = СтрокаТЧ.СуммаНДС;
			КонецЕсли;
			
			Док.Комментарий = "#Загружен: Заказ-Наряд № "+СтрокаТЧ.номер + " от "+СтрокаТЧ.Дата+" "+?(СтрокаТЧ.Контрагент = ТекущаяНастройкаОбмена.ЧастноеЛицо, СтрокаТЧ.КонтрагентНаименование, "")+ " Дата загрузки "+ТекущаяДата();
			
			
			Док.ПометкаУдаления = Ложь;
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);   
				ДокЗаписан = Истина;
			Исключение
				ДокЗаписан = Ложь;	
			КонецПопытки;
			
			Если не ДокЗаписан Тогда
				//Корректируем номер и выдаем сообщение 
				Док.Номер = "д"+Лев(Док.Номер,4)+Прав(Док.Номер,6);
				
				Док.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Дубликат номера!!! Необходим контроль документа "+Док);
			КонецЕсли;
			
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ОказаниеУслуг = Док.Ссылка; 
				Если не СтрокаТЧ.ЕстьОшибки и СтрокаТЧ.ВариантЗагрузки <2 Тогда
					СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
				КонецЕсли;	
					
			Исключение
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа "+Док);
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецПопытки;
			
			
			
			#КонецОбласти
			
			#Область ДополнительныеСведения
			Если СтрокаТЧ.Автомобиль<>неопределено и ДопРеквизит_Автомобиль<>неопределено и не СтрокаТЧ.ЕстьОшибки Тогда
				НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Объект.Установить(Док.Ссылка); 
				НаборЗаписей.Отбор.свойство.установить(ДопРеквизит_Автомобиль);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НоваяЗапись = НаборЗаписей.Добавить(); 
				
				НоваяЗапись.Объект = Док.Ссылка; 
				НоваяЗапись.Свойство = ДопРеквизит_Автомобиль; 
				НоваяЗапись.Значение = СтрокаТЧ.Автомобиль; 
				
				НаборЗаписей.Записать(); 	
			КонецЕсли;
			
			
			#КонецОбласти //ДополнительныеСведения
			
			#Область Документ_СчетФактура
			Если не СтрокаТЧ.ЕстьОшибки Тогда
				// Формируем счет-фактуру
				Если СтрокаТЧ.НомерСЧФ<>"" Тогда
					ДокСФ = СформироватьСФВыданную(СтрокаТЧ.Дата,
					СтрокаТЧ.НомерСЧФ, 
					СтрокаТЧ.ОказаниеУслуг,
					Объект.Организация,
					СтрокаТЧ.Контрагент, 
					СтрокаТЧ.ДоговорКонтрагента, 
					СтрокаТЧ.СуммаДокумента, 
					СтрокаТЧ.СтавкаНДС, 
					СтрокаТЧ.СуммаНДС, 
					СтрокаТЧ.УИД, истина,
					СтрокаТЧ.КонтрагентКПП);	
						
					
					//Док = СтрокаТЧ.ОказаниеУслуг.ПолучитьОбъект();						   
					//СтрокаДляСФ = Док.Контрагенты[0];
					//	
					////Переносим ссылку на СФ в документ "Оказание услуг" и записываем документ "Оказание услуг"
					//Если ДокСФ <> неопределено Тогда		
					//	СтрокаДляСФ.ВыданСФ = Истина;
					//	СтрокаДляСФ.СчетФактура = ДокСФ;
					СтрокаТЧ.СчетФактура = ДокСФ.ссылка;
					//	Док.Записать(РежимЗаписиДокумента.Проведение);
					//КонецЕсли;	
				КонецЕсли;	
				
			КонецЕсли;	
			#КонецОбласти
		КОнецЕсли;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

&НаСервере
Функция ЗагрузитьДокументыУслугПроизводства(Параметр_Подразделение, Параметр_ПодразделениеЗатрат, Параметр_Склад, Параметр_СтатьяЗатрат)
	
	ЕстьОшибки = Ложь;
	ДопРеквизит_Автомобиль = НайтиДопРеквизитПоИмени("Автомобиль");
	Авторабота =  ТекущаяНастройкаОбмена.Номенклатура_Авторабота;

	Для Каждого СтрокаТЧ из УслугиПроизводства Цикл
		
		#Область Документ_ТребованиеНакладная
		//Формируем документ требования-накладная
		Если СтрокаТЧ.естьОшибки  Тогда
			Продолжить;
		КонецЕсли;	
		
		//Получаем параметры организации
		СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
		
		Если не  СтрокаТЧ.ТННеТребуется и (_ПерезаполнятьНайденное или СтрокаТЧ.ТребованиеНакладная.Пустая())Тогда
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			
			Если СтрокаТЧ.ТребованиеНакладная.Пустая() = Истина Тогда
				Док = Документы.ТребованиеНакладная.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ТребованиеНакладная.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.ТребованиеНакладная.ПолучитьОбъект();
			КонецЕсли;
			
			Док.Комментарий = "#Загружен: Заказ-Наряд № "+СтрокаТЧ.номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата()+" "+СтрокаТЧ.НоменклатурнаяГруппа;
			
			
			Док.Дата = СтрокаТЧ.Дата;
			Док.Номер = "";
			Док.Склад = СтрокаТЧ.Склад;
			Док.ПодразделениеОрганизации = СтруктураОрганизации.подразделение;
			Док.Организация = Объект.Организация;
			
			Док.СчетЗатрат = СтрокаТЧ.СчетЗатрат;
			Если Док.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)=неопределено Тогда
				Док.Субконто1 = СтрокаТЧ.СтатьяЗатрат; 
			Иначе	
				Док.Субконто1 = СтрокаТЧ.НоменклатурнаяГруппа;
				Док.Субконто2 = СтрокаТЧ.СтатьяЗатрат; 
			КонецЕсли;	
			Док.ПодразделениеЗатрат = СтрокаТЧ.ПодразделениеЗатрат; 
			Док.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
			Если Док.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету Тогда
				 Док.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			 Иначе
				 Док.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
				 Док.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = 1;
			КонецЕсли;	 
			
			
			// Заполним табличную часть документа
			
			Док.Материалы.Очистить();
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
				НС = Док.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.Счет = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчетаПродавца);					
				Если УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,Док.Дата) Тогда
					НС.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				КонецЕсли;	
			КонецЦикла;	
			
			//Заполняем реквизиты по умолчанию
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Попытка
				Док.пометкаУдаления = Ложь;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ТребованиеНакладная = Док.Ссылка;
			Исключение
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа Оказание услуг");
				ЕстьОшибки = Истина;
			КонецПопытки;
			
		КонецЕсли;
		#КонецОбласти
		
		Если  не СтрокаТЧ.ОказаниеУслугНеТребуется и (_ПерезаполнятьНайденное или СтрокаТЧ.ОказаниеУслуг.Пустая()) Тогда
			#Область Документ_ОказаниеУслуг
			
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			//Док = Документы.ОказаниеУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
			Если СтрокаТЧ.ОказаниеУслуг.пустая() Тогда
				Док = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.ОказаниеУслуг.получитьОбъект();
			КонецЕсли;
			
			Док.Дата = СтрокаТЧ.Дата;
			Если ТекущаяНастройкаОбмена.Реализация_НомерИзОУ и Док.Дата>=Дата("20200101") Тогда
				Док.Номер = СтрокаТЧ.Номер;
			КонецЕсли;
			
			Док.Организация = Объект.Организация;
			
			//Заполняем реквизиты по умолчанию
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			Док.СуммаВключаетНДС = Истина;
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
			Док.Контрагент = СтрокаТЧ.Контрагент;
			Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Док.ВидОперации=Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
			Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
			
			Док.услуги.очистить();
			НС = Док.Услуги.Добавить();
			Нс.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			НС.Количество = 1;
			НС.Субконто = СтрокаТЧ.НоменклатурнаяГруппа;
			НС.Номенклатура = Авторабота;
			НС.Содержание = "Оказание услуг по ремонту и обслуживанию ТС. "+СокрЛП(СтрокаТЧ.НоменклатурнаяГруппа)+" "+СокрЛП(СтрокаТЧ.АвтомобильНаименование)+" по заказ-наряду №"+СокрЛП(СтрокаТЧ.Номер)+" от "+Формат(СтрокаТЧ.Дата,"ДФ=dd.MM.yyyy");
			
			Если УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата) Тогда
				НС.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаЕНВД; // 90.01.2
				НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД; // 90.02.2
			Иначе
				НС.СчетДоходов	= ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.1
				НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
			КонецЕсли; 
			
			НС.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;  // 90.3
			Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
			НС.Сумма = СтрокаТЧ.СуммаДокумента;
			НС.Цена  = СтрокаТЧ.СуммаДокумента;
			НС.СуммаНДС = СтрокаТЧ.СуммаНДС;
			
			Док.Комментарий = "#Загружен: Заказ-Наряд № "+СтрокаТЧ.номер + " от "+СтрокаТЧ.Дата+" "+?(СтрокаТЧ.Контрагент = ТекущаяНастройкаОбмена.ЧастноеЛицо, СтрокаТЧ.КонтрагентНаименование, "")+ " Дата загрузки "+ТекущаяДата();
			
			
			Док.ПометкаУдаления = Ложь;
			
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);   
				ДокЗаписан = Истина;
			Исключение
				ДокЗаписан = Ложь;	
			КонецПопытки;
			
			Если не ДокЗаписан Тогда
				//Корректируем номер и выдаем сообщение 
				Док.Номер = "д"+Лев(Док.Номер,4)+Прав(Док.Номер,6);
				
				Док.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Дубликат номера!!! Необходим контроль документа "+Док);
			КонецЕсли;
			
			Попытка 
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.ОказаниеУслуг = Док.Ссылка; 
			Исключение
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка проведения документа "+Док);
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецПопытки;
			
			
			
			#КонецОбласти
			
			#Область ДополнительныеСведения
			Если СтрокаТЧ.Автомобиль<>неопределено и не ДопРеквизит_Автомобиль<>неопределено и не СтрокаТЧ.ЕстьОшибки Тогда
				НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Объект.Установить(Док.Ссылка); 
				НаборЗаписей.Отбор.свойство.установить(ДопРеквизит_Автомобиль);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НоваяЗапись = НаборЗаписей.Добавить(); 
				
				НоваяЗапись.Объект = Док.Ссылка; 
				НоваяЗапись.Свойство = ДопРеквизит_Автомобиль; 
				НоваяЗапись.Значение = СтрокаТЧ.Автомобиль; 
				
				НаборЗаписей.Записать(); 	
			КонецЕсли;
			
			
			#КонецОбласти //ДополнительныеСведения
			
			#Область Документ_СчетФактура
			Если не СтрокаТЧ.ЕстьОшибки Тогда
				// Формируем счет-фактуру
				Если СтрокаТЧ.НомерСЧФ<>"" Тогда
					ДокСФ = СформироватьСФВыданную(СтрокаТЧ.Дата,
					СтрокаТЧ.НомерСЧФ, 
					СтрокаТЧ.ОказаниеУслуг,
					Объект.Организация,
					СтрокаТЧ.Контрагент, 
					СтрокаТЧ.ДоговорКонтрагента, 
					СтрокаТЧ.СуммаДокумента, 
					СтрокаТЧ.СтавкаНДС, 
					СтрокаТЧ.СуммаНДС, 
					СтрокаТЧ.УИД, истина,
					СтрокаТЧ.КонтрагентКПП);	
						
					
					//Док = СтрокаТЧ.ОказаниеУслуг.ПолучитьОбъект();						   
					//СтрокаДляСФ = Док.Контрагенты[0];
					//	
					////Переносим ссылку на СФ в документ "Оказание услуг" и записываем документ "Оказание услуг"
					//Если ДокСФ <> неопределено Тогда		
					//	СтрокаДляСФ.ВыданСФ = Истина;
					//	СтрокаДляСФ.СчетФактура = ДокСФ;
					СтрокаТЧ.СчетФактура = ДокСФ.ссылка;
					//	Док.Записать(РежимЗаписиДокумента.Проведение);
					//КонецЕсли;	
				КонецЕсли;	
				
			КонецЕсли;	
			#КонецОбласти
		КОнецЕсли;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

Функция ЗагрузитьДокументыЗаказНарядаПокупатель(Параметр_Подразделение, Параметр_ПодразделениеЗатрат, Параметр_Склад, Параметр_СтатьяЗатрат)
	
	ЕстьОшибки = Ложь;
	ДопРеквизит_Автомобиль = НайтиДопРеквизитПоИмени("Автомобиль");
	
	//Перем
	Авторабота = ТекущаяНастройкаОбмена.Номенклатура_Авторабота;
	
	
	Для Каждого СтрокаТЧ из ЗаказНарядыПокупатель Цикл
			//Получаем параметры организации
			СтруктураОрганизации = ПолучитьСтруктуруОрганизации(Объект.Организация,СтрокаТЧ.ТочкаОформления);		
		
			УИД = Новый УникальныйИдентификатор(СтрокаТЧ.УИД);
			//Док = Документы.ОказаниеУслуг.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
			Если СтрокаТЧ.Документ.пустая() Тогда
				Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Док.УстановитьСсылкуНового(Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(УИД));
			Иначе
				Док = СтрокаТЧ.Документ.получитьОбъект();
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			КонецЕсли;
			
			Док.Дата = СтрокаТЧ.Дата;
			Док.ДатаВходящегоДокумента = СтрокаТЧ.Дата;
			Док.НомерВходящегоДокумента = СтрокаТЧ.Номер;
			
			Док.Организация = Объект.Организация;
			
			//Заполняем реквизиты по умолчанию
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			Док.СуммаВключаетНДС = Истина;
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			
			//Док = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру().ПолучитьОбъект();
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
			Док.Контрагент = СтрокаТЧ.Контрагент;
			Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Док.ВидОперации=Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
			Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
			
			Док.услуги.очистить();
			НС = Док.Услуги.Добавить();
			Нс.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
			НС.Количество = 1;
			НС.Номенклатура = Авторабота;
			НС.Содержание = "Оказание услуг по ремонту и обслуживанию ТС. "+СокрЛП(СтрокаТЧ.НоменклатурнаяГруппа)+" "+СокрЛП(СтрокаТЧ.АвтомобильНаименование)+" по заказ-наряду №"+СокрЛП(СтрокаТЧ.Номер)+" от "+Формат(СтрокаТЧ.Дата,"ДФ=dd.MM.yyyy");
			
			НС.СчетЗатрат = СтрокаТЧ.СчетЗатрат;
			НС.СчетЗатратНУ = СтрокаТЧ.СчетЗатрат;
			Если СтрокаТЧ.СчетЗатрат.ВидыСубконто.найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)<>неопределено Тогда
				НС.Субконто1 = СтрокаТЧ.НоменклатурнаяГруппа;
				НС.СубконтоНУ1 = СтрокаТЧ.НоменклатурнаяГруппа;
				НС.Субконто2 = СтрокаТЧ.СтатьяЗатрат;
				НС.СубконтоНУ2 = СтрокаТЧ.СтатьяЗатрат;
			Иначе	
				НС.Субконто1 = СтрокаТЧ.СтатьяЗатрат;
				НС.СубконтоНУ1 = СтрокаТЧ.СтатьяЗатрат;
			КонецЕсли;	
				
			НС.ПодразделениеЗатрат = СтрокаТЧ.ПодразделениеЗатрат;
			
			НС.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;  // 19/03
			НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
			
			Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
			НС.Сумма = СтрокаТЧ.СуммаДокумента;
			НС.Цена  = СтрокаТЧ.СуммаДокумента;
			НС.СуммаНДС = СтрокаТЧ.СуммаНДС;
			
			Док.Комментарий = "#Загружен: Заказ-Наряд № "+СтрокаТЧ.номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			
			
			Попытка 
				Док.ПометкаУдаления = Ложь;
				Док.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТЧ.Документ = Док.Ссылка; 
				СтрокаТЧ.ВариантЗагрузки = СтрокаТЧ.ВариантЗагрузки + 1;
			Исключение
				ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка записи документа Оказание услуг");
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецПопытки;
			
			
			
			
			#Область ДополнительныеСведения
			Если СтрокаТЧ.Автомобиль<>неопределено и не ДопРеквизит_Автомобиль<>неопределено и не СтрокаТЧ.ЕстьОшибки Тогда
				НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Объект.Установить(Док.Ссылка); 
				НаборЗаписей.Отбор.свойство.установить(ДопРеквизит_Автомобиль);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НоваяЗапись = НаборЗаписей.Добавить(); 
				
				НоваяЗапись.Объект = Док.Ссылка; 
				НоваяЗапись.Свойство = ДопРеквизит_Автомобиль; 
				НоваяЗапись.Значение = СтрокаТЧ.Автомобиль; 
				
				НаборЗаписей.Записать(); 	
			КонецЕсли;
			
			
			#КонецОбласти //ДополнительныеСведения
			
			#Область Документ_СчетФактура
			Если не СтрокаТЧ.ЕстьОшибки Тогда
				// Формируем счет-фактуру
				Если СтрокаТЧ.НомерСЧФ<>"" Тогда
					ПараметрыСозданияСчетаФактуры = УчетНДСКлиентСервер.НовыеПараметрыСозданияПолученногоСчетаФактуры();
					ПараметрыСозданияСчетаФактуры.Основание =СтрокаТЧ.Документ;
					ПараметрыСозданияСчетаФактуры.НомерСчетаФактурыПолученного = СтрокаТЧ.НомерСЧФ;
					ПараметрыСозданияСчетаФактуры.ДатаСчетаФактурыПолученного  = СтрокаТЧ.Дата;
					
					Попытка
						СтрокаТЧ.СчетФактура = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ПараметрыСозданияСчетаФактуры).ссылка;
					Исключение
						ДобавитьОписаниеОшибки(СтрокаТЧ.УИД, "Ошибка создания сф");
						СтрокаТЧ.ЕстьОшибки = Истина;
						СтрокаТЧ.ВариантЗагрузки = 0;
					КонецПопытки;		
				КонецЕсли;			
				
				
				
			#КонецОбласти
		КОнецЕсли;	
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ЕстьОшибки = Истина;
		Иначе
			СтрокаТЧ.Загружен = Истина;
		КонецЕсли;	
	КонецЦикла;		
	
	Возврат не ЕстьОшибки;
КонецФункции

//--------------------------------------------------------------------------------------
&НаСервере
Функция СформироватьСФВыданную(ДатаСФ, НомерСФ, ДокументОснование, Организация, КонтрагентСФ, ДоговорКонтрагента, СуммаДокумента, СтавкаНДС, СуммаНДС, УИД_Строка = неопределено, ПоискПоУИД = ложь,КПП)
	// Формируем счет-фактуру
	Если УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаСФ)=Ложь и 
		не (УчетнаяПолитика.ПлательщикЕНВД(Организация, ДатаСФ)=Истина и СуммаНДС =0) Тогда
		
	
	Если не УИД_Строка=неопределено Тогда
		УИД = Новый УникальныйИдентификатор(УИД_Строка);
	Иначе
		УИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Если ПоискПоУИД тогда
		ДокСФ = Документы.СчетФактураВыданный.ПолучитьСсылку(УИД).ПолучитьОбъект();
	Иначе
		ДокСФ = неопределено;
	КонецЕсли;
	
	Если ДокСФ = неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетФактураВыданный.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
	
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
		РезультатЗапроса = Запрос.Выполнить();
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ДокСФ = неопределено;	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокСФ = ВыборкаДетальныеЗаписи.ссылка.ПолучитьОбъект();
		КонецЦикла;
	 КонецЕсли;

		
	Если ДокСФ = неопределено Тогда
		ДокСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
		ДокСФ.УстановитьСсылкуНового(Документы.СчетФактураВыданный.ПолучитьСсылку(УИД));
		ДокСФ.Дата = ДатаСФ;
		ДокСФ.Организация = Организация;
	ИначеЕсли не _ПерезаполнятьНайденное Тогда
		Возврат ДокСФ.Ссылка;
	КонецЕсли;
		
		ДокСФ.ДокументОснование = ДокументОснование;
		
		ДокСФ.ДокументыОснования.Очистить();
		ДокСФ.ДокументыОснования.Добавить().ДокументОснование = ДокументОснование;
		
		Если номерСФ<>неопределено Тогда
			ДокСФ.Номер = НомерСФ;
			ДокСФ.ПредставлениеНомера = НомерСФ;
		КонецЕсли;	
		ДокСФ.Дата =  ДатаСФ;
		
		ДокСФ.Контрагент  = КонтрагентСФ;
		Если КонтрагентСФ.КПП<>КПП тогда
		  ДокСФ.КППКонтрагента = КПП;
		КонецЕсли;
		ДокСФ.ДоговорКонтрагента = ДоговорКонтрагента;
		ДокСФ.ВидСчетаФактуры    = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		
		ДокСФ.КодВидаОперации = "01";				
		ДокСФ.КодСпособаВыставления = 1;
		
		ДокСФ.Сумма = СуммаДокумента;
		ДокСФ.СуммаДокумента = СуммаДокумента;
		ДокСФ.СуммаНДС = СуммаНДС;
		ДокСФ.СуммаНДСДокумента = СуммаНДС;
		
		ДокСФ.СтавкаНДС = СтавкаНДС;
		
		
		ДокСФ.Выставлен = Истина;
		ДокСФ.ДатаВыставления = ДокСФ.Дата;
		
		
		ДокСФ.Комментарий =    ДокументОснование.Комментарий;
		ДокСФ.Ответственный = ДокументОснование.Ответственный;
		
		
		Попытка 
			ДокСФ.ПометкаУдаления = ложь;
			ДокСФ.Записать(РежимЗаписиДокумента.Запись);
			ДокСФ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Не могу записать счет-фактуру № "+ДокСФ.Номер);
			ЕстьОшибки = Истина;
			ДобавитьОписаниеОшибки(УИД_Строка, "Ошибка при записи счет-фактуры");
			Возврат неопределено;
		КонецПопытки;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Возврат докСФ.ссылка;
КонецФункции

#КонецОбласти

#Область ПОИСКОВЫЕ_ФУНКЦИИ
//**********************************************************************************
//Поисковые функции
//**********************************************************************************

&НаСервере
Функция НайтиСклад(СкладНаименование, СкладУИД)
	УИД = Новый УникальныйИдентификатор(СкладУИД);
	Склад = Справочники.АВ_СкладыМатрица.ПолучитьСсылку(УИД).ПолучитьОбъект();
	
	Если Склад = Неопределено Тогда
	 	Склад = Справочники.АВ_СкладыМатрица.СоздатьЭлемент();
		Склад.Наименование = СкладНаименование;
		Склад.УстановитьСсылкуНового(Справочники.АВ_СкладыМатрица.ПолучитьСсылку(УИД));
		Склад.Записать();
	КонецЕсли;	
	Возврат Склад.Ссылка;
КонецФункции	
	
&НаСервере
Функция НайтиПодразделениеПоСкладу(Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АВ_СкладыМатрица.Подразделение КАК Подразделение
		|ИЗ
		|	Справочник.АВ_СкладыМатрица.ПодразделенияОрганизаций КАК АВ_СкладыМатрица
		|ГДЕ
		|	АВ_СкладыМатрица.Подразделение.Владелец = &Организация
		|	И АВ_СкладыМатрица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Подразделение;
	КонецЦикла;
	

	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
КонецФункции	

&НаСервере
Функция НайтиТочкуОформления(ТочкаОформленияНаименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ТочкаОформленияНаименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЦикла;
	

	Возврат Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
КонецФункции	

&НаСервере
Функция НайтиСчетФактуруПолученную(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураПолученный.Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ссылка;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция НайтиСчетФактуруВыданную(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетФактураВыданный.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ссылка;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция НайтиДокумент(УИД_ОУ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеСведения.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Значение = &Значение
		|	И ДополнительныеСведения.Свойство.Имя = ""УИД_ОУ""";
	
	Запрос.УстановитьПараметр("Значение", УИД_ОУ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат ВыборкаДетальныеЗаписи.Объект;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция НайтиДокументПоДатеИКомментарию(Дата, Комментарий, ВидДока, Организация)
	
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидДока.Ссылка КАК Ссылка
		|ИЗ
		|	Документ."+СокрЛП(ВидДока)+" КАК ВидДока
		|ГДЕ
		|	ВидДока.Дата = &Дата
		|	И ВидДока.Организация = &Организация
		|	И ВидДока.Комментарий ПОДОБНО &Комментарий";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Комментарий", СокрЛП(Комментарий)+"%");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЦикла;
	


	
КонецФункции

&НаСервере
Функция НайтиКонтрагента(ИНН,КПП,УИД_Строка, Тип, ФизЛицоПоИмени = Ложь, КонтрагентНаименование="")
	Контрагент=неопределено;
	//1. Ищем по УИД
	Если ЗначениеЗаполнено(УИД_Строка) и не(ИНН = "" и не ФизЛицоПоИмени) Тогда
		УИД = Новый УникальныйИдентификатор(УИД_Строка);
		Контрагент = Справочники.Контрагенты.ПолучитьСсылку(УИД).ПолучитьОбъект();
			
		Если Контрагент <> неопределено Тогда
			Если не Контрагент.ПометкаУдаления Тогда
				Возврат Контрагент.ссылка;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Если ИНН<>"" Тогда
		// 2. Ищем по ИНН + КПП
		//-----------------------
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП";
		
		Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
		Запрос.УстановитьПараметр("КПП", СокрЛП(КПП));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ссылка.головнойКонтрагент<>Справочники.Контрагенты.ПустаяСсылка() и не Сред(КПП,5,2)="43" ТОгда   //43 - обособленное подразделение с выделенным балансом
				Возврат ВыборкаДетальныеЗаписи.ссылка.ГоловнойКонтрагент;
			Иначе
				Возврат ВыборкаДетальныеЗаписи.ссылка;
			КонецЕсли;	
		КонецЦикла;
		
		//3. Ищем по ИНН и пустому (!) КПП
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = """"";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СтрДлина(ИНН)=10 Тогда
				// Возвращаем ошибку контрагента - контрагент есть, но с пустым КПП - нужно исправить контрагента в базе (добавить КПП)
				ПроблемныеКонтрагенты(ИНН, КПП, КонтрагентНаименование, "Не заполнен КПП", 2, ВыборкаДетальныеЗаписи.ссылка);
				Возврат ВыборкаДетальныеЗаписи.ссылка;
			Иначе	
				Возврат ВыборкаДетальныеЗаписи.ссылка;
			КонецЕсли;	
		КонецЦикла;
	
		//3. Ищем по ИНН и пустому (!) КПП
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.РегистрационныйНомер = &ИНН
		|	И Контрагенты.КПП = """"";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СтрДлина(ИНН)=10 Тогда
				// Возвращаем ошибку контрагента - контрагент есть, но с пустым КПП - нужно исправить контрагента в базе (добавить КПП)
				ПроблемныеКонтрагенты(ИНН, КПП, КонтрагентНаименование, "Не заполнен КПП", 2, ВыборкаДетальныеЗаписи.ссылка);
				Возврат ВыборкаДетальныеЗаписи.ссылка;
			Иначе	
				Возврат ВыборкаДетальныеЗаписи.ссылка;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	//4. Если ИНН пустое - передаем обратно параметр
	Если ИНН = "" и не ФизЛицоПоИмени Тогда
		Возврат ТекущаяНастройкаОбмена.ЧастноеЛицо;
		
	Иначе
		//Ищем по наименованию
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование подобно &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", СокрЛП(КонтрагентНаименование));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
	КонецЕсли;
		

	
	// 5. Создаем нового контрагента
	Если _СоздатьНенайденныеЭлементы Тогда
		//Проверяем наличие помеченного на удаление контрагента
		Если Контрагент<>неопределено Тогда
			Сообщить("Но другого не найдено. Поэтому выбираем его!!!");
			ПроблемныеКонтрагенты(ИНН, КПП, КонтрагентНаименование, "Контрагент помечен на удаление", 2);
			Возврат Контрагент;
		КонецЕсли;
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		
		Контрагент.ЮридическоеФизическоеЛицо = ?(СтрДлина(ИНН)=10, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		
		ЭтоЮрЛицо = (Контрагент.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		Контрагент.ИНН = ИНН;
		Контрагент.КПП = КПП;
		
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			
 			РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(СокрЛП(ИНН));
			Если СокрЛП(РеквизитыКонтрагента.ОписаниеОшибки) = "" Тогда
				ЗаполнитьЗначенияСвойств(Контрагент, РеквизитыКонтрагента);
				Если ЭтоЮрЛицо Тогда
		
				// Заполнение адреса
		            НКИ = Контрагент.КонтактнаяИнформация.Добавить();
					ЗаполнитьЗначенияСвойств(НКИ,РеквизитыКонтрагента.ЮридическийАдрес);
					НКИ.вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
					НКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
					
		            НКИ = Контрагент.КонтактнаяИнформация.Добавить();
					ЗаполнитьЗначенияСвойств(НКИ,РеквизитыКонтрагента.ЮридическийАдрес);
					НКИ.вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
					НКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
					
		            НКИ = Контрагент.КонтактнаяИнформация.Добавить();
					ЗаполнитьЗначенияСвойств(НКИ,РеквизитыКонтрагента.ЮридическийАдрес);
					НКИ.вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
					НКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
					
				КонецЕсли;
			Иначе
				//Заполняем реквизиты самостоятельно
			КонецЕсли;			
			Если КПП = Контрагент.Кпп или КПП = "" Тогда
				Контрагент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку(УИД));
				Контрагент.Записать();
			Иначе
				ПроблемныеКонтрагенты(ИНН, КПП, КонтрагентНаименование, "Не удалось получить данные на сайте.. Возможно указан не верный КПП", 1);
				Возврат неопределено;
			КонецЕсли;	
		Иначе
			Контрагент.Наименование = КонтрагентНаименование;
			Контрагент.НаименованиеПолное = КонтрагентНаименование;
			Контрагент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку(УИД));
			Контрагент.Записать();
		КонецЕсли;
		
		Возврат Контрагент.Ссылка;
	КонецЕсли;
	
	ПроблемныеКонтрагенты(ИНН, КПП, КонтрагентНаименование, "Не заполнен контрагент.. Проверьте настройку создания новых элементов справочника", 1);
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция НайтиФизЛицо(ПолноеНаименование, ИНН = неопределено)
	//Ищем по ФИО
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.ФИО ПОДОБНО &ПолноеНаименование
		|	И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ПолноеНаименование", ПолноеНаименование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
		
		Возврат неопределено;
КонецФункции

&НаСервере
Функция НайтиОрганизацию(ИНН,КПП)
	
		//  Ищем по ИНН + КПП
		//-----------------------
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН
		|	И (Организации.КПП = &КПП
		|			ИЛИ Организации.КПП = """")";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
		
		//  2. Ищем по ИНН 
		//-----------------------
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
		
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция НайтиДоговор(Контрагент, НомерДоговора,ДатаДоговора, УИД_Строка, ВидДоговора, ПодразделениеВДоговоре, Подразделение = неопределено, ТочкаОформления = неопределено, ДоговорТип = неопределено, ВидРасчетовДоговора = неопределено)
	
	// Ищем по УИДу договора (свойство УИД_Матрица)
	// Если найдено и номер-дата не соответствует - меняем
	КонтрагентЧастноеЛицо = (Контрагент = ТекущаяНастройкаОбмена.ЧастноеЛицо);
	
	Если ЗначениеЗаполнено(УИД_Строка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеСведения.Объект КАК Объект,
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение,
		|			ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
		|		ГДЕ
		|			ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство = &СвойствоПодразделение) КАК ВложенныйЗапрос
		|		ПО ДополнительныеСведения.Объект = ВложенныйЗапрос.Ссылка
		|ГДЕ
		|	ДополнительныеСведения.Свойство.Имя = ""Матрица_УИД""
		|	И ДополнительныеСведения.Значение = &Договор_УИД
		|	И ВЫБОР
		|			КОГДА &ПодразделениеВДоговоре = ИСТИНА
		|				ТОГДА ВложенныйЗапрос.Значение = &Подразделение
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ДополнительныеСведения.Объект.Владелец = &Контрагент";
		
		Запрос.УстановитьПараметр("Договор_УИД", УИД_Строка);
		Запрос.УстановитьПараметр("ПодразделениеВДоговоре", ПодразделениеВДоговоре);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("СвойствоПодразделение", ДопРеквизит_ОбособленноеПодразделение);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Найден = Ложь;	
		
		//Проверка на частное лицо
		ПустойДоговор = Неопределено;
		Если КонтрагентЧастноеЛицо Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Значение = Подразделение Тогда
					Найден = Истина;
					Возврат ВыборкаДетальныеЗаписи.объект;			
				ИначеЕсли не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.значение) Тогда
					ПустойДоговор = ВыборкаДетальныеЗаписи.объект;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ПустойДоговор) Тогда
				Найден = Истина;
				Возврат ПустойДоговор;
			КонецЕсли;
		Иначе	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если не (ВыборкаДетальныеЗаписи.Объект.Номер = номерДоговора и ВыборкаДетальныеЗаписи.Объект.Дата  = ДатаДоговора) Тогда
					Договор = ВыборкаДетальныеЗаписи.объект.ПолучитьОбъект();
					Договор.Комментарий = Договор.Комментарий + "#"+ТекущаяДата()+" Изменены сведения о договоре №"+СокрЛП(Договор.Номер) + " от "+Формат(Договор.Дата,"ДФ=dd.MM.yyyy");
					Договор.Дата = ДатаДоговора;
					Договор.Номер = НомерДоговора;
					Договор.Наименование = ?(ДоговорТип = неопределено,"",СокрЛП(ДоговорТип)+ " ")+"№ "+СокрЛП(НомерДоговора) + " от "+Формат(ДатаДоговора,"ДФ=dd.MM.yyyy");
					Договор.Записать();
				КонецЕсли;
				Найден = Истина;
				Возврат ВыборкаДетальныеЗаписи.объект;			
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
		Если НомерДоговора<>неопределено  Тогда      //Не пустой договор
			Если номерДоговора=""  Тогда
				ф=1;
			КОнецЕсли;
		
			Если ПодразделениеВДоговоре Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	вложенныйЗапрос.Ссылка КАК Ссылка
				|ИЗ
				|	(ВЫБРАТЬ
				|		ЕСТЬNULL(ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка, ДоговорыКонтрагентов.Ссылка) КАК Ссылка,
				|		ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение
				|	ИЗ
				|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|			ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
				|			ПО (ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = ДоговорыКонтрагентов.Ссылка)
				|	ГДЕ
				|		ДоговорыКонтрагентов.Ссылка.ВидДоговора = &ВидДоговора
				|		И ДоговорыКонтрагентов.Ссылка.Номер = &Номер
				|		И ДоговорыКонтрагентов.Ссылка.Организация = &Организация
				|		И ДоговорыКонтрагентов.Ссылка.Владелец = &Владелец
				|		И ВЫБОР
				|				КОГДА &Подразделение = &ПустоеПодразделение
				|					ТОГДА ЕСТЬNULL(ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство, 0) = 0
				|							ИЛИ ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство = &Свойство
				|								И ДоговорыКонтрагентовДополнительныеРеквизиты.Значение = &Подразделение
				|				ИНАЧЕ ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство = &Свойство
				|						И ДоговорыКонтрагентовДополнительныеРеквизиты.Значение = &Подразделение
				|			КОНЕЦ) КАК вложенныйЗапрос
				|ГДЕ
				|	вложенныйЗапрос.Ссылка.ПометкаУдаления = ЛОЖЬ
				|
				|СГРУППИРОВАТЬ ПО
				|	вложенныйЗапрос.Ссылка";
				
				Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
				Запрос.УстановитьПараметр("Подразделение", Подразделение);
				Запрос.УстановитьПараметр("Свойство", ДопРеквизит_ОбособленноеПодразделение);
				
			Иначе // Если не по подразделению
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
				|	И ДоговорыКонтрагентов.Номер = &Номер
				|	И ДоговорыКонтрагентов.Дата = &Дата
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.Владелец = &Владелец
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
				
			КонецЕсли; //Проверка отбора по подразделению
			Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
			Запрос.УстановитьПараметр("Владелец", Контрагент);
			Запрос.УстановитьПараметр("Номер", СокрЛП(НомерДоговора));
			Запрос.УстановитьПараметр("Дата", ДатаДоговора);
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
				НовоеСвойство = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				НовоеСвойство.Объект = ВыборкаДетальныеЗаписи.Ссылка;
				НовоеСвойство.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","Матрица_УИД");
				НовоеСвойство.Значение = УИД_Строка;
			
				НовоеСвойство.Записать(Истина);			
			
				Возврат ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;
		
		//2. Ищем по Номер  + Организация + Вид договора  (БЕЗ ДАТЫ!!!)
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ДоговорыКонтрагентов.Дата = &Дата", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка.Дата = &Дата", "");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НовоеСвойство = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			НовоеСвойство.Объект = ВыборкаДетальныеЗаписи.Ссылка;
			НовоеСвойство.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","Матрица_УИД");
			НовоеСвойство.Значение = УИД_Строка;
			
			НовоеСвойство.Записать(Истина);			
			
			Возврат ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
		
	Иначе   // Договор не заполнен и будем искать по наименованию (ВидДоговора + " "+Организация) с учетом отбора по подразделению
		
		Если ЗначениеЗаполнено(ДоговорТип) и ДоговорТип = "Договор доработки" Тогда
			НаименованиеДоговора = СокрЛП(ДоговорТип)+" "+СокрЛП(Объект.Организация);
		Иначе
			НаименованиеДоговора = СокрЛП(ВидДоговора)+" "+СокрЛП(Объект.Организация);
		КонецЕсли;	
		
		Если ПодразделениеВДоговоре Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	вложенныйЗапрос.Ссылка КАК Ссылка
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЕСТЬNULL(ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка, ДоговорыКонтрагентов.Ссылка) КАК Ссылка,
			|		ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение
			|	ИЗ
			|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|			ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
			|			ПО (ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = ДоговорыКонтрагентов.Ссылка)
			|	ГДЕ
			|		ДоговорыКонтрагентов.Ссылка.ВидДоговора = &ВидДоговора
			|		И ДоговорыКонтрагентов.Ссылка.Наименование подобно &Наименование
			|		И ДоговорыКонтрагентов.Ссылка.Организация = &Организация
			|		И ДоговорыКонтрагентов.Ссылка.Владелец = &Владелец
			|		И ВЫБОР
			|				КОГДА &Подразделение = &ПустоеПодразделение
			|					ТОГДА ЕСТЬNULL(ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство, 0) = 0
			|							ИЛИ ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство = &Свойство
			|								И ДоговорыКонтрагентовДополнительныеРеквизиты.Значение = &Подразделение
			|				ИНАЧЕ ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство = &Свойство
			|						И ДоговорыКонтрагентовДополнительныеРеквизиты.Значение = &Подразделение
			|			КОНЕЦ) КАК вложенныйЗапрос
			|ГДЕ
			|	вложенныйЗапрос.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	вложенныйЗапрос.Ссылка";
			
			Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
			Запрос.УстановитьПараметр("Свойство", ДопРеквизит_ОбособленноеПодразделение);
			
		Иначе // Если не по подразделению
			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ДоговорыПеречень
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Организация = &Организация
			|	И ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
			|	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование
			|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение,
			|	ДоговорыПеречень.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ДополнительныеСвойства
			|ИЗ
			|	ДоговорыПеречень КАК ДоговорыПеречень
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
			|		ПО ДоговорыПеречень.Ссылка = ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка
			|ГДЕ
			|	ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство = &Свойство
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорыПеречень.Ссылка КАК Ссылка,
			|	ДополнительныеСвойства.Значение КАК Значение
			|ИЗ
			|	ДоговорыПеречень КАК ДоговорыПеречень
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДополнительныеСвойства КАК ДополнительныеСвойства
			|		ПО ДоговорыПеречень.Ссылка = ДополнительныеСвойства.Ссылка";                   
			
			
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("Наименование", НаименованиеДоговора+"%");
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Свойство", ДопРеквизит_ОбособленноеПодразделение);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ПустойДоговор = Неопределено;
		Если КонтрагентЧастноеЛицо Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Значение = Подразделение Тогда
					Найден = Истина;
					Возврат ВыборкаДетальныеЗаписи.ссылка;			
				ИначеЕсли не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.значение) Тогда
					ПустойДоговор = ВыборкаДетальныеЗаписи.ссылка;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ПустойДоговор) Тогда
				Найден = Истина;
				Возврат ПустойДоговор;
			КонецЕсли;
		Иначе
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Возврат ВыборкаДетальныеЗаписи.ссылка;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
	
	// Создаем новый договор
	Если _СоздатьНенайденныеЭлементы Тогда
		
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		
		Если НомерДоговора<>неопределено Тогда
			
			//НовыйДоговор.УстановитьСсылкуНового(Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(УИД));
			НовыйДоговор.Номер 			= НомерДоговора;
			НовыйДоговор.Дата 			= ДатаДоговора;
			НовыйДоговор.Наименование = ?(ДоговорТип = неопределено,"",СокрЛП(ДоговорТип)+" ") + "№ "+НомерДоговора+ " от "+Формат(ДатаДоговора,"ДФ=dd.MM.yyyy");
			НовыйДоговор.СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически;
			
			
		иначеЕсли не _СоздаватьДоговорыБезДоговора Тогда					// ПАРАМЕТР "Создавать договоры "Без договора""

			Возврат Неопределено;
			
		Иначе
			
			НовыйДоговор.Наименование = НаименованиеДоговора;
			
		КонецЕсли;	
		
		НовыйДоговор.Владелец 		= Контрагент;
		НовыйДоговор.Организация 	= Объект.Организация;
		НовыйДоговор.ВидДоговора 	= ВидДоговора;
		НовыйДоговор.ВидВзаиморасчетов = ?(не ЗначениеЗаполнено(ВидРасчетовДоговора),Справочники.ВидыВзаиморасчетов.ПустаяСсылка(),ВидРасчетовДоговора);
		НовыйДоговор.СпособВыставленияДокументов=Перечисления.СпособыВыставленияДокументов.Автоматически;
		
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			НовыйДоговор.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления;
			НовыйДоговор.ПроцентКомиссионногоВознаграждения = 100;
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			НовыйДоговор.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления;
			НовыйДоговор.ПроцентКомиссионногоВознаграждения = 100;
		КонецЕсли;	
			
		НовыйДоговор.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		
		
		Если Подразделение<>неопределено и ПодразделениеВДоговоре Тогда
			НовыйРеквизит = НовыйДоговор.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Свойство = ДопРеквизит_ОбособленноеПодразделение;
			НовыйРеквизит.Значение = Подразделение;
			
			НовыйДоговор.Наименование = НовыйДоговор.Наименование+" ("+ТочкаОформления+")";
		КонецЕсли;	
		
		НовыйДоговор.Записать();
		
		
		
		
		Возврат НовыйДоговор.Ссылка;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиДоговорМежхолдера(Контрагент, Организация, ВидДоговора, Подразделение = неопределено, ДопРеквизит_ДоговорМежхолдерный)
	
		
		//2. Ищем по Организация + Вид договора + Признак Межхолдера
		//--------------------------------------------
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка КАК Ссылка1
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка.ВидДоговора = &ВидДоговора
		|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка.Организация = &Организация
		|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка.Владелец = &Владелец
		|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство = &ДопРеквизитМежхолдер
		|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Значение = ИСТИНА
		|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("ДопРеквизитМежхолдер", ДопРеквизит_ДоговорМежхолдерный);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.ссылка;
		КонецЦикла;
		
		
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиАвтомобиль(ВИН, УИД_Строка, Наименование)
	
	// 1. Ищем по УИД
	//--------------------------------------------
	Если ЗначениеЗаполнено(УИД_Строка) Тогда
		УИД = Новый УникальныйИдентификатор(УИД_Строка);
		Попытка
			Автомобиль = Справочники.Номенклатура.ПолучитьСсылку(УИД).ПолучитьОбъект();
		Исключение
			Автомобиль = неопределено;
		КонецПопытки;
	Иначе
		Автомобиль = неопределено;
	КонецЕсли;
	
	Если Автомобиль <> неопределено Тогда
		Возврат Автомобиль.ссылка;
	КонецЕсли;
	
	//2. Ищем по ВИНу
	//--------------------------------------------
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &НомерВИН
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	ВИН = СтрЗаменить(ВИН,"Vin: ","");
	Запрос.УстановитьПараметр("НомерВИН", ВИН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЦикла;
	
	// Создаем новый автомобиль
	Если _СоздатьНенайденныеЭлементы Тогда
		НовыйАвтомобиль				= Справочники.Номенклатура.СоздатьЭлемент();
		НовыйАвтомобиль.Родитель	= ТекущаяНастройкаОбмена.ГруппаДляАвто;
		НовыйАвтомобиль.Артикул = ВИН;
		НовыйАвтомобиль.Наименование	= Наименование;
		НовыйАвтомобиль.НаименованиеПолное	= Наименование;
		//НовыйАвтомобиль.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар");
		НовыйАвтомобиль.ВидНоменклатуры = ТекущаяНастройкаОбмена.ВидНоменклатурыДляАвто;
		НовыйАвтомобиль.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		НовыйАвтомобиль.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку(УИД));
		НовыйАвтомобиль.Записать();
		
		Возврат НовыйАвтомобиль.Ссылка;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиДокументПередачи(Номенклатура, СчетУчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаТоваровТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПередачаТоваров.Товары КАК ПередачаТоваровТовары
		|ГДЕ
		|	ПередачаТоваровТовары.Номенклатура = &Номенклатура
		|	И ПередачаТоваровТовары.СчетПередачи = &СчетУчета
		|	И ПередачаТоваровТовары.Ссылка.Организация = &Организация
		|	И ПередачаТоваровТовары.Ссылка.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Документы.ПередачаТоваров.ПустаяСсылка();
	

КонецФункции

&НаСервере
Функция НайтиНоменклатуру_ТипБланка(Наименование)
	
	//2. Ищем по наименованию
	//--------------------------------------------
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование = &Наименование
	|	И Номенклатура.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", "Бланк: "+Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЦикла;
	
	// Создаем новый автомобиль
	Если _СоздатьНенайденныеЭлементы Тогда
		НовыйБланк				= Справочники.Номенклатура.СоздатьЭлемент();
		//НовыйАвтомобиль.Родитель		= _ГруппаНоменклатурыДляАвтомобиля;
		//НовыйАвтомобиль.Артикул = ВИН;
		НовыйБланк.Наименование	= "Бланк: "+Наименование;
		НовыйБланк.НаименованиеПолное	= Наименование;
		НовыйБланк.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги");
		НовыйБланк.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		//НовыйАвтомобиль.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку(УИД));
		НовыйБланк.Записать();
		
		Возврат НовыйБланк.Ссылка;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиНоменклатуру(УИДНоменклатуры)
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("УИДНоменклатуры",УИДНоменклатуры);
	РезультатПоиска = ПереченьНоменклатуры.НайтиСтроки(ПараметрыПоиска);
	Если РезультатПоиска.Количество()=1 Тогда
		Возврат РезультатПоиска[0].Номенклатура;
	Иначе
		Возврат неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура УстановитьПризнакМатериал(УИДНоменклатуры)
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("УИДНоменклатуры",УИДНоменклатуры);
	РезультатПоиска = ПереченьНоменклатуры.НайтиСтроки(ПараметрыПоиска);
	Если РезультатПоиска.Количество()=1 Тогда
		РезультатПоиска[0].ВидНоменклатуры = "Материал";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СтруктураЗатрат(УИД, Наименование)
	ПараметрыПоиска = Новый Структура();
	ПараметрыПоиска.Вставить("ВидРемонтаУИД" , УИД);
	РезультатПоиска = ТекущаяНастройкаОбмена.ВидыРемонта.НайтиСтроки(ПараметрыПоиска);
	Если РезультатПоиска.Количество()>0 Тогда
		Возврат РезультатПоиска[0];
		//Возврат РезультатПоиска[0].НоменклатурнаяГруппа;
	Иначе
		ТекущаяНастройкаОбменаОбъект = ТекущаяНастройкаОбмена.ПолучитьОбъект();
		НовоеСоответствие = ТекущаяНастройкаОбменаОбъект.ВидыРемонта.Добавить();
		НовоеСоответствие.ВидРемонтаНаименование = Наименование;
		НовоеСоответствие.ВидРемонтаУИД = УИД;
		ТекущаяНастройкаОбменаОбъект.Записать();
		Возврат неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция НайтиСтавкуНДС(Ставка,УИД,НоваяСтрока, Сумма=0, СуммаНДС=0)
	Если Ставка = "НДС18" Тогда
		Если Окр(Сумма*18/118,1)<Окр(СуммаНДС) и Окр(Сумма*18/100,1)<Окр(СуммаНДС) Тогда
			Возврат Перечисления.СтавкиНДС.НДС18_118;
		Иначе	
			Возврат Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;	
	ИначеЕсли Ставка = "НДС20" или Ставка = "20%" Тогда
		Если Окр(Сумма*20/120,1)<Окр(СуммаНДС) и Окр(Сумма*20/100,1)<Окр(СуммаНДС) Тогда
			Возврат Перечисления.СтавкиНДС.НДС20_120;
		Иначе	
			Возврат Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;	
	ИначеЕсли Ставка = "НДС10" или Ставка = "10%" Тогда
		Если Окр(Сумма*10/110,1)<Окр(СуммаНДС) и Окр(Сумма*10/100,1)<Окр(СуммаНДС) Тогда
			Возврат Перечисления.СтавкиНДС.НДС10_110;
		Иначе	
			Возврат Перечисления.СтавкиНДС.НДС10;
		КонецЕсли;	
	ИначеЕсли Ставка = "МЦР20" или Ставка = "20/120" или Ставка = "20/120%" Тогда
		Возврат Перечисления.СтавкиНДС.НДС20_120;
	ИначеЕсли Ставка = "НДС0" Тогда
		Если _НДС0_КакОшибка Тогда
			ДобавитьОписаниеОшибки(УИД,"Ошибка НДС");
			НоваяСтрока.ЕстьОшибки = Истина;
		КонецЕсли;
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли Ставка = "БезНДС"  или Ставка = "Без НДС" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли Ставка = "НДС10" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	Иначе
		ДобавитьОписаниеОшибки(УИД,"Ошибка НДС");
		НоваяСтрока.ЕстьОшибки = Истина;
	КонецЕсли;	
КонецФункции	

&НаСервере
Функция НайтиДопРеквизитПоИмени(ИмяДопРеквизита)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Имя", ИмяДопРеквизита);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЦикла;
	
	Возврат неопределено;
	
КонецФункции	

Функция НайтиСуммуНДС(Сумма,СтавкаНДС, ВТомЧисле)
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		СуммаНДС = ?(ВТомЧисле, Сумма*18/118,Сумма*18/100);
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		СуммаНДС = ?(ВТомЧисле, Сумма*20/120,Сумма*20/100);
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		СуммаНДС = ?(ВТомЧисле, Сумма*10/110,Сумма*10/100);
	Иначе	
		СуммаНДС = 0;
	КонецЕсли;	
	Возврат СуммаНДС;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьСебестоимость(Номенклатура, Склад, Организация,Подразделение, НачалоПериода, КонецПериода,УчитыватьПодразделение, РанееСозданныйДокументРеализации, СчетУчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт) КАК КоличествоОборотДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет = &СчетТМЦ, &СубконтоНоменклатура, Организация = &Организация";
	Если УчитыватьПодразделение Тогда
		Запрос.Текст = Запрос.Текст + "
		|				И Подразделение = &Подразделение";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
		|				И Субконто1 = &Номенклатура) КАК ХозрасчетныйОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("КонецПериода", НачалоМесяца(КонецМесяца(КонецПериода)+1));
	Запрос.УстановитьПараметр("НачалоПериода",НачалоПериода);
	Запрос.УстановитьПараметр("СубконтоНоменклатура", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СчетТМЦ", СчетУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Себестоимость = 0;
	Если ВыборкаДетальныеЗаписи.Количество()>1 Тогда
		Сообщить("Внимание! Сообщите разработчикам о наличии ошибки");
	КонецЕсли;	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.КоличествоНачальныйОстаток +ВыборкаДетальныеЗаписи.КоличествоОборотДт = 0 и ВыборкаДетальныеЗаписи.КоличествоКонечныйОстаток <= 0 Тогда
		Иначе 
			Если не ВыборкаДетальныеЗаписи.КоличествоНачальныйОстаток +ВыборкаДетальныеЗаписи.КоличествоОборотДт = 0 Тогда
				Возврат Окр((ВыборкаДетальныеЗаписи.СуммаНачальныйОстаток +ВыборкаДетальныеЗаписи.СуммаОборотДт)/(ВыборкаДетальныеЗаписи.КоличествоНачальныйОстаток +ВыборкаДетальныеЗаписи.КоличествоОборотДт),2);
			Иначе
				Возврат Окр(ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток/ВыборкаДетальныеЗаписи.КоличествоКонечныйОстаток,2);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	// Если не нашли, конечный остаток на момент документа реализации (только если уже создан)
	Если ЗначениеЗаполнено(РанееСозданныйДокументРеализации) Тогда
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаКонечныйОстаток,
		|	СУММА(ХозрасчетныйОстатки.КоличествоОстаток) КАК КоличествоКонечныйОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода,  Счет = &СчетТМЦ, &СубконтоНоменклатура, Организация = &Организация";
		Если УчитыватьПодразделение Тогда
			Запрос.Текст = Запрос.Текст + "
			|				И Подразделение = &Подразделение";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|				И Субконто1 = &Номенклатура) КАК ХозрасчетныйОстатки";
		
		//МоментДОДокумента = Новый Граница(РанееСозданныйДокументРеализации,ВидГраницы.Исключая); 
		Запрос.УстановитьПараметр("КонецПериода", РанееСозданныйДокументРеализации.Дата);
	
		РезультатЗапроса = Запрос.Выполнить();
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Если ВыборкаДетальныеЗаписи.Количество()>1 Тогда
			Сообщить("Внимание! Сообщите разработчикам о наличии ошибки");
		КонецЕсли;	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.КоличествоКонечныйОстаток<>0 Тогда
				Возврат Окр(ВыборкаДетальныеЗаписи.СуммаКонечныйОстаток/ВыборкаДетальныеЗаписи.КоличествоКонечныйОстаток,2);
			Иначе
				Возврат 0;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Возврат 0;
КонецФункции

&НаСервере
Функция РазвернутьПоНоменклатуре(ДоговорКонтрагента)
	Если ДопРеквизит_ЗНРазвернуто = неопределено Тогда
		Возврат Ложь;
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
		|ГДЕ
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &Ссылка
		|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство = &Свойство";
		
		Запрос.УстановитьПараметр("Свойство", ДопРеквизит_ЗНРазвернуто);
		Запрос.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Значение;
		КонецЦикла;
	
	КонецЕсли;
	Возврат Ложь;
КонецФункции
#КонецОбласти

&НаСервере
Процедура ПроблемныеКонтрагенты(ИНН, КПП, Наименование, ОписаниеПроблемы = "",ВажностьПроблемы = 1, контрагент ="")
	
	НС = ПроблемныеКонтрагенты.Добавить();
	НС.ИНН = ИНН;
    НС.КПП = КПП;
	НС.Контрагент = Контрагент;
	НС.Наименование = Наименование;
	НС.ОписаниеПроблемы = ОписаниеПроблемы;
	НС.ВажностьПроблемы = ВажностьПроблемы;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеОшибки(УИД, ТекстОшибки)
	СтрокаОшибки = ОшибкиЗагрузки.Добавить();
	СтрокаОшибки.УидДокумента = УИД;
	СтрокаОшибки.ОписаниеОшибки = ТекстОшибки;
	
КонецПроцедуры



&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов()
КОнецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастроитьОтображение(Истина);
	ВосстановитьНастройкиНаСервере();
КонецПроцедуры



&НаСервере
Функция ПолучитьСтруктуруОрганизации(Организация, Параметр_ТочкаОформления = неопределено)
	СтруктураОрганизации = Новый Структура;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	Если ДопРеквизит_ОбособленноеПодразделение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка()
		и Параметр_ТочкаОформления = неопределено Тогда
		ТочкаОформления = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
	Иначе
		ТочкаОформления = Параметр_ТочкаОформления;
	КонецЕсли;
	
	СтруктураОтбора.Вставить("ТочкаОформления", ТочкаОФормления);
	
	
	ОтборПодразделений = ТекущаяНастройкаОбмена.СоответствияОрганизаций.НайтиСтроки(СтруктураОтбора);
	
	
	Если ОтборПодразделений.количество() = 0 Тогда
		Если не Параметр_ТочкаОформления = неопределено Тогда
			//попробуем найти без точки оформления
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Организация", Организация);
			ОтборПодразделений = ТекущаяНастройкаОбмена.СоответствияОрганизаций.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;	
		Если ОтборПодразделений.количество() = 0 или ОтборПодразделений.количество() > 1 Тогда
			
			СтруктураОрганизации.Вставить("Подразделение",Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
			СтруктураОрганизации.Вставить("ПодразделениеЗатрат", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
			СтруктураОрганизации.Вставить("Склад",Справочники.Склады.ПустаяСсылка());
			//СтруктураОрганизации.Вставить("Склад",ТекущаяНастройкаОбмена.ОсновнойСклад);
			СтруктураОрганизации.Вставить("СтатьяЗатрат", Справочники.СтатьиЗатрат.ПустаяСсылка());
			СтруктураОрганизации.Вставить("СтатьяЗатратЕНВД", Справочники.СтатьиЗатрат.ПустаяСсылка());
			СтруктураОрганизации.Вставить("НоменклатурнаяГруппаДляСписания", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
			СтруктураОрганизации.Вставить("СчетЗатратДляСписания", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
			СтруктураОрганизации.Вставить("ПодразделениеВДоговореРеализация", Ложь);
			СтруктураОрганизации.Вставить("ПодразделениеВДоговореПоступление", Ложь);
			СтруктураОрганизации.Вставить("СпособУчетаНДС", Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
			СтруктураОрганизации.Вставить("ВидРасчетовДоговора", Справочники.ВидыВзаиморасчетов.ПустаяСсылка());
			СтруктураОрганизации.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
			
			Возврат СтруктураОрганизации;	
			
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураОрганизации.Вставить("Подразделение", ОтборПодразделений[0].ПодразделениеОрганизации);
	СтруктураОрганизации.Вставить("ПодразделениеЗатрат", ОтборПодразделений[0].ПодразделениеЗатрат);
	СтруктураОрганизации.Вставить("Склад",ОтборПодразделений[0].Склад);
	СтруктураОрганизации.Вставить("СтатьяЗатрат",ОтборПодразделений[0].СтатьяЗатрат);
	СтруктураОрганизации.Вставить("СтатьяЗатратЕНВД",ОтборПодразделений[0].СтатьяЗатратЕНВД);
	СтруктураОрганизации.Вставить("НоменклатурнаяГруппаДляСписания",ОтборПодразделений[0].НоменклатурнаяГруппаДляСписания);
	СтруктураОрганизации.Вставить("СчетЗатратДляСписания", ОтборПодразделений[0].СчетЗатратДляСписания);
	СтруктураОрганизации.Вставить("ПодразделениеВДоговореРеализация", ОтборПодразделений[0].ПодразделениеВДоговореРеализация);
	СтруктураОрганизации.Вставить("ПодразделениеВДоговореПоступление", ОтборПодразделений[0].ПодразделениеВДоговореПоступление);
	СтруктураОрганизации.Вставить("СпособУчетаНДС", ОтборПодразделений[0].СпособУчетаНДС);
	СтруктураОрганизации.Вставить("ВидРасчетовДоговора", ОтборПодразделений[0].ВидРасчетовДоговора);
	СтруктураОрганизации.Вставить("СчетУчета", ОтборПодразделений[0].СчетУчетаЗапчастей);
	
	Возврат СтруктураОрганизации;
КонецФункции

&НаСервере
Процедура ОчищаемТаблицы()
	
	ПереченьНоменклатуры.Очистить();
	ОшибкиЗагрузки.Очистить();
	ПроблемныеКонтрагенты.Очистить();
	РеализацияАвтомобилей.Очистить();
	ПоступлениеАвтомобилей.Очистить();
	
	Межхолдер.Очистить();
	Межхолдер_Товары.Очистить();
	
	АвансовыйОтчет.Очистить();
	СписаниеТоваров.Очистить();
	ДоукомплектацияАвтомобилей.Очистить();
	ОприходованиеТоваров.Очистить();
	Перемещения.Очистить();
	ПеремещенияАвтомобилей.Очистить();
	ВозвратТоваровПоставщику.Очистить();
	ВозвратПокупателя.Очистить();
	ПоступлениеТоваровУслуг.Очистить();
	ЗаказНаряды.Очистить();
	УслугиПроизводства.Очистить();
	ЗаказНарядыПокупатель.Очистить();
	РеализацияТиУ.Очистить();
	ПриемАгентом.Очистить();
	ПередачаАгенту.Очистить();
	АктДоработки.Очистить();
	СтраховыеСделки.Очистить();
	ОтчетКомитенту.Очистить();
	ОтчетАгента.Очистить();
	Комплектация.Очистить();
	
	ПередачаВПереработку.Очистить();
	ВозвратИзПереработки.Очистить();
	
	ДоговорыТЭФЛ.Очистить();
	
	ПоступлениеМатериалов.Очистить();
	РеализацияМатериалов.Очистить();
	РеализацияУслуг.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыЗагрузкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПриАктивизацииСтрокиОбщая(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	Для Каждого СтрокаТЧ из ТекущийЭлемент.ТекущиеДанные Цикл
		СтрокаТЧ.Загружать = Истина;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыДокументов()
	
	Если ТекущаяНастройкаОбмена.ВидыДокументов.Количество()=0 Тогда
		ВидыДокументов.Добавить("ПоступлениеТоваров","Поступление товаров (запчасти)");
		ВидыДокументов.Добавить("МТЗакупка","Поступление материалов");
		ВидыДокументов.Добавить("НЭЗакупка","Поступление товаров (автомобили)");
		ВидыДокументов.Добавить("НЭДоработка","Акты доработки");
		ВидыДокументов.Добавить("АвансовыйОтчет","Авансовый отчет");
		ВидыДокументов.Добавить("ВозвратПокупателя","Возврат от покупателя");
		ВидыДокументов.Добавить("ОприходованиеТоваров","Оприходование товаров");
		ВидыДокументов.Добавить("ЗаказНаряд","Заказ-наряд");
		ВидыДокументов.Добавить("УслугаПроизводства","Услуги производства");
		ВидыДокументов.Добавить("ЗаказНарядПокупатель","Заказ-наряд (покупатель)");
		ВидыДокументов.Добавить("РеализацияТоваров","Реализация товаров (запчасти)");
		ВидыДокументов.Добавить("РеализацияУслуг","Реализация услуг");
		ВидыДокументов.Добавить("МТРеализация","Реализация материалов");
		ВидыДокументов.Добавить("НЭРеализация","Реализация товаров (автомобили)");
		ВидыДокументов.Добавить("ВозвратПоставщику","Возврат поставщику");
		ВидыДокументов.Добавить("СписаниеТоваров","Списание товаров");
		ВидыДокументов.Добавить("НЭДоукомплектация","Доукомплектация автомобилей");
		ВидыДокументов.Добавить("ПеремещениеТоваров","Перемещение товаров");
		ВидыДокументов.Добавить("НЭПеремещение","Перемещение автомобилей");
		ВидыДокументов.Добавить("НЭПриемНаХранение","Прием на хранение(комиссию)");
		ВидыДокументов.Добавить("НЭПередачаНаХранение","Передача на хранение(комиссию)");
		ВидыДокументов.Добавить("НЭОтчетАгента","Отчет комитенту");
		ВидыДокументов.Добавить("НЭОтчетАгентаВходящий","Отчет комиссионера о продажах");
		ВидыДокументов.Добавить("КСОСделкаСтрахование","Страховые сделки");
		ВидыДокументов.Добавить("НЭПередачаНаПереработку","Передача на переработку");
		ВидыДокументов.Добавить("НЭПриемИзПереработки","Поступление из переработки");
		ВидыДокументов.Добавить("КомплектацияТоваров","Комплектация");
		ВидыДокументов.Добавить("ДоговорТЭФЛ","Договоры доставки");
	
		ВидыДокументов.Добавить("МЕЖХОЛДЕР","Межхолдерные движения товаров");
		
	Иначе
		
		Для Каждого СтрокаТЧ из ТекущаяНастройкаОбмена.ВидыДокументов Цикл
			ЗначениеПеречисления = СтрокаТЧ.Идентификатор;
			ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
			ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
			ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;			
			ВидыДокументов.Добавить(ИмяЗначенияПеречисления, ЗначениеПеречисления);
		КонецЦикла;
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеДокументы(Команда)
	Для Каждого СтрокаТЧ из ВидыДокументов Цикл
		СтрокаТЧ.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуСДокументов(Команда)
	Для Каждого СтрокаТЧ из ВидыДокументов Цикл
		СтрокаТЧ.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьВидыДокументов(Команда)
	ВидыДокументов.Очистить();
	ЗаполнитьВидыДокументов();
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьНДСсНаценки(Договор,Реквизит_НДСсНаценки)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
		|ГДЕ
		|	ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &Ссылка
		|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Свойство", Реквизит_НДСсНаценки);
	Запрос.УстановитьПараметр("Ссылка", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	

	Возврат Ложь;
	
КонецФункции


#Область Заполнение_Отдельных_Документов
&НаСервере
Процедура ЗаполнитьДокументПТиУ(Док, СтрокаТЧ,  ВидПоступления = неопределено, ЭтоАвтомобиль = Ложь)
	//Заполняем реквизиты по умолчанию
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ВидПоступления = "На комиссию" тогда
		Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	ИначеЕсли ВидПоступления="Доработка" Тогда
		Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
	Иначе	
		Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
	КонецЕсли;	
		
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Док.Склад = СтрокаТЧ.Склад;
	Док.СуммаВключаетНДС = Истина;
	ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата);
	ЭтоНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, СтрокаТЧ.Дата);
	Если ЭтоЕНВД или (не ЭтоНДС) Тогда
		Док.НДСВключенВСтоимость = Истина;
	КонецЕсли;
	Если ВидПоступления="На комиссию" Тогда
		Док.НДСНеВыделять = Истина;
	КонецЕсли;
	
	Док.ПодразделениеОрганизации = СтрокаТЧ.подразделениеОрганизации;
	
	//Заполняем из табличной части
	Если ТекущаяНастройкаОбмена.Поступление_ДатаИзВходящегоДокумента Тогда
		Док.Дата = СтрокаТЧ.ДатаВходящегоДокумента;	
	Иначе
		Док.Дата = СтрокаТЧ.Дата;
	КонецЕсли;	
	Док.Организация = Объект.Организация;
	Док.ДатаВходящегоДокумента = СтрокаТЧ.ДатаВходящегоДокумента;
	Док.НомерВходящегоДокумента = СтрокаТЧ.НомерВходящегоДОкумента;
	Док.Контрагент = СтрокаТЧ.Контрагент;
	Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
	
	// Заполним табличную часть документа
	ОтборСтрокНоменклатуры = Новый Структура;
	ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
	
	Док.Товары.Очистить();
	Док.Услуги.очистить();
	
	Если ВидПоступления = "Доработка" Тогда
		Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
			НС = Док.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
			НС.Номенклатура = ТекущаяНастройкаОбмена.Доработка_Номенклатура;
			НС.Содержание = СокрЛП(НС.Номенклатура.НаименованиеПолное) + " "+СтрокаТЧ_Номенклатура.АвтомобильНаименование;
			НС.Количество = 1;
			НС.СчетЗатрат = ТекущаяНастройкаОбмена.Доработка_СчетЗатрат;
			НС.СчетЗатратНУ = ТекущаяНастройкаОбмена.Доработка_СчетЗатрат;
			НС.Субконто1 = ТекущаяНастройкаОбмена.Доработка_СтатьяЗатрат;
			НС.СубконтоНУ1 = ТекущаяНастройкаОбмена.Доработка_СтатьяЗатрат;
			НС.ПодразделениеЗатрат = СтрокаТЧ.ПодразделениеОрганизации;
			НС.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
			НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
			//НС.СтавкаНДС = СтрокаТЧ_Номенклатура.ставкаНДС;
			
		КонецЦикла;	
	Иначе
		Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
			Если ВидПоступления = "На комиссию" тогда
				НС = Док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				НС.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
				НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
				НС.Количество = 1;
				НС.Цена = СтрокаТЧ_Номенклатура.ОценкаСтоимости;
				НС.Сумма = СтрокаТЧ_Номенклатура.ОценкаСтоимости;
				НС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
			Иначе	
				НС = Док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
				Если ЭтоАвтомобиль Тогда
					НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
					НС.Количество = 1;
					НС.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
					НС.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
					НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
					НС.СтавкаНДС = СтрокаТЧ_Номенклатура.ставкаНДС;
				Иначе            
					Если НС.Номенклатура.ВидНоменклатуры =ВидНоменклатуры_Малоценка	 Тогда

						СчетУчета_ = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы;
					ИначеЕсли ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры Тогда	
					    СчетУчета_ = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета;
					Иначе
						СчетУчета = СтрокаТЧ_Номенклатура.СчетУчета;	
					КонецЕсли;	
					НС.СчетУчета = СчетУчета_;
					НС.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
					НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
					НС.СтавкаНДС = СтрокаТЧ_Номенклатура.ставкаНДС;
					Если УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,Док.Дата) Тогда
						НС.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	  КонецЕсли;
	Док.пометкаУдаления = ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументВозвратТиУ(Док, СтрокаТЧ, СтруктураОрганизации, ЭтоЕнВД, ЭтоАгентскийДоговор = Ложь)

	
			//Заполняем реквизиты по умолчанию
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			Док.ВидОперации = ?(ЭтоАгентскийДоговор,Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары,Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия);
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
			Док.Склад = СтруктураОрганизации.Склад;
			Док.СуммаВключаетНДС = Истина;
			
			
			Док.ПодразделениеОрганизации = СтруктураОрганизации.подразделение;
			Док.Склад = СтруктураОрганизации.Склад;
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.Организация = Объект.Организация;
			Док.Контрагент = СтрокаТЧ.Контрагент;
			Док.КратностьВзаиморасчетов = 1;
			Док.КурсВзаиморасчетов = 1;
			Если не ЭтоАгентскийДоговор Тогда
				Док.Сделка = СтрокаТЧ.ДокументОСнование;
			КонецЕсли;	
			Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
			Док.Комментарий = "#Загружен: "+?(ЭтоАгентскийДоговор,"Отчет агента №","Возврат товаров № ")+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
		
			Док.Товары.Очистить();
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
				НС = Док.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура); 
				Если ЭтоАгентскийДоговор Тогда                        
					НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
					НС.СчетУчета = ПланыСчетов.Хозрасчетный.Товары;
					НС.ПереданныеСчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;   
					НС.Количество = 1;
				Иначе	
					НС.СчетУчета = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчета);;
				КонецЕсли;	
				НС.СтавкаНДС = СтрокаТЧ_Номенклатура.ставкаНДС;
				НС.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
				НС.СпособУчетаНДС = СтруктураОрганизации.СпособУчетаНДС;     
				Если ЭтоЕНВД Тогда
					НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД; // 90.01.2
					НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД; // 90.02.2
				Иначе
					НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.1
					НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
				КонецЕсли; 
				Если не ТекущаяНастройкаОбмена.ОрганизацииХолдинга.Найти(Док.Контрагент)=неопределено Тогда
					НС.Субконто = ТекущаяНастройкаОбмена.РеализацияЯвнаяМежхолдер;
				Иначе
					НС.Субконто = ТекущаяНастройкаОбмена.Реализация_НоменклатурнаяГруппа;
				КонецЕсли;	
				
			КонецЦикла;	
			
			Док.пометкаУдаления = ложь;
			Док.ПокупателемВыставляетсяСчетФактураНаВозврат = Истина;
	
	
		КонецПроцедуры
		
&НаСервере
Процедура ЗаполнитьДокументКорректировкаРеализации(Док, СтрокаТЧ, СтруктураОрганизации)

	
			//Заполняем реквизиты по умолчанию
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			Док.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Док.Склад = СтруктураОрганизации.Склад;
			Док.СуммаВключаетНДС = Истина;
			Док.КорректироватьБУиНУ = Истина;
			Док.ДокументРеализации = СтрокаТЧ.ДокументОснование;
			Док.ИсправляемыйДокументРеализации = СтрокаТЧ.ДокументОснование;
			Док.ИсходныйДокументРеализации = СтрокаТЧ.ДокументОснование;
			
			Если Год(СтрокаТЧ.Дата)<>Год(Док.ИсходныйДокументРеализации.Дата) и
				СтрокаТЧ.Дата>Дата(Формат(СтрокаТЧ.дата,"ДФ=гггг")+"0401") Тогда
				
				ДОк.ОтчетностьПодписана = Истина;
				Док.СтатьяПрочихДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет;
			КонецЕсли;
			Док.ПризнаватьЗачитыватьАванс = Истина;
			
			
			
			Док.ПодразделениеОрганизации = СтруктураОрганизации.подразделение;
			Док.Склад = СтруктураОрганизации.Склад;
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.Организация = Объект.Организация;
			Док.Контрагент = СтрокаТЧ.Контрагент;
			Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
			Док.Комментарий = "#Загружен: Возврат товаров № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.Товары.Очистить();
			
			Док.ЗаполнитьПоДокументуОснованию(СтрокаТЧ.ДокументОснование);
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
				// Ищем нужную строку
				Для Каждого СтрокаДок из Док.Товары цикл
					Если СтрокаДок.Номенклатура = СтрокаТЧ_Номенклатура.Номенклатура Тогда
						СтрокаДок.Количество = СтрокаДок.КоличествоДоИзменения - СтрокаТЧ_Номенклатура.Количество;
						СтрокаДок.Цена = СтрокаДок.ЦенаДоИзменения;
						СтрокаДок.Сумма = СтрокаДок.СуммаДоИзменения - СтрокаТЧ_Номенклатура.сумма;
						Если СтрокаДок.Количество = 0 Тогда
							СтрокаДок.СуммаНДС = 0;
						ИначеЕсли СтрокаДок.КоличествоДоИзменения<>СтрокаДок.Количество Тогда
							СтрокаДок.СуммаНДС = Окр(СтрокаДок.СуммаНДСДоИзменения/СтрокаДок.КоличествоДоИзменения*СтрокаДок.Количество,2,РежимОкругления.Окр15как20);
						КонецЕсли;	
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;	
			
			Док.пометкаУдаления = ложь;
	
	
		КонецПроцедуры
		
&НаСервере
Процедура ЗаполнитьДокументКорректировкаПоступления(Док, СтрокаТЧ, СтруктураОрганизации)

//Док = Документы.КорректировкаПоступления.СоздатьДокумент();	
	
			//Заполняем реквизиты по умолчанию
			Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
			Док.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
			Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
//			Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Док.Склад = СтруктураОрганизации.Склад;
			Док.СуммаВключаетНДС = Истина;
			
			Док.НомерВходящегоДокумента = СтрокаТЧ.НомерВходящегоДокумента;
			Док.ДатаВходящегоДокумента = СтрокаТЧ.ДатаВходящегоДокумента;
			
			
			Док.КорректироватьБУиНУ = Истина;
			Док.ДокументПоступления = СтрокаТЧ.ДокументОснование;
			Док.ИсправляемыйДокументПоступления = СтрокаТЧ.ДокументОснование;
			
			Док.ПризнаватьЗачитыватьАванс = Истина;
			
			Док.ПодразделениеОрганизации = СтруктураОрганизации.подразделение;
			Док.Склад = СтруктураОрганизации.Склад;
			
			//Заполняем из табличной части
			Док.Дата = СтрокаТЧ.Дата;
			Док.Организация = Объект.Организация;
			Док.Контрагент = СтрокаТЧ.Контрагент;
			Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
			Док.Комментарий = "#Загружен: Возврат товаров № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
			
			// Заполним табличную часть документа
			ОтборСтрокНоменклатуры = Новый Структура;
			ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
			
			Док.Товары.Очистить();
			
			Док.ЗаполнитьПоДокументуОснованию(СтрокаТЧ.ДокументОснование);
			
			Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
				// Ищем нужную строку
				Для Каждого СтрокаДок из Док.Товары цикл
					Если СтрокаДок.Номенклатура = СтрокаТЧ_Номенклатура.Номенклатура Тогда
						СтрокаДок.Количество = СтрокаДок.КоличествоДоИзменения - СтрокаТЧ_Номенклатура.Количество;
						СтрокаДок.Цена = СтрокаДок.ЦенаДоИзменения;
						СтрокаДок.Сумма = СтрокаДок.СуммаДоИзменения - СтрокаТЧ_Номенклатура.сумма;
						Если СтрокаДок.Количество = 0 Тогда
							СтрокаДок.СуммаНДС = 0;
							СтрокаДок.Сумма = 0;
							СтрокаДок.Цена = 0;
						ИначеЕсли СтрокаДок.КоличествоДоИзменения<>СтрокаДок.Количество Тогда
							СтрокаДок.СуммаНДС = Окр(СтрокаДок.СуммаНДСДоИзменения/СтрокаДок.КоличествоДоИзменения*СтрокаДок.Количество,2,РежимОкругления.Окр15как20);
						КонецЕсли;	
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;	
			
			Док.пометкаУдаления = ложь;
	
	
		КонецПроцедуры
		
&НаСервере
Процедура ЗаполнитьДокументВозвратПостащику(Док, СтрокаТЧ, СтруктураОрганизации, ВозвратКомитенту = Ложь, Временно_ПодразделениеИзТаблицы = ложь)
	//Заполняем реквизиты по умолчанию
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Док.СчетУчетаРасчетовСКонтрагентом = ?(ВозвратКомитенту,ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами,ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	//Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Док.Склад = СтруктураОрганизации.Склад;
	Док.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	Док.СчетУчетаРасчетовПоПретензиям = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям;
	Док.КратностьВзаиморасчетов = 1;
	Док.КурсВзаиморасчетов = 1;
	Док.СуммаВключаетНДС = Истина;
	
	Док.ПодразделениеОрганизации = ?(Временно_ПодразделениеИзТаблицы, СтрокаТЧ.ПодразделениеОрганизации,СтруктураОрганизации.Подразделение);
	Док.Склад = СтруктураОрганизации.склад;
	
	//Заполняем из табличной части
	Док.Дата = СтрокаТЧ.Дата;
	Док.Организация = Объект.Организация;
	Док.Контрагент = СтрокаТЧ.Контрагент;
	Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
	Если ВозвратКомитенту Тогда
		Док.Сделка = СтрокаТЧ.ДокументПередачи;
	Иначе
		Док.Сделка = СтрокаТЧ.ДокументОСнование;
	КонецЕсли;
	
	Если ВозвратКомитенту Тогда
		Док.Комментарий = "#Загружен: Возврат комитенту № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
		
	Иначе
		Док.Комментарий = "#Загружен: Возврат поставщику № "+СтрокаТЧ.СчетФактураНомер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
	КонецЕсли;	
	
	// Заполним табличную часть документа
	ОтборСтрокНоменклатуры = Новый Структура;
	ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД);
	
	Док.Товары.Очистить();
	Если ВозвратКомитенту Тогда
		Док.ДокументБезНДС = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
		НС = Док.Товары.Добавить();
		Если ВозвратКомитенту Тогда
			НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
			НС.Количество = 1;
			НС.Цена = СтрокаТЧ_Номенклатура.ОценкаСтоимости;
			НС.Сумма = СтрокаТЧ_Номенклатура.ОценкаСтоимости;
		Иначе
			ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
			НС.Себестоимость = 0;
			НС.СтавкаНДС = СтрокаТЧ_Номенклатура.ставкаНДС;
			НС.СуммаНДС       = СтрокаТЧ_Номенклатура.СуммаНДС;
		КонецЕсли;	
			НС.СчетУчета = ?(ВозвратКомитенту,ПланыСчетов.Хозрасчетный.ТоварыНаСкладе,?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчета));
		
		Док.пометкаУдаления = ложь;
		
		
		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументРеализацияТиУ(Док, СтрокаТЧ, СтруктураОрганизации, ЭтоАвтомобиль = Ложь, Временно_ПодразделениеИзТаблицы = ложь, ЭтоУслуги = Ложь, ВидОперации = "")
	
	ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата);
	ЭтоНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, СтрокаТЧ.Дата);
			
	
	//Заполняем реквизиты по умолчанию
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.ВидОперации = ?(ЭтоУслуги,Перечисления.ВидыОперацийРеализацияТоваров.Услуги,?(ВидОперации = "На комиссию", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия,Перечисления.ВидыОперацийРеализацияТоваров.Товары));
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	Док.СуммаВключаетНДС = Истина;
	
	Док.ПодразделениеОрганизации = ?(Временно_ПодразделениеИзТаблицы, СтрокаТЧ.ПодразделениеОрганизации,СтруктураОрганизации.Подразделение);
	
	//Заполняем из табличной части
	Док.Дата = СтрокаТЧ.Дата;
	Если ТекущаяНастройкаОбмена.Реализация_НомерИзОУ  и Док.Дата>=Дата("20200101") Тогда
		Док.Номер = СтрокаТЧ.Номер;
	КонецЕсли;
	Док.Организация = Объект.Организация;
	Док.Контрагент = СтрокаТЧ.Контрагент;
	Док.Склад = СтрокаТЧ.склад;
	Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
	Если ВидОперации = "На комиссию" Тогда
		Док.Комментарий = "#Загружен: Передача агенту № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
	Иначе
		Док.Комментарий = "#Загружен: Реализация товаров/услуг № "+СтрокаТЧ.СчетФактураНомер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
		
	КонецЕсли;
	
	// Заполним табличную часть документа
	ОтборСтрокНоменклатуры = Новый Структура;
	ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД); 
	
	Док.Товары.Очистить();
	Док.Услуги.Очистить();

	ЕстьКолонкаНДС = (СтрокаТЧ.Товары.Выгрузить().Колонки.Найти("СтавкаНДС")<>неопределено);
	Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
		
		Если ЭтоУслуги Тогда
			НС = Док.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
			НС.Содержание = СтрокаТЧ_Номенклатура.Наименование;
		Иначе	
			НС = Док.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
			НС.Себестоимость = 0;
		
			Если ЭтоАвтомобиль Тогда
				НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
				НС.Количество = 1;
				НС.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			Иначе	
				НС.СчетУчета = ?(ТекущаяНастройкаОбмена.ИспользоватьСчетаУчетаНоменклатуры,БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,НС.Номенклатура,).СчетУчета,СтрокаТЧ_Номенклатура.СчетУчета);
			КонецЕсли;
		    
			НС.СтавкаНДС = ?(ЭтоНДС,?(ЕстьКолонкаНДС,СтрокаТЧ_Номенклатура.СтавкаНДС, Перечисления.СтавкиНДС.НДС20),Перечисления.СтавкиНДС.БезНДС);
		КонецЕсли;
		
		Если ЭтоУслуги Тогда
			НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.2
			НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.2
			НС.Субконто = ТекущаяНастройкаОбмена.РеализацияУслуг_НоменклатурнаяГруппа;
		ИначеЕсли ВидОперации = "На комиссию" тогда
			НС.ПереданныеСчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;
		ИначеЕсли ЭтоЕНВД и НС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД; // 90.01.2
			НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД; // 90.02.2
			НС.Субконто = ТекущаяНастройкаОбмена.Реализация_НоменклатурнаяГруппаЕНВД;
		Иначе
			НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.1
			НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
			Если ЭтоАвтомобиль Тогда
				//Проверяем на межценовую разницу
			КонецЕсли;	
			НС.Субконто = ТекущаяНастройкаОбмена.Реализация_НоменклатурнаяГруппа;
		КонецЕсли; 
		Если не ТекущаяНастройкаОбмена.ОрганизацииХолдинга.Найти(Док.Контрагент)=неопределено Тогда
			НС.Субконто = ТекущаяНастройкаОбмена.РеализацияЯвнаяМежхолдер;
		КонецЕсли;	
		
		
		
		НС.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НС, "Товары", Док.Метаданные());
		
	КонецЦикла;	
	
	Док.пометкаУдаления = ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументРеализацияТиУ_СтраховыеСделки(Док, СтрокаТЧ, СтруктураОрганизации)
	
	ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата);
	ЭтоНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, СтрокаТЧ.Дата);
			
	
	//Заполняем реквизиты по умолчанию
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	Док.СуммаВключаетНДС = Истина;
	
	Док.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
	Док.Склад = СтруктураОрганизации.склад;
	
	//Заполняем из табличной части
	Док.Дата = СтрокаТЧ.Дата;
	Док.Организация = Объект.Организация;
	Док.Контрагент = СтрокаТЧ.Контрагент;
	Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
	Док.Комментарий = "#Загружен: Реализация товаров № "+СтрокаТЧ.СчетФактураНомер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
	
	// Заполним табличную часть документа
	ОтборСтрокНоменклатуры = Новый Структура;
	ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД); 
	
	Док.Товары.Очистить();
	Док.АгентскиеУслуги.Очистить();
	
	Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
		НС = Док.АгентскиеУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
		
		//НС.СчетУчета = ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
		
		НС.СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТЧ_Номенклатура.ставкаНДС),СтрокаТЧ_Номенклатура.ставкаНДС,Перечисления.СтавкиНДС.БезНДС);
		
		НС.Содержание = СтрокаТЧ_Номенклатура.Номенклатура_Бланк;
		НС.Контрагент = СтрокаТЧ_Номенклатура.Страховая_Контрагент;
		НС.ДоговорКонтрагента = СтрокаТЧ_Номенклатура.Страховая_Договор;
		
		НС.СчетРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НС, "Товары", Док.Метаданные());
		
	КонецЦикла;	
	
	Док.пометкаУдаления = ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументРеализацияАгентом(Док, СтрокаТЧ)
	
	ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата);
	ЭтоНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, СтрокаТЧ.Дата);
			
	
	//Заполняем реквизиты по умолчанию
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Док.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	Док.СуммаВключаетНДС = Истина;
	
	Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
	Док.Склад = СтрокаТЧ.склад;
	
	//Заполняем из табличной части
	Док.Дата = СтрокаТЧ.Дата;
	Док.Организация = Объект.Организация;
	Док.Комментарий = "#Загружен: отчет агента № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
	
	// Заполним табличную часть документа
	ОтборСтрокНоменклатуры = Новый Структура;
	ОтборСтрокНоменклатуры.Вставить("УИДДокумента",СтрокаТЧ.УИД); 
	
	Док.Товары.Очистить();
	
	Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
		НС = Док.Товары.Добавить();
		
		Док.Контрагент = СтрокаТЧ_Номенклатура.Контрагент;
		Док.ДоговорКонтрагента = СтрокаТЧ_Номенклатура.ДоговорКонтрагента;
		
		НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
		НС.Цена = СтрокаТЧ_Номенклатура.Сумма;
		НС.Количество =1;
		НС.Сумма = СтрокаТЧ_Номенклатура.Сумма;
		НС.СуммаНДС = СтрокаТЧ_Номенклатура.СуммаНДС;
		НС.Себестоимость = 0;
		НС.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
		НС.СтавкаНДС = СтрокаТЧ_Номенклатура.ставкаНДС;
		Если ЭтоЕНВД Тогда
			НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД; // 90.01.2
			НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД; // 90.02.2
		Иначе
			НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД; // 90.01.1
			НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; // 90.02.1
		КонецЕсли; 
		НС.Субконто = ТекущаяНастройкаОбмена.НоменклатурнаяГруппаТрейдИН;
		
		НС.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НС, "Товары", Док.Метаданные());
		
	КонецЦикла;	
	
	Док.пометкаУдаления = ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументОтчетКомитенту(Док, СтрокаТЧ)
	
	ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата);
	ЭтоНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, СтрокаТЧ.Дата);
			
	
	//Заполняем реквизиты по умолчанию
	
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах;
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Док.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	
	Док.СуммаВключаетНДС = Истина;
	
	Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
	
	//Заполняем из табличной части
	Док.Дата = СтрокаТЧ.Дата;
	Док.Организация = Объект.Организация;
	Док.Контрагент = СтрокаТЧ.Контрагент;
	Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
	
	Док.СпособРасчетаКомиссионногоВознаграждения = Док.ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
	Док.ПроцентКомиссионногоВознаграждения = Док.ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
	ДОк.УслугаПоВознаграждению = ТекущаяНастройкаОбмена.УслугаПоВознаграждению;
	Док.СчетДоходов = ?(ЭтоЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Док.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.НДС;
	Док.СтавкаНДСВознаграждения = ?(ЭтоНДС, Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.БезНДС);
	
	
	Док.Комментарий = "#Загружен: Отчет комитенту № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
	
	// Заполним табличную часть документа
	
	Док.Товары.Очистить();
	
	Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
		НС = Док.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НС, СтрокаТЧ_Номенклатура);
		НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
		НС.Цена = СтрокаТЧ_Номенклатура.сумма;
		НС.ДатаРеализации = СтрокаТЧ.Дата;
		НС.Количество = 1;
		НС.СтавкаНДС = СтрокаТЧ_Номенклатура.ставкаНДС;
		НС.Покупатель = СтрокаТЧ_Номенклатура.Контрагент;
		НС.СуммаПоступления = СтрокаТЧ_Номенклатура.ОценкаСтоимости;
		НС.ЦенаПоступления = СтрокаТЧ_Номенклатура.ОценкаСтоимости;
		НС.СуммаВознаграждения =   НС.Сумма - НС.СуммаПоступления;
		НС.СуммаНДСВознаграждения = ?(НС.СтавкаНДС = Перечисления.СтавкиНДС.НДС20, НС.СуммаВознаграждения*20/120,0);
		
		НужнаКорректировкаДолга = Ложь;
		Если НС.СуммаПоступления>НС.Сумма Тогда
			Док.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
			ДОк.ПроцентКомиссионногоВознаграждения = 0;
			НС.СуммаВознаграждения = 0;
		КонецЕсли;
	КонецЦикла;	
	
	Док.пометкаУдаления = ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументОтчетКомиссионера(Док, СтрокаТЧ)
	
	ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата);
	ЭтоНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, СтрокаТЧ.Дата);
			
	
	//Заполняем реквизиты по умолчанию
	
//	Док = Документы.ОтчетКомиссионераОПродажах.СоздатьДокумент();
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.КратностьВзаиморасчетов = 1;
	Док.КурсВзаиморасчетов = 1;
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Док.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	Док.СчетУчетаРасчетовПоАвансамВыданным = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	Док.СчетУчетаРасчетовПоАвансамПолученным = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	Док.СчетУчетаРасчетовЗаПосредническиеУслуги = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	
	Док.ДокументБезНДС = не ЭтоНДС;
	
	
	Док.СуммаВключаетНДС = Истина;
	
	Док.ПодразделениеОрганизации = СтрокаТЧ.ПодразделениеОрганизации;
	
	//Заполняем из табличной части
	Док.Дата = СтрокаТЧ.Дата;
	Док.Организация = Объект.Организация;
	Док.Контрагент = СтрокаТЧ.Контрагент;
	Док.ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;
	
	Док.СпособРасчетаКомиссионногоВознаграждения = Док.ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
	Док.ПроцентКомиссионногоВознаграждения = Док.ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
	
	Док.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
	Док.Субконто1 = Справочники.СтатьиЗатрат.УслугиКомиссионеров;
	Док.ПодразделениеЗатрат = СтрокаТЧ.подразделениеОрганизации;
	
	Док.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	Док.СпособЗачетаАвансов=Перечисления.СпособыЗачетаАвансов.Автоматически;
	Док.СтавкаНДСВознаграждения = ?(ЭтоНДС, Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.БезНДС);
	
	
	Док.Комментарий = "#Загружен: Отчет агента № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
	
	// Заполним табличную часть документа
	
	Док.Товары.Очистить();
	Док.Покупатели.Очистить();
	
	Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
		
		НС_Покупатели = Док.Покупатели.Добавить();
		НС_Покупатели.Покупатель = СтрокаТЧ_Номенклатура.Контрагент;
		НС_Покупатели.ВыставленСФ = ЭтоНДС;
		НС_Покупатели.КлючСтроки = НС_Покупатели.НомерСтроки;  
		НС_Покупатели.ДатаСФ = СтрокаТЧ_Номенклатура.ДатаДокументРеализации;
		НС_Покупатели.НомерСФ = СтрокаТЧ_Номенклатура.НомерДокументРеализации;  
		
		НС = Док.Товары.Добавить();
		НС.СчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;
		НС.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
		НС.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;    
		НС.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.НДС;
		НС.Субконто =  ТекущаяНастройкаОбмена.НоменклатурнаяГруппаТрейдИНТовары;
		
		НС.КлючСтроки = НС_Покупатели.КлючСтроки;
		НС.Номенклатура = СтрокаТЧ_Номенклатура.Автомобиль;
		НС.Цена = СтрокаТЧ_Номенклатура.сумма;
		НС.Сумма = СтрокаТЧ_Номенклатура.сумма;     
		
		//НС.ДатаРеализации = СтрокаТЧ.Дата;
		НС.Количество = 1;
		НС.СтавкаНДС = СтрокаТЧ_Номенклатура.ставкаНДС; 
		НС.СуммаНДС = СтрокаТЧ_Номенклатура.СуммаНДС;
		НС.СуммаПередачи = СтрокаТЧ_Номенклатура.ОценкаСтоимости;
		НС.СуммаВознаграждения =   НС.Сумма - НС.СуммаПередачи;
		НС.СуммаНДСВознаграждения = ?(Док.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.НДС20, НС.СуммаВознаграждения*20/120,0);
		
		
	КонецЦикла;	
	
	Док.пометкаУдаления = ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументКорректировкаДолга(Док, СтрокаТЧ, СтруктураОрганизации)
	
	ЭтоЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, СтрокаТЧ.Дата);
	ЭтоНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, СтрокаТЧ.Дата);
			
	
	//Заполняем реквизиты по умолчанию
	
	Док.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	Док.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	Док.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	Док.СубконтоКт1 = ТекущаяНастройкаОбмена.СтатьяРасходовПоУбыткамКомиссионера;
	Док.СубконтоКт2 = СтрокаТЧ.товары[0].Автомобиль;
	
	Док.ПодразделениеОрганизации = СтруктураОрганизации.Подразделение;
	
	//Заполняем из табличной части
	Док.Дата = СтрокаТЧ.Дата;
	Док.Организация = Объект.Организация;
	Док.КонтрагентКредитор = СтрокаТЧ.Контрагент;
	
	
	Док.КратностьДокумента = 1;
	Док.КурсДокумента = 1;
	
	
	Док.Комментарий = "#Загружен: Отчет комитенту № "+СтрокаТЧ.Номер + " от "+СтрокаТЧ.Дата+ " Дата загрузки "+ТекущаяДата();
	
	// Заполним табличную часть документа
	
	Док.КредиторскаяЗадолженность.Очистить();
	
	Для Каждого СтрокаТЧ_Номенклатура из СтрокаТЧ.Товары Цикл
		НС = Док.КредиторскаяЗадолженность.Добавить();
		НС.ДоговорКонтрагента = СтрокаТЧ.ДоговорКОнтрагента;
		НС.КратностьВзаиморасчетов = 1;
		НС.КурсВзаиморасчетов = 1;
		НС.Сумма = СтрокаТЧ_Номенклатура.ОценкаСтоимости-СтрокаТЧ_Номенклатура.Сумма;
		НС.СуммаВзаиморасчетов = НС.Сумма;
		НС.СуммаНУ = НС.Сумма;
		НС.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	
	КонецЦикла;	
	
	Док.пометкаУдаления = ложь;
КонецПроцедуры


#КонецОбласти		

&НаСервере
Процедура СохранитьНастройкиНаСервере();
	
	ТекЗапись = Справочники.АВ_НастройкиОбмена.СоздатьЭлемент();
	
	
	Выборка = Справочники.АВ_НастройкиОбмена.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекЗапись = Выборка.ПолучитьОбъект();
	КонецЦикла;
	
	//ТекЗапись.ЧастноеЛицо = _ФизЛицо;
	ТекЗапись.Наименование = "Настройка первоначальная";
	
	//ТекЗапись.ДопРеквизитОбособленноеПодразделение = ДопРеквизит_ОбособленноеПодразделение;
	//ТекЗапись.ДопРеквизит_Автомобиль = ДопРеквизит_Автомобиль;
	
	ТекЗапись.ПроцентМежхолдернойНаценки = _Межхолдер_ПроцентНаценки;
	
	//ТекЗапись.ГруппаДляАвто = _ГруппаНоменклатурыДляАвтомобиля;
	//ТекЗапись.ГруппаДляЗапчастей = _ГруппаНовойНоменклатуры;
	//ТекЗапись.ВидНоменклатурыДляЗапчастей = _ВидНоменклатуры;
	
	//ТекЗапись.Номенклатура_Авторабота = _Авторабота;
	
	//ТекЗапись.Реализация_НоменклатурнаяГруппа =_НоменклатурнаяГруппа;
	//ТекЗапись.РеализацияСкрытаяМежхолдер = _НоменклатурнаяГруппаМежхолдера;
	//ТекЗапись.РеализацияЯвнаяМежхолдер =  _НоменклатурнаяГруппаМежхолдера;
	//ТекЗапись.УслугаПоВознаграждению = _УслугаПоВознаграждению;
	//ТекЗапись.СтатьяРасходовПоУбыткамКомиссионера = _СтатьяРасходовПоУбыткамКомиссионера;
	
	//ТекЗапись.ВидыРемонта.Очистить();
	//Для Каждого СтрокаТЧ из СоответствиеВидовРемонта Цикл
	//	НС = ТекЗапись.ВидыРемонта.Добавить();
	//	НС.ВидРемонтаНаименование = СтрокаТЧ.ВидРемонта;
	//	НС.ВидРемонтаУИД = СтрокаТЧ.ВидРемонтаУИД;
	//	НС.НоменклатурнаяГруппа = СтрокаТЧ.НоменклатурнаяГруппа;
	//	НС.СчетЗатрат = СтрокаТЧ.СЧетЗатрат;
	//	НС.Подразделение = СтрокаТЧ.Подразделение;
	//	НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
	//КонецЦикла;
	
	//ТекЗапись.ОрганизацииХолдинга.Очистить();
	//Для ТекСтр =1 по  ОрганизацииХолдинга.Количество() Цикл
	//	НС = ТекЗапись.ОрганизацииХолдинга.Добавить();
	//	НС.Контрагенты = ОрганизацииХолдинга[ТекСтр-1].Значение;
	//КонецЦикла;	
	
	//ТекЗапись.СоответствияОрганизаций.Очистить();
	//Для Каждого СтрокаТЧ из СоответствиеОрганизаций Цикл
	//	НС = ТекЗапись.СоответствияОрганизаций.Добавить();
	//	НС.Организация = СтрокаТЧ.Организация;
	//	НС.Склад = СтрокаТЧ.Склад;
	//	НС.ПодразделениеОрганизации = СтрокаТЧ.Подразделение;
	//	НС.ПодразделениеЗатрат = СтрокаТЧ.ПодразделениеЗАтрат;
	//	НС.СтатьяЗатрат = СтрокаТЧ.СтатьяЗАтрат;
	//	НС.СчетЗатратДляСписания = СтрокаТЧ.СчетЗатратДляСписания;
	//	НС.НоменклатурнаяГруппаДляСписания = СтрокаТЧ.НоменклатурнаяГруппаДляСписания;
	//	
	//	НС.ПодразделениеВДоговореПоступление = СтрокаТЧ.ПодразделениеВДоговоре;
	//	НС.ПодразделениеВДоговореРеализация = СтрокаТЧ.ПодразделениеВДоговоре;
	//	НС.ТочкаОформления = СтрокаТЧ.ТочкаОформления;
	//КонецЦикла;
	//ТекЗапись.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	ПолучитьФорму("Справочник.АВ_НастройкиОбмена.ФормаСписка").Открыть();
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиНаСервере()
	
	Выборка = Справочники.АВ_НастройкиОбмена.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекущаяНастройкаОбмена = выборка.Ссылка;
		ТекЗапись = Выборка;
		
		//_ФизЛицо = Выборка.ЧастноеЛицо;
		
		//ДопРеквизит_ОбособленноеПодразделение = Выборка.ДопРеквизитОбособленноеПодразделение;
		//ДопРеквизит_Автомобиль = Выборка.ДопРеквизит_Автомобиль;
		//ДопРеквизит_УИДПеремещения = Выборка.ДопРеквизит_УИДПеремещения;
		
		_Межхолдер_ПроцентНаценки = Выборка.ПроцентМежхолдернойНаценки;
		//_ГруппаНоменклатурыДляАвтомобиля = Выборка.ГруппаДляАвто;
		//_ГруппаНовойНоменклатуры = Выборка.ГруппаДляЗапчастей;
		//_ВидНоменклатуры = Выборка.ВидНоменклатурыДляЗапчастей;
		//_Авторабота = Выборка.Номенклатура_Авторабота;
		//_НоменклатурнаяГруппа = Выборка.Реализация_НоменклатурнаяГруппа;
		//_НоменклатурнаяГруппаМежхолдера = Выборка.РеализацияСкрытаяМежхолдер;
		//_НоменклатурнаяГруппаТрейдИН = Выборка.НоменклатурнаяГруппаТрейдИН;
		//_УслугаПоВознаграждению = Выборка.УслугаПоВознаграждению;
		//_СтатьяРасходовПоУбыткамКомиссионера = Выборка.СтатьяРасходовПоУбыткамКомиссионера;
		
		//СоответствиеВидовРемонта.Очистить();
		//Для Каждого СтрокаТЧ из Выборка.ВидыРемонта Цикл
		//	НС = СоответствиеВидовРемонта.Добавить();
		//	НС.ВидРемонта = СтрокаТЧ.ВидРемонтаНаименование;
		//	НС.ВидРемонтаУИД = СтрокаТЧ.ВидРемонтаУИД;
		//	НС.НоменклатурнаяГруппа = СтрокаТЧ.НоменклатурнаяГруппа;
		//	НС.СчетЗатрат = СтрокаТЧ.СЧетЗатрат;
		//	НС.Подразделение = СтрокаТЧ.Подразделение;
		//	НС.СпособУчетаНДС = СтрокаТЧ.СпособУчетаНДС;
		//КонецЦикла;
		
		//ОрганизацииХолдинга.Очистить();
		//СпОрганизацииХолдинга = Выборка.ОрганизацииХолдинга.ВыгрузитьКолонку("Контрагенты");
		//ОрганизацииХолдинга.ЗагрузитьЗначения(СпОрганизацииХолдинга);
	
		//СоответствиеОрганизаций.Очистить();
		//Для Каждого СтрокаТЧ из Выборка.СоответствияОрганизаций Цикл
		//	НС = СоответствиеОрганизаций.Добавить();
		//	НС.Организация = СтрокаТЧ.Организация;
		//	НС.Склад = СтрокаТЧ.Склад;
		//	НС.Подразделение = СтрокаТЧ.ПодразделениеОрганизации;
		//	НС.ПодразделениеЗатрат = СтрокаТЧ.ПодразделениеЗАтрат;
		//	НС.СтатьяЗатрат = СтрокаТЧ.СтатьяЗАтрат;
		//	НС.СчетЗатратДляСписания = СтрокаТЧ.СчетЗатратДляСписания;
		//	НС.НоменклатурнаяГруппаДляСписания = СтрокаТЧ.НоменклатурнаяГруппаДляСписания;
		//	
		//	НС.ПодразделениеВДоговоре = СтрокаТЧ.ПодразделениеВДоговореПоступление;
		//	НС.ТочкаОформления = СтрокаТЧ.ТочкаОформления;
		//КонецЦикла;
		
		Прервать;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)
	ВосстановитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	СохранитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСкладыОУ(Команда)
	ПолучитьФорму("Справочник.АВ_СкладыМатрица.формаСписка").Открыть();
КонецПроцедуры

&НаСервере
Процедура ПереченьНоменклатурыНоменклатураПриИзмененииНаСервере(Номенклатура, УИД)
	
	НаборЗаписей = РегистрыСведений.АВ_СоответствиеОбъектовМатрица.СоздатьНаборЗаписей(); 

	НаборЗаписей.Отбор.Объект.Установить(Номенклатура); 

	НоваяЗапись = НаборЗаписей.Добавить(); 
	НоваяЗапись.Объект = Номенклатура; 
	НоваяЗапись.УИД_Матрица = УИД; 

	НаборЗаписей.Записать();   
КонецПроцедуры

&НаКлиенте
Процедура ПереченьНоменклатурыНоменклатураПриИзменении(Элемент)
	Если Вопрос("Установить соответствие с выбранной номенклатурой?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
		ПереченьНоменклатурыНоменклатураПриИзмененииНаСервере(Элементы.ПереченьНоменклатуры.ТекущиеДанные.Номенклатура, Элементы.ПереченьНоменклатуры.ТекущиеДанные.УИДНоменклатуры);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПереченьНоменклатурыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элементы.ПереченьНоменклатуры.ТекущиеДанные.Номенклатура) Тогда
		СтандартнаяОбработка = ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	Для Каждого ТекЭлементФормы из ЭтаФорма.Элементы Цикл
		Если Прав(ТекЭлементФормы.Имя,10) = "ЕстьОшибки" Тогда
			Элемент = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ТекЭлементФормы.Родитель.Имя);

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекЭлементФормы.Родитель.Имя+".ЕстьОшибки");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;

			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		КонецЕсли;
		
		Если Прав(ТекЭлементФормы.Имя,15) = "ВариантЗагрузки" Тогда
			
			//Загружен первоначально без ошибок
			Элемент = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ТекЭлементФормы.Родитель.Имя);

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекЭлементФормы.Родитель.Имя+".ВариантЗагрузки");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 1;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекЭлементФормы.Родитель.Имя+".ЕстьОшибки");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;

			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАкцента);
			
			//Загружен повторно без ошибок
			Элемент = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ТекЭлементФормы.Родитель.Имя);

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекЭлементФормы.Родитель.Имя+".ВариантЗагрузки");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 2;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекЭлементФормы.Родитель.Имя+".ЕстьОшибки");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;

			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветПодписи);
		
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидМалоценки()
	Возврат Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Малоценное оборудование и запасы");
КонецФункции


//Заполняем дополнительные реквизиты
ДопРеквизит_ОбособленноеПодразделение = НайтиДопРеквизитПоИмени("Подразделение");
ДопРеквизит_УИДПеремещения = НайтиДопРеквизитПоИмени("УИДПеремещения");
ДопРеквизит_ЗНРазвернуто = НайтиДопРеквизитПоИмени("ЗН_Развернуто");
ВидНоменклатуры_Малоценка = ПолучитьВидМалоценки();
